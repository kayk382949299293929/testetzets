//=============‚â†‚â†==========‚â†‚â†=============\\

const {
  WAConnection,
  MessageType,
  Presence,
  MessageOptions,
  Mimetype,
  WALocationMessage,
  WA_MESSAGE_STUB_TYPES,
  WA_DEFAULT_EPHEMERAL,
  ReconnectMode,
  ProxyAgent,
  GroupSettingChange,
  relayWaMessage,
  waChatKey,
  waMessage,
  mentionedJid,
  processTime
} = require("@adiwajshing/baileys");
//=======================================\\


//=============NODES-MODULOS=============\\
const simple = require('./lib/simple.js')
const chalk = require('chalk')
const yts = require('yt-search')
const fs = require('fs')
const crypto = require('crypto')
const util = require('util')
const axios = require('axios')
const encodeUrl = require('encodeurl')
const linkfy = require('linkifyjs')
const request = require('request')
const cheerio = require('cheerio')
const ffmpeg = require('fluent-ffmpeg')
const imgbb = require('imgbb-uploader')
const googleImage = require('g-i-s')
const googleIt = require('google-it')
const fetch = require('node-fetch')
const imageToBase64 = require('image-to-base64')
const hx = require('hxz-api')
const { EmojiAPI } = require("emoji-api");
const emoji = new EmojiAPI();
const { exec } = require('child_process')
const moment = require('moment-timezone')
const color = (text, color) => { return !color ? chalk.green(text) : chalk.keyword(color)(text) }
//=======================================\\



//===================‚â†‚â†===================\\

const { fetchJson, fetchText, getBase64, createExif } = require('./lib/fetcher')

const { version, bugs } = require('./package.json')

const { y2mateV, y2mateA, wikiSearch, jagoKata } = require('./lib/y2mate')

const { yta, ytv, igdl, uploadImages, buffer2Stream, ytsr, baseURI, stream2Buffer, noop } = require('./lib/ytdl')

const { mediafireDl } = require('./lib/js/mediafire.js')

const { upload } = require('./lib/tourl')

const { uploadd } = require('./lib/tourl2')

const { webp2gifFile } = require("./lib/js/gif.js")

const { recognize } = require('./lib/js/ocr')

const { addBanned, unBanned, BannedExpired, cekBannedUser } = require("./lib/js/banned.js")

const { isFiltered, addFilter } = require('./lib/js/antispam.js')

const { validmove, setGame } = require('./lib/tictactoe');

 //==============‚â†=========‚â†============\\


//==========(BLOCK-DE-COMANDOS)========\\

const { addComandosId, deleteComandos, getComandoBlock, getComandos, addComandos } =  require('./lib/js/addcmd.js')

//=====================================\\


//============(ANAGRAMA)==============\\

const { palavrasANA } = require('./lib/jogo/anagram.js')

//======================================\\


//=========(LEVELS)-(LEVELING)===========\\
const { getLevelingXp, getLevelingLevel, getLevelingId, addLevelingXp, addLevelingLevel, addLevelingId, bayarLimit, limitAdd, addATM, addKoinUser, checkATMuser, getRegisteredRandomId, addRegisteredUser, createSerial, checkRegisteredUser, confirmATM, cekafk, isAfk, runtime, addafk, getpc, supre } = require('./lib/js/consts.js')

const { wait, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, banner2, banner3, simih, start, info, success, close, temporizador, cmdadd, addMetadata} = require('./lib/functions.js');

//LOGOS-SEM-API\\
const { pSmoky, pOuro, pSemi, pFogo, pShadow, pRomantic, pSmoke, pBurnPapper, pNaruto, pLoveMsg,pMsgGrass, pDoubleHeart, pCoffeCup, pCoffe2, pLoveText, pHarryPotter, pAwolfMetal, pCup, pCaptain, pButterfly, pGlitch, pGooglesg, pNeon2, p8Bit, pMadeira, pWooden, pGold } = require('./lib/js/photooxy')

//===========(JSON-FUN√á√ïES)============\\

const adeuscara = JSON.parse(fs.readFileSync('./lib/grupos/adeuscara.json'))

const voting = JSON.parse(fs.readFileSync('./lib/voting.json'))

const sotoy = JSON.parse(fs.readFileSync('./lib/sotoy.json'))

const { addVote, delVote } = require('./lib/js/vote')

const { infovotacao } = require('./lib/js/infovotacao.js')

const countMessage = JSON.parse(fs.readFileSync('./lib/grupos/countmsg.json'))

const comandos = JSON.parse(fs.readFileSync('./dono/media/comandos.json'));

const vacilo = JSON.parse(fs.readFileSync('./lib/usuarios/vacilo.json'))

const modobn = JSON.parse(fs.readFileSync('./lib/grupos/brincadeiras.json'))

const nsfw = JSON.parse(fs.readFileSync('./lib/grupos/nsfw.json'))

const nescessario = JSON.parse(fs.readFileSync('./dono/nescessario.json'))

const welkom = JSON.parse(fs.readFileSync('./lib/grupos/welkom.json'))

const premium = JSON.parse(fs.readFileSync('./lib/usuarios/premium.json'));

const limitefll = JSON.parse(fs.readFileSync('./lib/usuarios/flood.json'))

const antiflood = JSON.parse(fs.readFileSync('./lib/usuarios/antiflood.json'))

const samih = JSON.parse(fs.readFileSync('./lib/usuarios/simi.json'))

const _leveling = JSON.parse(fs.readFileSync('./lib/usuarios/leveling.json'))

const _level = JSON.parse(fs.readFileSync('./lib/usuarios/level.json'))

let bancht = JSON.parse(fs.readFileSync('./lib/grupos/banchat.json'))

const anticall = JSON.parse(fs.readFileSync('./lib/usuarios/anticall.json'))

const ban = JSON.parse(fs.readFileSync('./lib/usuarios/banned.json'))

//===========(JS-MENUS)‚â†===============\\

const { infocontador } = require('./lib/js/infocontador.js')

const { infolistanegra } = require('./lib/js/infolistanegra.js')

const { infopalavrao } = require('./lib/js/infopalavrao.js')

const { infobancarac } = require('./lib/js/infobancarac.js')

const { destrava, destrava2 } = require('./lib/destrava.js')

const { tabela } = require('./lib/js/tabela')

//=======‚â†======(INFOS)========‚â†‚â†========\\

const setting = JSON.parse(fs.readFileSync('./dono/settings.json'))

const { conselhob } = require('./lib/js/conselhob.js');

const { palavras } = require('./lib/js/conselhos.js');

//===========‚â†(ANTIS-JSONS)‚â†=============\\

const antilink = JSON.parse(fs.readFileSync('./lib/ants/antilink.json'))

const user = JSON.parse(fs.readFileSync('./lib/user.json'))

const antifake = JSON.parse(fs.readFileSync('./lib/ants/antifake.json'))

const antilinkhard = JSON.parse(fs.readFileSync('./lib/ants/antilinkhard.json'))

const antiimg = JSON.parse(fs.readFileSync('./lib/ants/antiimg.json'))

const antidoc = JSON.parse(fs.readFileSync('./lib/ants/antidoc.json'))

const antiloc = JSON.parse(fs.readFileSync('./lib/ants/antiloc.json'))

const antipv = JSON.parse(fs.readFileSync('./lib/usuarios/antipv.json'))

const antivid = JSON.parse(fs.readFileSync('./lib/ants/antivideo.json'))

const antiaudio = JSON.parse(fs.readFileSync('./lib/ants/antiaudio.json'))

const palavra = JSON.parse(fs.readFileSync('./lib/grupos/palavras.json'))

const palavr√£o = JSON.parse(fs.readFileSync('./lib/grupos/palavr√£o.json'))

//=======‚â†===============‚â†==============\\

//(N√ÉO APAGUE: S√ÉO EXPORTA√á√ïES)
prefix = setting.prefix

NomeDoBot = setting.NomeDoBot

NickDono = setting.NickDono

numerodono = setting.numerodono

imgnazista = nescessario.imgnazista

imggay = nescessario.imggay

imgcorno = nescessario.imgcorno

imggostosa = nescessario.imggostosa

imggostoso = nescessario.imggostoso

imgfeio = nescessario.imgfeio

imggado = nescessario.imggado

imgvesgo = nescessario.imgvesgo

imgbebado = nescessario.imgbebado

legendasaiu = nescessario.legendasaiu

legendabv = nescessario.legendabv

fundo1 = nescessario.fundo1

fundo2 = nescessario.fundo2

linklogos = nescessario.linklogos

limitefl = limitefll.limitefl

banChats = nescessario.banChats

dapuhykey = setting.dapuhykey

dono2 = nescessario.dono2

dono3 = nescessario.dono3

dono4 = nescessario.dono4

dono5 = nescessario.dono5

//====================‚â†‚â†===============\\

offline = false

numbernye = '0'

blocked = [] 

hitt = []

//=====================================\\


//=========(CONEX√ÉO-DO-BOT)===========\\
const starts = async (ayumi = new WAConnection()) => {
ayumi._maxListeners = 200;
ayumi.browserDescription = ["ayumi", "Sacole", "0.14.1"];
ayumi.browserDescription.push('ayumi','Baileys','Opera');
ayumi.autoReconnect = ReconnectMode.onconnectionLost || 2
ayumi.logger.level = 'warn'
console.log(banner.string)
ayumi.connectOptions.maxRetries = 99999
ayumi.on('qr', () => {
console.log(color(''), color(' Escaneie acima para conectar a ayumi-bot'))
})

fs.existsSync('./ayumi.json') && ayumi.loadAuthInfo('./ayumi.json')

ayumi.on('connecting', () => {
 start('2', 'Conectando ...')
})

ayumi.on('open', () => {
success('2', 'conectado!!!')

console.log(chalk.magenta(""), chalk.keyword("orange")("üç®"), chalk.magenta('ayumi conectada bom uso...'))
}) 

await ayumi.connect({
timeoutMs: 30 * 1000
})

fs.writeFileSync('./ayumi.json', JSON.stringify(ayumi.base64EncodedAuthInfo(), null, '\t'))
ayumi.on('close', () => {
rc = 'Desconectada..'
console.log(color(rc,'red'))
})

//============(FIM-CONEX√ÉO)=============\\

function kyun(seconds){
function pad(s){
return (s < 10 ? '0' : '') + s;
}
var hours = Math.floor(seconds / (60*60));
var minutes = Math.floor(seconds % (60*60) / 60);
var seconds = Math.floor(seconds % 60);
return `${pad(hours)} Horas ${pad(minutes)} Minutos ${pad(seconds)} Segundos`
}

//===============(BEM VINDO)=============\\

ayumi.on('group-participants-update', async (anu) => {
const mdata = await ayumi.groupMetadata(anu.jid)  
const adeuscara = JSON.parse(fs.readFileSync('./lib/grupos/adeuscara.json'))
const dbackid = []
for(i=0;i<adeuscara.length;++i) dbackid.push(adeuscara[i].groupId)
console.log(anu)
if(dbackid.indexOf(anu.jid) >= 0) {
if (anu.action == 'add'){ 
num = anu.participants[0]
var ind = dbackid.indexOf(anu.jid)
if(adeuscara[ind].actived && adeuscara[ind].number.indexOf(num.split('@')[0]) >= 0) {
await ayumi.sendMessage(mdata.id, '*Olha quem deu as cara por aqui, sente o poder do ban caba√ßo*', MessageType.text)
ayumi.groupRemove(mdata.id, [num])
return
}
}
}
if(antifake.includes(anu.jid)) {
if (anu.action == 'add'){
num = anu.participants[0]
if(!num.split('@')[0].startsWith(55)) {
ayumi.sendMessage(mdata.id, ' ‚õπÔ∏è‚õπÔ∏èBye Bye Estrangeiro...üëãüèåÔ∏è', MessageType.text)
setTimeout(async function () {
ayumi.groupRemove(mdata.id, [num])
}, 1000)
}
}
}
if (!welkom.includes(anu.jid)) return
try {
const mdata = await ayumi.groupMetadata(anu.jid)
num = anu.participants[0]
console.log(anu)
ini_user = ayumi.contacts[num]
namaewa = ini_user.notify
member = mdata.participants.length
try {
var ppimg = await ayumi.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)
} catch {
var ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
}
try {
var ppgc = await ayumi.getProfilePicture(anu.jid)
} catch {
var ppgc = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
}
shortpc = await axios.get(`https://tinyurl.com/api-create.php?url=${ppimg}`)
shortgc = await axios.get(`https://tinyurl.com/api-create.php?url=${ppgc}`)

const wel = { key: { participant: `0@s.whatsapp.net`, ...{}}, message: { "orderGroup": { message: `‚ä≥ GRUPO : ${mdata.subject}`}}}
       
  if (anu.action == 'add') {
  	try {
			ppimg = await ayumi.getProfilePicture(`${num.split('@')[0]}@c.us`)
			} catch {
			ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
			}
			buffer = await getBuffer(ppimg)
            teks = `*Bem vindo ${pushname}*`
            gbutsan = [{buttonId:`#verify `,buttonText:{displayText:'Registro'},type:1}]
			mhan = await ayumi.prepareMessage(mdata.id, buff, MessageType.image, {thumbnail: buff})
const buttonMessages = { imageMessage: mhan.message.imageMessage,
contentText: `${teks}`,
footerText: ``, 
buttons: gbutsan,
headerType: 4 }
			ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, {thumbnail: fs.readFileSync('logos/hamsil.jpg'),caption: teks, contextInfo: {'mentionedJid': [num]}})
ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, {thumbnail: fs.readFileSync('logos/hentai.jpg'),caption: teks, contextInfo: {'mentionedJid': [num]}})
         } else if (anu.action == 'remove') {
			try {
			ppimg = await ayumi.getProfilePicture(`${num.split('@')[0]}@c.us`)
			} catch {
			ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
			}
			let buff = await getBuffer(ppimg)
			keluar =`*Saiu e n√£o pagou a cocaüòñ*`
			gbutsan = [{buttonId: `#menu`,buttonText:{displayText: 'Menu'},type:1}]
			mhan = await ayumi.prepareMessage(mdata.id, buff, MessageType.image, {thumbnail: buff})
const buttonMessages = { imageMessage: mhan.message.imageMessage,
contentText: `${keluar}`,
footerText: `- 1 macaco kkkk`,
buttons: gbutsan,
headerType: 4 }
			ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, { thumbnail: fs.readFileSync('./media/hentai.jpg'), "contextInfo": { mentionedJid: [num]}, caption: 'Tes'})
}
} catch (e) {
console.log('Erro : %s', color(e, 'red'))
}})

ayumi.on('group-participants-update', async (anu) => { 
if (!vacilo.includes(anu.jid)) return
try {
const mdata = await ayumi.groupMetadata(anu.jid)
num = anu.participants[0]
console.log(anu)
if (anu.action == 'promote') {
k = `[ PROMO√á√ÉO DETECTADA]\n@${num.split("@")[0]} foi promovido a adm`
ayumi.sendMessage(mdata.id, k, MessageType.text)
console.log(color('[PROMOVIDO]', 'red')),(color(`${num.split('@')[0]} \nfoi promovido a adm`, 'blue'))
} else if (anu.action == 'demote') {
num = anu.participants[0]
ayumi.sendMessage(mdata.id, `[REBAIXAMENTO DETECTADO]\n@${num.split("@")[0]} nao √© mais adm kkkkk`, MessageType.text)
console.log(color('[DEMOTE]', 'red')), (color(`${num.split('@')[0]} foi rebaixado a membro comum kkkk`, 'blue'))
if (anu.action == 'add') {
  	try {
			ppimg = await ayumi.getProfilePicture(`${num.split('@')[0]}@c.us`)
			} catch {
			ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
			}
			let buff = await getBuffer(ppimg)
            teks = `${nescessario.legendabv} `
            gbutsan = [{buttonId:`#verify `,buttonText:{displayText:'Registro'},type:1}]
			mhan = await ayumi.prepareMessage(mdata.id, buff, MessageType.image, {thumbnail: buff})
const buttonMessages = { imageMessage: mhan.message.imageMessage,
contentText: `${teks}`,
footerText: ` üåà_BEM VINDO MENBRO NOVO_‚ú®`, 
buttons: gbutsan,
headerType: 4 }
			ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, {thumbnail: fs.readFileSync('logos/hamsil.jpg'),caption: teks, contextInfo: {'mentionedJid': [num]}})
ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, {thumbnail: fs.readFileSync('logos/hentai.jpg'),caption: teks, contextInfo: {'mentionedJid': [num]}})
         } else if (anu.action == 'remove') {
			try {
			ppimg = await ayumi.getProfilePicture(`${num.split('@')[0]}@c.us`)
			} catch {
			ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
			}
			let buff = await getBuffer(ppimg)
			keluar =`${nessesario.legendasaiu}`
			gbutsan = [{buttonId: `.menu`,buttonText:{displayText: 'Menu'},type:1}]
			mhan = await ayumi.prepareMessage(mdata.id, buff, MessageType.image, {thumbnail: buff})
const buttonMessages = { imageMessage: mhan.message.imageMessage,
contentText: `${keluar}`,
footerText: `- 1 macaco kkkk`,
buttons: gbutsan,
headerType: 4 }
			ayumi.sendMessage(mdata.id, buttonMessages, MessageType.buttonsMessage, { thumbnail: fs.readFileSync('./media/logo2.pg'), "contextInfo": { mentionedJid: [num]}, caption: 'Tes'})
}}}catch (e) { console.log('Erro : %s', color(e, 'red'))}})
//==============(FIM-BEM-VINDO‚ù¨ üèì ‚ù≠\\
    

//=============(BATERIA)==============\\

ayumi.on('CB:action,,battery', json => {
const batteryLevelStr = json[2][0][1].value
const batterylevel = parseInt (batteryLevelStr)
battre = batterylevel 
if (json[2][0][1].live == 'true') charging = true
if (json[2][0][1].live == 'false') charging = false
console.log(json[2][0][1])
console.log(color('Carga da bateria: ' + batterylevel+'%', "pink"))
})
//==================================\\  



//==========(CHAT-UPDATE)===========\\

ayumi.on('chat-update', async (info) => {
try {
if (!info.hasNewMessage) return
info = info.messages.all()[0]
if (!info.message) return
info.message = (Object.keys(info.message)[0] === 'ephemeralMessage') ? info.message.ephemeralMessage.message : info.message
if (!info.message) return
m = simple.smsg(ayumi, info)

global.prefix
global.blocked

const content = JSON.stringify(info.message)
const speed = require('performance-now');
const from = info.key.remoteJid
const type = Object.keys(info.message)[0]
const { text, extendedText, contact, contacsArray, location, liveLocation, image, video, sticker, document, audio, product } = MessageType


const date = moment.tz('America/Sao_Paulo').format('DD/MM/YY')

const hr = moment.tz('America/Sao_Paulo').format('HH:mm:ss')

const jam = moment.tz('America/Sao_Paulo').format('HH:mm')

const time = moment.tz('America/Sao_Paulo').format('DD/MM HH:mm:ss')


//==============(BODY)================\\
body = (type === 'conversation' && info.message.conversation.startsWith(prefix)) ? info.message.conversation : (type == 'imageMessage') && info.message[type].caption.startsWith(prefix) ? info.message[type].caption : (type == 'videoMessage') && info.message[type].caption.startsWith(prefix) ? info.message[type].caption : (type == 'extendedTextMessage') && info.message[type].text.startsWith(prefix) ? info.message[type].text : (type == 'listResponseMessage') && info.message[type].singleSelectReply.selectedRowId ? info.message[type].singleSelectReply.selectedRowId : (type == 'buttonsResponseMessage') && info.message[type].selectedButtonId ? info.message[type].selectedButtonId : info.message[type].selectedButtonId && ((info.message[type].fileSha256.toString('base64')) !== null && (info.message[type].fileSha256.toString('base64')) !== undefined) ? (info.message[type].fileSha256.toString('base64')) : ""

//================(BADY)================\\

bady = (type === 'conversation') ? info.message.conversation : (type == 'imageMessage') ? info.message.imageMessage.caption : (type == 'videoMessage') ? info.message.videoMessage.caption : (type == 'extendedTextMessage') ? info.message.extendedTextMessage.text : (info.message.listResponseMessage && info.message.listResponseMessage.singleSelectReply.selectedRowId) ? info.message.listResponseMessage.singleSelectReply.selectedRowId: ''

//=======================================\\



//===============(BUDY)==================\\

budy = (type === 'conversation') ? info.message.conversation : (type === 'extendedTextMessage') ? info.message.extendedTextMessage.text : ''

//======================================\\

button = (type == 'buttonsResponseMessage') ? info.message.buttonsResponseMessage.selectedDisplayText : ''
button = (type == 'buttonsResponseMessage') ? info.message.buttonsResponseMessage.selectedButtonId : ''
listMessage = (type == 'listResponseMessage') ? info.message.listResponseMessage.title : ''

const listmsg = (from, title, desc, list) => { 
po = ayumi.prepareMessageFromContent(from, {"listMessage": {"title": title,"description": desc,"buttonText": "Escolha aqui","footerText": "Selecione","listType": 1,"sections": list}}, {})
return ayumi.relayWAMessage(po, {waitForAck: true})
}
listmes = (type == 'listResponseMessage') ? info.message.listResponseMessage.title : ''

var pes = (type === 'conversation' && info.message.conversation) ? info.message.conversation : (type == 'imageMessage') && info.message.imageMessage.caption ? info.message.imageMessage.caption : (type == 'videoMessage') && info.message.videoMessage.caption ? info.message.videoMessage.caption : (type == 'extendedTextMessage') && info.message.extendedTextMessage.text ? info.message.extendedTextMessage.text : ''


const messagesC = pes.slice(0).trim().split(/ +/).shift().toLowerCase()

const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()		

const arg = body.substring(body.indexOf(' ') + 1)

const args = body.trim().split(/ +/).slice(1)

const argss = body.split(/ +/g)
const testat = body
const ants = body
const isCmd = body.startsWith(prefix)
const isGroup = from.endsWith('@g.us')
const q = args.join(' ')
const botNumber = ayumi.user.jid
const sender = isGroup ? info.participant : info.key.remoteJid
let senderr = info.key.fromMe ? ayumi.user.jid : info.key.remoteJid.endsWith('@g.us') ? info.participant : info.key.remoteJid


pushname = ayumi.contacts[sender] != undefined ? ayumi.contacts[sender].vname || ayumi.contacts[sender].notify : undefined

const groupMetadata = isGroup ? await ayumi.groupMetadata(from) : ''

const groupName = isGroup ? groupMetadata.subject : ''

const groupMembers = isGroup ? groupMetadata.participants : ''

const groupDesc = isGroup ? groupMetadata.desc : ''

const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''

//=======================================\\

const numerodono = [`${setting.numerodono}@s.whatsapp.net`, `${nescessario.dono1}@s.whatsapp.net`, `${nescessario.dono2}@s.whatsapp.net`, `${nescessario.dono3}@s.whatsapp.net`, `${nescessario.dono4}@s.whatsapp.net`, `${nescessario.dono5}@s.whatsapp.net`, `${nescessario.dono6}@s.whatsapp.net`]

//============(SORTEIO-CONST)============\\

const { infosorteio } = require('./lib/js/infosorteio.js')

//===========(enviar.espere)=============\\

const { mensagens } = require('./lib/js/aleatoria.js');

const { sortear } = require('./lib/js/aleatoria.js');

const { imgbbb } = require('./lib/js/imgbb.js')

var enviarmen = mensagens[Math.floor(Math.random() * mensagens.length)] 

//========================================\\

enviar = {
espere: `‚ù¨ üç® ‚ù≠ Espera so um puquinho q eu ja estou enviando..`,
successo: 'Ô∏è‚ù¨ ‚úî ‚ù≠ Sucesso üñ§',
levelon: '‚ù¨ ‚úî ‚ù≠ *leveling* *ativado*',
leveloff: '‚ù¨ X ‚ù≠  *leveling* *desativado*',
levelnoton: '‚ù¨ X ‚ù≠ *leveling n√£o ativado*',
levelnol: '*error* 0 ¬∞-¬∞',
error: {
stick: '*falhou, tente novamente ^_^*',
Iv: 'Link invalido ‚òπÔ∏è'
},
msg: {
grupo: '‚ù¨ X ‚ù≠ Este comando s√≥ pode ser usado em grupos! ‚ù¨ X ‚ù≠',
premium: '‚ù¨ X ‚ù≠ Somente para usuarios premium*',
mod: `‚ù¨ X ‚ù≠ Esse comando so pode ser usado pelo ${setting.NickDono}*`,
banido: '‚ù¨ X ‚ù≠ Membro banido nao estou te ouvindo lalalala' ,
donosmt: '‚ù¨ X ‚ù≠Somente para o proprietario',
donosmt2: '‚ù¨ X ‚ù≠Somente para o proprietario',
adm: '‚ù¨ X ‚ù≠Somente para o Adm',
Badmin: '‚ù¨ X ‚ù≠Nao me deram admüòñ',
}
}

//‚ù¨ üèì ‚ù≠ADMS/DONO/ETC..CONST)========\\

const isOwner = numerodono.includes(sender)

const isUser = user.includes(sender)

const isPremium = premium.includes(sender)

const isBotGroupAdmins = groupAdmins.includes(botNumber) || false

const isGroupAdmins = groupAdmins.includes(sender) || false || info.key.fromMe

const issupre = supre.includes(sender)

//============(FUN√á√ïES)============\\

const isVacilo = isGroup ? vacilo.includes(from) : true

const isVote = isGroup ? voting.includes(from) : false

const isModobn =  isGroup ? modobn.includes(from) : true

const isNsfw =  isGroup ? nsfw.includes(from) : true

const isSimi = isGroup ? samih.includes(from) : false

const isBanned = ban.includes(sender)

//===========(ANTIS-PROTE√á√ïES)===========\\

const isAntifake = isGroup ? antifake.includes(from) : false

const isAntiLink = isGroup ? antilink.includes(from) : false

const isAntiFlood = isGroup ? antiflood.includes(from) : false	

const isAntiLinkHard = isGroup ? antilinkhard.includes(from) : false

const isAntiAudio = isGroup ? antiaudio.includes(from) : false	
	
const isAntiImg = isGroup ? antiimg.includes(from) : false

const Antidoc = isGroup ? antidoc.includes(from) : false

const Antiloc = isGroup ? antiloc.includes(from) : false

const isAntiVid = isGroup ? antivid.includes(from) : false	

const isAntiPv = (antipv.indexOf('Ativado') >= 0) ? true : false	

const isAnticall = (anticall.indexOf('Ativado') >= 0) ? true : false

const isPalavr√£o = isGroup ? palavr√£o.includes(from) : false	

//=======================================\\



//=========(CONSTS-FUN√á√ïES)============\\

const isWelkom = isGroup ? welkom.includes(from) : false

const img2 =  fs.readFileSync('./media/hamsil.jpg')

const isLevelingOn = isGroup ? _leveling.includes(from) : false

const isBanchat = isGroup ? bancht.includes(from) : false	

//=====================================\\


//==========(VERIFICADO)===============\\

const selo = {key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {})},message: { "extendedTextMessage": {"text": `${setting.NomeDoBot}`,"title": "hmm" }}}

//=====================================\\


const getGroup = async function(totalchat){
let grup = []
let a = []
let b = []
for (c of totalchat){
a.push(c.jid)
}
for (d of a){
if (d && d.includes('g.us')){
b.push(d)
}
}
for (e of b){
let ingfo = await ayumi.groupMetadata(e)
grup.push(ingfo)
}
return grup
}  
///Button Text

const sendButMessage = (id, text1, desc1, but = [], options = {}) => {
const buttonMessage = {
contentText: text1,
footerText: desc1,
buttons: but,
headerType: 1
}
ayumi.sendMessage(id, buttonMessage, MessageType.buttonsMessage, options)
}
///Button Image
const sendButImage = async(id, text1, desc1, gam1, but = [], options = {}) => {
kma = gam1
mhan = await ayumi.prepareMessage(from, kma, image)
const buttonMessages = {
imageMessage: mhan.message.imageMessage,
contentText: text1,
footerText: desc1,
buttons: but,
headerType: 4
}
ayumi.sendMessage(id, buttonMessages, MessageType.buttonsMessage, options)
}
///Button Video
const sendButVideo = async(id, text1, desc1, vid1, but = [], options = {}) => {
kma = vid1
mhan = await ayumi.prepareMessage(from, kma, video)
const buttonMessages = {
videoMessage: mhan.message.videoMessage,
contentText: text1,
footerText: desc1,
buttons: but,
headerType: 5
}
ayumi.sendMessage(id, buttonMessages, MessageType.buttonsMessage, options)
}
const mortandela = (teks) => {
const respostaBottuns = [{buttonId: `#camassutra`, buttonText: {displayText: `Ok ayumi`}, type: 1}]
const rpstBottuns = {contentText: `*‚ù¨ üç® ‚ù≠ Espera so um puquinho q eu ja estou enviando..*`, buttons: respostaBottuns, headerType: 1}
ayumi.sendMessage(from, rpstBottuns, MessageType.buttonsMessage, {quoted: info})
}
///Button Location
const sendButLocation = async (id, text1, desc1, gam1, but = [], options = {}) => {
kma = gam1
mhan = await ayumi.prepareMessage(from, kma, location)
const buttonMessages = {
locationMessage: mhan.message.locationMessage,
contentText: text1,
footerText: desc1,
buttons: but,
headerType: 6
}
ayumi.sendMessage(id, buttonMessages, MessageType.buttonsMessage, options)
}

const isUrl = (url) => {
if(linkfy.find(url)[0]) return true
return false
}	

const jadiUser = (userid, sender, age, time, serials) => {
            const obj = { id: userid, name: sender, age: age, time: time, serial: serials }
            user.push(obj)
            fs.writeFileSync('./lib/user.json', JSON.stringify(user))
        }
        const bikinSerial = (size) => {
            return crypto.randomBytes(size).toString('hex').slice(0, size)
        }
let contentt = fs.readFileSync(`./media/ayumi.jpg`)
const media = await ayumi.prepareMessage(from, contentt, MessageType.image, { thumbnail: null})
let qweriio = media.message["ephemeralMessage"] ? media.message.ephemeralMessage : media
const buttons1 = [
{buttonId: '#verify', buttonText: {displayText: 'Registro'}, type: 1},
]
const btn1 = {
contentText: `_...*ü¶äRegistre-se Antesü¶ä*..._`,
footerText: `Clique no Botao e espere O Bot Enviar Os Dados`,
buttons: buttons1,
headerType: 4,
imageMessage: qweriio.message.imageMessage
}
var hayuk0 = '[NOT VERIFIED]'
			if (isUser) {
			hayuk0 = '[‚àö VERIFIED]'
			}

const time2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')
if(time2 > "00:00:00"){
var tempo = 'Boa madrugada'
                                        } 
if(time2 > "05:30:00"){
var tempo = 'Bom dia'
                                        }
if(time2 > "12:00:00"){
var tempo = 'Boa tarde'
                                        }
if(time2 > "19:00:00"){
var tempo = 'Boa noite'
                                        }

const reply = (teks) => {

            ayumi.sendMessage(from, teks, text,  {contextInfo :{text: 'hi',

sendEphemeral: true,

"externalAdReply": {

                "title": `Ayumi bot`,

                "body": "",

                "previewType": "PHOTO",

                "thumbnailUrl": "",

                "thumbnail": img2,

                "sourceUrl": `https://youtube.com/channel/UC7frIuDpAIo9smTMU3pMZaw`

},mentionedJid:[sender]}, quoted : info})

        }


const sendImage = (ytb) => {
ayumi.sendMessage(from, ytb, image, {quoted:info})
}


const sendMess = (hehe, ytb) => {
ayumi.sendMessage(hehe, ytb, text)
}


const mentions = (ytb, memberr, id) => {
(id == null || id == undefined || id == false) ? ayumi.sendMessage(from, ytb.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : ayumi.sendMessage(from, ytb.trim(), extendedText, {quoted: info, contextInfo: {"mentionedJid": memberr}})
}
	
const sendMediaURL = async(to, url, text="", mids=[]) =>{
if(mids.length > 0){
text = normalizeMention(to, text, mids)
}
const fn = Date.now() / 10000;
const filename = fn.toString()
let mime = ""
var download = function (uri, filename, callback) {
request.head(uri, function (err, res, body) {
mime = res.headers['content-type']
request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
});
};
download(url, filename, async function () {
console.log('done');
let media = fs.readFileSync(filename)
let type = mime.split("/")[0]+"Message"
if(mime === "image/gif"){
type = MessageType.video
mime = Mimetype.gif
}
if(mime.split("/")[0] === "audio"){
mime = Mimetype.mp4Audio
}
ayumi.sendMessage(to, media, type, { quoted: info, mimetype: mime, caption: text,contextInfo: {"mentionedJid": mids}})
fs.unlinkSync(filename)
});
}   

/********** ANTI NOME MODIFICADO **********/
function isDoubleByte(str) {
for (let i = 0, n = str.length; i < n; i++) {
if (str.charCodeAt(i) > 255) {
return true;
}
}
return false;
}

const sendFileFromUrl = async(link, type, options) => {
hasil = await getBuffer(link)
await ayumi.sendMessage(from, hasil, type, options).catch(e => {
fetch(link).then((hasil) => {
ayumi.sendMessage(from, hasil, type, options).catch(e => {
ayumi.sendMessage(from, { url : link }, type, options).catch(e => {
reply('_[ ! ] Erro ao baixar e enviar m√≠dia_')
console.log(e)
})
})
})
})
}	
		    

//==============(FUN√á√ÉO-AFK)=============\\
if (!info.key.remoteJid.endsWith('@g.us') && offline){
if (!info.key.fromMe){
if (isAfk(info.key.remoteJid)) return
addafk(info.key.remoteJid)
heheh = ms(Date.now() - waktuafk) 
ayumi.sendMessage(info.key.remoteJid,`*Com licen√ßa @${setting.numerodono} Atualmente offline!*\n\n*Raz√£o :* ${alasanafk}\n*Desde as :* ${heheh.hours} Hora, ${heheh.minutes} Minuto, ${heheh.seconds} Segundos atr√°s\n`, MessageType.text,{quoted: info, contextInfo:{ mentionedJid: [`${setting.numerodono}@s.whatsapp.net`]}})
 }
 } 
 
 if (info.key.remoteJid.endsWith('@g.us') && offline) {
 if (!info.key.fromMe){
 if (info.message.extendedTextMessage != undefined){
 if (info.message.extendedTextMessage.contextInfo != undefined){
 if (info.message.extendedTextMessage.contextInfo.mentionedJid != undefined){
 for (let ment of info.message.extendedTextMessage.contextInfo.mentionedJid) {
 if (ment === `${setting.numerodono}@s.whatsapp.net`){
 if (isAfk(info.key.remoteJid)) return
 addafk(info.key.remoteJid)
 heheh = ms(Date.now() - waktuafk)
 ayumi.sendMessage(info.key.remoteJid,`*Com licen√ßa @${setting.numerodono} Atualmente offline!*\n\n*Raz√£o :* ${alasanafk}\n*Desde as :* ${heheh.hours} Horas, ${heheh.minutes} Minutos, ${heheh.seconds} Segundos atr√°s\n`, MessageType.text,{quoted: info,contextInfo:{ mentionedJid: [`${setting.numerodono}@s.whatsapp.net`]}})
 }
 }
 }
 }
 }
 }
 }
 
//========================================\\
 
 

let userAgent = () => {

os = [

'Macintosh; Intel Mac OS X 10_15_7',

'Macintosh; Intel Mac OS X 10_15_5',

'Macintosh; Intel Mac OS X 10_11_6',

'Macintosh; Intel Mac OS X 10_6_6',

'Macintosh; Intel Mac OS X 10_9_5',

'Macintosh; Intel Mac OS X 10_10_5',

'Macintosh; Intel Mac OS X 10_7_5',

'Macintosh; Intel Mac OS X 10_11_3',

'Macintosh; Intel Mac OS X 10_10_3',

'Macintosh; Intel Mac OS X 10_6_',

'Macintosh; Intel Mac OS X 10_10_2',

'Macintosh; Intel Mac OS X 10_10_3',

'Macintosh; Intel Mac OS X 10_11_5',

'Windows NT 10.0; Win64; x64',

'Windows NT 10.0; WOW64',

'Windows NT 10.0',

];

return `Mozilla/5.0 (${os[Math.floor(Math.random() * os.length)]}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${Math.floor(

Math.random() * 3,

) + 7}.0.${Math.floor(Math.random() * 190) + 4100}.${Math.floor(Math.random() * 50) + 140} Safari/537.36`;

}


function ttaudio(url) {
return new Promise(async (resolve, reject) => {
getDataFirst = await axios.get('https://www.tiktok.com')
newCookie = getDataFirst.headers['set-cookie'].join('')
axios.get(url, {
headers: {
'user-agent': userAgent(),
'Cookie': newCookie
}
})
.then(({ data }) => {
$ = cheerio.load(data)
ttdata = JSON.parse($('script#__NEXT_DATA__').get()[0].children[0].data)
meta = ttdata.props.pageProps.itemInfo.itemStruct
resolve({
status: true,
message: success,
result: {
description: meta.desc,
duration: meta.video.duration,
resolution: meta.video.width + 'x' + meta.video.height,
jpeg_thumb: meta.video.originCover,
gif_thumb: meta.video.dynamicCover,
audio: meta.music.playUrl,
}
})
})
.catch((response) => {
reject({ status: false, message: response })
})
})
}

//BAN CHATS/GRUPOS
if (isBanchat && !isGroupAdmins){
if (!isGroupAdmins && !isOwner && !issupre && !info.key.fromMe) return
if (budy.toLowerCase().startsWith('unbangp')){
if (isCmd && !isBanchat && !isGroupAdmins) return reply(`Este grupo esta banido, ou seja n√£o estou ouvindo ningu√©m`)
let lfd = bancht.indexOf(from)
bancht.splice(lfd, 1)
fs.writeFileSync('./lib/grupos/banchat.json', JSON.stringify(bancht))
reply(`Grupo desbanido...`)
}
}

//=======FUNCIONALIDADE PATENTE=========\\
const nivelAtual = getLevelingLevel(sender)
var patt = 'Bronze Iü•â'
if (nivelAtual === 1) {patt = 'Bronze  Iü•â' } else if (nivelAtual === 2) {patt = 'Bronze IIü•â'} else if (nivelAtual === 3) {patt = 'Bronze  IIIü•â'} else if (nivelAtual === 4) {patt = 'Bronze  IVü•â'} else if (nivelAtual === 5) {patt = 'Bronze  Vü•â'} else if (nivelAtual === 6) {patt = 'Prata Iü•à'} else if (nivelAtual === 7) {patt = 'Prata IIü•à'} else if (nivelAtual === 8) {patt = 'Prata IIIü•à'} else if (nivelAtual === 9) {patt = 'Prata IVü•à'} else if (nivelAtual === 10) {patt = 'Prata Vü•à'} else if (nivelAtual === 11) {patt = 'Ouro Iü•á'} else if (nivelAtual === 12) {patt = 'Ouro IIü•á'} else if (nivelAtual === 13) {patt = 'Ouro IIIü•á'} else if (nivelAtual === 14) {patt = 'Ouro IVü•á'} else if (nivelAtual === 15) {patt = 'Ouro Vü•á'} else if (nivelAtual === 16) {patt = 'Campe√£o IüèÜ'} else if (nivelAtual === 17) {patt = 'Campe√£o IIüèÜ'} else if (nivelAtual === 18) {patt = 'Campe√£o IIIüèÜ'} else if (nivelAtual === 19) {patt = 'Campe√£o IVüèÜ'} else if (nivelAtual === 20) {patt = 'Campe√£o VüèÜ'} else if (nivelAtual === 21) {patt = 'Diamante I üíé'} else if (nivelAtual === 22) {patt = 'Diamante II üíé'} else if (nivelAtual === 23) {patt = 'Diamante III üíé'} else if (nivelAtual === 24) {patt = 'Diamante IV üíé'} else if (nivelAtual === 25) {patt = 'Diamante V üíé'} else if (nivelAtual === 26) {patt = 'Mestre I üêÇ'} else if (nivelAtual === 27) {patt = 'Mestre II üêÇ'} else if (nivelAtual === 28) {patt = 'Mestre III üêÇ'} else if (nivelAtual === 29) {patt = 'Mestre IV üêÇ'} else if (nivelAtual === 30) {patt = 'Mestre V üêÇ'} else if (nivelAtual === 31) {patt = 'M√≠tico I üîÆ'} else if (nivelAtual === 32) {patt = 'M√≠tico II üîÆ'} else if (nivelAtual === 33) {patt = 'M√≠tico III üîÆ'} else if (nivelAtual === 34) {patt = 'M√≠tico IV üîÆ'} else if (nivelAtual === 35) {patt = 'M√≠tico V üîÆ'} else if (nivelAtual === 36) {patt = 'God Iüï¥'} else if (nivelAtual === 37) {patt = 'God IIüï¥'} else if (nivelAtual === 38) {patt = 'God IIIüï¥'} else if (nivelAtual === 39) {patt = 'God IVüï¥'} else if (nivelAtual === 40) {patt = 'God Vüï¥'} else if (nivelAtual > 41) {patt = 'üõêGrande Mestreüõê'}
		    
//========================================\\

//==========(FUN√á√ÉO DE LEVEL)=============\\
if (isGroup && isLevelingOn) {
const currentLevel = getLevelingLevel(sender)
const checkId = getLevelingId(sender)
try {
if (currentLevel === undefined && checkId === undefined) addLevelingId(sender)
const amountXp = Math.floor(Math.random() * 10) + 500
const requiredXp = 5000 * (Math.pow(2, currentLevel) - 1)
const getLevel = getLevelingLevel(sender)
addLevelingXp(sender, amountXp)
if (requiredXp <= getLevelingXp(sender)) {
addLevelingLevel(sender, 1)
try {
			ppimg = await ayumi.getProfilePicture(`${num.split('@')[0]}@c.us`)
			} catch {
			ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
			}
 let buff = await getBuffer(ppimg)
            teks = `Ô∏é
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚âΩ„Äå üåô ·¥ú·¥ò  ü·¥á·¥†·¥á ü üåô „Äç
‚îÉ‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑
‚îÉ‚îÇ‚û¢ üç® …¥…™·¥Ñ·¥ã : *${pushname}*
‚îÉ‚îÇ‚û¢ üìà  ü·¥á·¥†·¥á ü : ${getLevelingLevel(sender)}
‚îÉ‚îÇ‚û¢ üîã x·¥ò : ${getLevelingXp(sender)}
‚îÉ‚îÇ‚û¢ üåå  Ä·¥Ä…¥·¥ã : ${patt}
‚îÉ‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑
‚ï∞‚îÅ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑*¬† `
            gbutsan = [{buttonId: `#level`,buttonText:{displayText: 'Level'},type:1}]
			mhan = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
const buttonMessages = { imageMessage: mhan.message.imageMessage,
contentText: `${teks}`,
footerText: `üá∫¬†üáµ¬†üá≥¬†üáÆ¬†üáª¬†üá™¬†üá±`, 
buttons: gbutsan,
headerType: 4 }
ayumi.sendMessage(from,  buttonMessages, MessageType.buttonsMessage, {quoted: selo})
}
} catch (err) {
console.error(err)
}
}
//=======================================\\

//=====(FUN√á√ÉO-CHECAR-LIMIT)====\\
const checkLimit = (sender) => {
let found = false
for (let lmt of _limit) {
if (lmt.id === sender) {
let limitCounts = limitawal - lmt.limit
if (limitCounts <= 0) return ayumi.sendMessage(from,`[üëæ] *LIMIT ESGOTADO*\n\n_Nota : para obter mais limit compre usando *${prefix}buylimit* ou suba de n√≠vel...`, text,{sendEphemeral: true, contextInfo: { forwardingScore: 50, isForwarded: true}, quoted: info})
ayumi.sendMessage(from, jrpl.limitcount(limitCounts), text, { quoted : info})
found = true
}
}
if (found === false) {
let obj = { id: sender, limit: 0 }
_limit.push(obj)
fs.writeFileSync('./lib/grupos/limit.json', JSON.stringify(_limit))
ayumi.sendMessage(from, jrpl.limitcount(limitCounts), text, { quoted : info})
}
} 
							
	//funtion limitado
const isLimit = (sender) =>{ 
if (issupre) {return false;}
let position = false
for (let i of _limit) {
if (i.id === sender) {
let limits = i.limit
if (limits >= limitawal ) {
position = true
ayumi.sendMessage(from, jrpl.limitend(pushname), text, {sendEphemeral: true, contextInfo: { forwardingScore: 50, isForwarded: true}, quoted: info})
return true
} else {
_limit
position = true
return false
}
}
}
if (position === false) {
const obj = { id: sender, limit: 0 }
_limit.push(obj)
fs.writeFileSync('./lib/grupos/limit.json',JSON.stringify(_limit))
return false
}
}

const sendStickerFromUrl = async(to, url) => {
var names = Date.now() / 10000;
var download = function (uri, filename, callback) {
request.head(uri, function (err, res, body) {
request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
});
};
download(url, './sticker' + names + '.png', async function () {
console.log('pronto');
let filess = './sticker' + names + '.png'
let asw = './sticker' + names + '.webp'
exec(`ffmpeg -i ${filess} -vf "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=60, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse" ${asw}`, (err) => {
let media = fs.readFileSync(asw)
ayumi.sendMessage(to, media, MessageType.sticker,{sendEphemeral: true, contextInfo: { forwardingScore: 50, isForwarded: true}, quoted: info})
fs.unlinkSync(filess)
fs.unlinkSync(asw)
});
});
}  

//===(SIMIH-INTELIG√äNCIA-ARTIFICIAL)===\\
const simih = async (text) => {
	try {
const sami = await fetch(`https://api.simsimi.net/v2/?text=${text}&lc=pt`, {method: 'GET'})
const res = await sami.json()
return res.success
} catch {
return 'Eu n√£o identifico emojis nem acentos, desculpe.'
}
}
//===================================\\

		//JOGO DO ANAGRAM
if(isGroup && fs.existsSync(`./lib/anagrama-${from}.json`)){
let dataAnagrama = JSON.parse(fs.readFileSync(`./lib/anagrama-${from}.json`))
if(budy.slice(0,4).toUpperCase() == dataAnagrama.original.slice(0,4).toUpperCase() && budy.toUpperCase() != dataAnagrama.original) return reply('est√° perto')
xp = Math.floor(Math.random() * 14) + 3000
if(budy.toUpperCase() == dataAnagrama.original) { ayumi.sendMessage(from, `parab√©ns ${pushname} ü•≥ voc√™ ganhou o jogo\nPalavra : ${dataAnagrama.original}\nIniciando o proximo jogo em 5 segundos...`, MessageType.text, {"mentionedJid": [sender]}), fs.unlinkSync(`./lib/anagrama-${from}.json`)		
addLevelingXp(sender, xp)
recompensa = `üéâüéâRECOMPENSAüéâüéâ\nVoc√™ ganhou ${xp} em *xp*`
reply(recompensa)
		setTimeout(async() => {
fs.writeFileSync(`./lib/anagrama-${from}.json`, `${JSON.stringify(palavrasANA[Math.floor(Math.random() * palavrasANA.length)])}`)
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/anagrama-${from}.json`))
ayumi.sendMessage(from, `
‚ï≠‚îÅ‚ùí ùóîùó°ùóîùóöùó•ùóîùó†ùóî ü¶ã
‚îÇ‚ó¶‚ûõùóóùó≤ùòÄùó∞ùòÇùóØùóøùóÆ ùóÆ ùóΩùóÆùóπùóÆùòÉùóøùóÆ
‚îÇ‚ó¶‚ûõùóîùó°ùóîùóöùó•ùóîùó†ùóî: ${dataAnagrama2.embaralhada}
‚îÇ‚ó¶‚ûõùóóùóúùóñùóî: ${dataAnagrama2.dica}
‚ï∞‚îÅ‚îÅ‚Ä¢‡≥ã‡≥ã‚Ä¢‚îÅ‚îÅ
`, MessageType.text) 
}, 5000)
}}

//========================================\\


let quizanime = [
{
original: 'AKAMARU',
foto: 'https://i.ibb.co/W0g7DLY/c4f771da7af1.jpg'
},
{
original: 'AKASUNA NO SASORI',
foto: 'https://i.ibb.co/vvdXpvs/5c4899522b1c.jpg'
},
{
original: 'AKATSUCHI',
foto: 'https://i.ibb.co/nnv3PbQ/a3b275339e77.jpg'
},
{
original: 'AKATSUKI',
foto: 'https://i.ibb.co/GHSYGmH/a821073ff5c9.jpg'
},
{
original: 'AMARU',
foto: 'https://i.ibb.co/rknTT8T/e5c7ba9fa14f.jpg'
},
{
original: 'AMATERASU',
foto: 'https://i.ibb.co/4sGNVfS/6ebeef8d76b6.jpg'
},
{
original: 'AMEGAKURE',
foto: 'https://i.ibb.co/Ytv3sg5/482181e4d2c9.jpg'
},
{
original: 'AMEYURI RINGO',
foto: 'https://i.ibb.co/N19pYCG/84d9f144e874.jpg'
},
{
original: 'ANBU',
foto: 'https://i.ibb.co/NTHgmDD/c8fa101a1ea8.jpg'
},
{
original: 'ANKO MITARASHI',
foto: 'https://i.ibb.co/y6vzDvN/b561164524ef.jpg'
},
{
original: 'AO',
foto: 'https://i.ibb.co/fd6mxTY/d2da80961c51.jpg'
},
{
original: 'AOBA YAMASHIRO',
foto: 'https://i.ibb.co/FhX81xB/511a7e6a4fc2.jpg'
},
{
original: 'AODA',
foto: 'https://i.ibb.co/2k7CvTS/6c84d64144d5.jpg'
},
{
original: 'ASHINA UZUMAKI',
foto: 'https://i.ibb.co/SB0N90V/ba19e69b2417.jpg'
},
{
original: 'ASHURA OOTSUTSUKI',
foto: 'https://i.ibb.co/7CJPdxS/076d7794216b.jpg'
},
{
original: 'ASUMA SARUTOBI',
foto: 'https://i.ibb.co/swTPQf6/84f527c23359.jpg'
},
{
original: 'ATSUI',
foto: 'https://i.ibb.co/xfHLhjQ/071354edc113.jpg'
},
{
original: 'EY',
foto: 'https://i.ibb.co/q7r2hF2/a277af679a63.jpg'
},
{
original: 'AYAME',
foto: 'https://i.ibb.co/xhvZJCm/952861774735.jpg'
},
{
original: 'BAIKA NO JUTSU',
foto: 'https://i.ibb.co/JnRY4gR/5a9002e17d75.jpg'
},
{
original: 'DOTON',
foto: 'https://i.ibb.co/yY9JJwm/511ca9e70ade.jpg'
},
{
original: 'HYOUTON',
foto: 'https://i.ibb.co/zSWDyyH/94c614c09001.jpg'
},
{
original: 'RAITON',
foto: 'https://i.ibb.co/1fjJZ7Q/aec79d1f3ef4.jpg'
},
{
original: 'MOKUTON',
foto: 'https://i.ibb.co/RzTr9gF/dfa7219565bf.jpg'
},
{
original: 'FUUTON',
foto: 'https://i.ibb.co/sy7dVj9/56e5257dea70.jpg'
},
{
original: 'SUITON',
foto: 'https://i.ibb.co/tMvPw5j/5bfbbaa4e2eb.jpg'
},
{
original: 'KATON',
foto: 'https://i.ibb.co/1z3S3MS/607165f8976c.jpg'
}
]
		//JOGO QUIZ
if(isGroup && fs.existsSync(`./lib/quizanime-${from}.json`)){
let dataAnagrama = JSON.parse(fs.readFileSync(`./lib/quizanime-${from}.json`))
if(budy.slice(0,4).toUpperCase() == dataAnagrama.original.slice(0,4).toUpperCase() && budy.toUpperCase() != dataAnagrama.original) return reply('est√° perto')
if(budy.toUpperCase() == dataAnagrama.original) { 
ayumi.sendMessage(from, `Parab√©ns ${pushname} voc√™ acertou\n${dataAnagrama.original}\nProximo em 5 segundos...`, MessageType.text, {"mentionedJid": [sender]}), fs.unlinkSync(`./lib/quizanime-${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./lib/quizanime-${from}.json`, `${JSON.stringify(quizanime[Math.floor(Math.random() * quizanime.length)])}`)
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/quizanime-${from}.json`))
imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
}, 5000)
}}


let quizanimais = [
{
original: 'PORQUINHO DA INDIA',
foto: 'https://i.ibb.co/Fqwr0W0/cb2bb96f29e3.jpg'
},
{
original: 'HAMSTER',
foto: 'https://i.ibb.co/Qb3npqg/c43fae235c0a.jpg'
},
{
original: 'ROTTWEILER',
foto: 'https://telegra.ph/file/a10ad7df6ab6a2312a1f9.jpg'
},
{
original: 'FLOPPA',
foto: 'https://telegra.ph/file/7633abcd83b8a587f418d.jpg'
},
{
original: 'GUAXINIM',
foto: 'https://telegra.ph/file/3800c7048d04a1c3dbc4e.jpg'
},
{
original: 'ZEBRA',
foto: 'https://telegra.ph/file/a08e224344e34aa916972.jpg'
},
{
original: 'CARNEIRO',
foto: 'https://telegra.ph/file/096342c8c7815ba9d83be.jpg'
},
{
original: 'BODE',
foto: 'https://telegra.ph/file/ff574a82178089f453444.jpg'
},
{
original: 'MAMUTE',
foto: 'https://telegra.ph/file/00e445dde6c036a0c0df5.jpg'
},
{
original: 'ALPACA',
foto: 'https://telegra.ph/file/a201b23b179392f1cdd7f.jpg'
},
{
original: 'PORCO ESPINHO',
foto: 'https://telegra.ph/file/7b180efc77c8ab6e9a24a.jpg'
},
{
original: 'QUOKKA',
foto: 'https://telegra.ph/file/3042e66a22c6d0fb6e0cd.jpg'
},
{
original: 'PANDA VERMELHO',
foto: 'https://telegra.ph/file/a6517debde47b846073cc.jpg'
},
{
original: 'PEIXE GOTA',
foto: 'https://telegra.ph/file/e8892204b373c147bf489.jpg'
},
{
original: 'PEIXE MANDARIM',
foto: 'https://telegra.ph/file/e8892204b373c147bf489.jpg'
},
{
original: 'DRAG√ÉO DE KOMODO',
foto: 'https://telegra.ph/file/d4c36b449f4c781533f3c.jpg'
},
{
original: 'GUEPARDO',
foto: 'https://telegra.ph/file/0016017b9d28a3b6d027a.jpg'
},
{
original: 'FUR√ÉO',
foto: 'https://telegra.ph/file/e352b4831db11c20a3c62.jpg'
},
{
original: 'LEOPARDO',
foto: 'https://telegra.ph/file/71f5f532ced0fddc08f5b.jpg'
},
{
original: 'LEBRE',
foto: 'https://telegra.ph/file/89f9a46ce660261279477.jpg'
},
{
original: 'MARRECO',
foto: 'https://telegra.ph/file/aa41bde6c4c350ec9d0d4.jpg'
},
{
original: 'GANSO',
foto: 'https://telegra.ph/file/9ab69884414feefc9c109.jpg'
},
{
original: 'CAVALO MARINHO',
foto: 'https://telegra.ph/file/e4cee57d5b731dfffa5d8.jpg'
},
{
original: 'CROCODILO',
foto: 'https://telegra.ph/file/b4483f9a7077fd29a137f.jpg'
},
{
original: 'ORNITORRINCO',
foto: 'https://telegra.ph/file/8ffdd62da1834433112be.jpg'
},
{
original: 'HUSKY SIBERIANO',
foto: 'https://telegra.ph/file/07b98023259637951ba8f.jpg'
},
{
original: 'CAPIVARA',
foto: 'https://telegra.ph/file/54f20cbd80737fe45a284.jpg'
}
]
		//JOGO QUIZ
if(isGroup && fs.existsSync(`./lib/quizanim-${from}.json`)){
let dataAnagramaa = JSON.parse(fs.readFileSync(`./lib/quizanim-${from}.json`))
if(budy.slice(0,4).toUpperCase() == dataAnagramaa.original.slice(0,4).toUpperCase() && budy.toUpperCase() != dataAnagramaa.original) return reply('est√° perto')
if(budy.toUpperCase() == dataAnagramaa.original) { 
ayumi.sendMessage(from, `Parab√©ns ${pushname} voc√™ acertou\n${dataAnagramaa.original}\nProximo em 5 segundos...`, MessageType.text, {"mentionedJid": [sender]}), fs.unlinkSync(`./lib/quizanim-${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./lib/quizanim-${from}.json`, `${JSON.stringify(quizanimais[Math.floor(Math.random() * quizanimais.length)])}`)
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/quizanim-${from}.json`))
imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
}, 5000)
}}



//=========(isQuoted/consts)=============\\
const isImage = type == 'imageMessage'
const isVideo = type == 'videoMessage'
const isAudio = type == 'audioMessage'
const isSticker = type == 'stickerMessage'
const isContact = type == 'contactMessage'
const isLocation = type == 'locationMessage'
const isProduct = type == 'productMessage'
const isMedia = (type === 'imageMessage' || type === 'videoMessage' || type === 'audioMessage')
typeMessage = body.substr(0, 50).replace(/\n/g, '')
if (isImage) typeMessage = "Image"
else if (isVideo) typeMessage = "Video"
else if (isAudio) typeMessage = "Audio"
else if (isSticker) typeMessage = "Sticker"
else if (isContact) typeMessage = "Contact"
else if (isLocation) typeMessage = "Location"
else if (isProduct) typeMessage = "Product"

const isQuotedMsg = type === 'extendedTextMessage' && content.includes('textMessage')

const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')

const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')

const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')

const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')

const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')

const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')

const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')

const isQuotedProduct = type === 'extendedTextMessage' && content.includes('productMessage')
             
const downloadM = async(save) => {
encmediaa = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: info
encmediaa = isQuotedSticker ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: info
encmediaa = isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: info
encmediaa = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: info
encmediaa = JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
if (save) return await ayumi.downloadAndSaveMediaMessage(encmediaa)
return await ayumi.downloadMediaMessage(encmediaa)
}

///////////ANTI-SPAM BY ITALU/////////
if (isCmd && isFiltered(sender) && !isGroup) {
console.log(color('~> [SPAM]', 'red'), color(moment.tz('America/Sao_Paulo').format('HH:mm:ss'), 'yellow'), color(`${command}`), 'DE:', color(pushname))
const ff = {
text : `*„Äå ‚ùó „ÄçFlood detectado, espere 5 segundos*`,
contextInfo: {mentionedJid: [sender]}}
return reply(ff)
}
if (isCmd && isFiltered(sender) && isGroup) {
console.log(color('~> [SPAM]', 'red'), color(moment.tz('America/Sao_Paulo').format('HH:mm:ss'), 'yellow'), color(`${command}`), 'DE:', color(pushname))
const ff1 = {
text : `*„Äå ‚ùó „ÄçFlood detectado, espere 5 segundos*`,
contextInfo: {mentionedJid: [sender]}}
return reply(ff1)
}

//////BLOCK CMD///////
//(CREDITOS AO KAUAN GAY)\\
if(isGroup){
const checar = getComandos(from)
if(checar === undefined) addComandosId(from)
}
if(isGroup && isCmd && getComandoBlock(from).includes(command))return reply('comando blockeado')

////FIMMMMMMMMM/////,

if (!isGroup && isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mCOMANDO\x1b[1;37m]', time, color(command), 'do ', color(sender.split('@')[0]))

if (isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mCOMANDO\x1b[1;37m]', time, color(command), 'do ', color(sender.split('@')[0]), 'no gp: ', color(groupName))

//======(JOGO-DA-VELHA)=======(Fun√ß√£o)===\\

//////////_FUN√á√ïES DO JOGO DA VELHA_//////
const cmde = budy.toLowerCase().split(" ")[0] || "";
let arrNum = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
if (fs.existsSync(`./lib/tictactoe/db/${from}.json`)) {
const boardnow = setGame(`${from}`);
if (budy == "Cex") return reply("why");
if (
budy.toLowerCase() == "s" ||
budy.toLowerCase() == "sim" ||
budy.toLowerCase() == "ok"
) {
if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
if (boardnow.status)
return reply(`O jogo j√° come√ßou antes!`);
const matrix = boardnow._matrix;
boardnow.status = true;
fs.writeFileSync(`./lib/tictactoe/db/${from}.json`,
JSON.stringify(boardnow, null, 2)
);
const chatAccept = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
                    
‚ùå : @${boardnow.X}
‚≠ï : @${boardnow.O}
               
Sua vez... : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
ayumi.sendMessage(from, chatAccept, MessageType.text, {quoted: info,
contextInfo: {
mentionedJid: [
boardnow.X + "@s.whatsapp.net",
boardnow.O + "@s.whatsapp.net",
],
},
});
}
} else if (
budy.toLowerCase() == "n" ||
budy.toLowerCase() == "n√£o" ||
budy.toLowerCase() == "no"
) {
if (boardnow.O == sender.replace("@s.whatsapp.net", "")) {
if (boardnow.status)
return reply(`O jogo j√° come√ßou!`);
fs.unlinkSync(`./lib/tictactoe/db/${from}.json`);
 ayumi.sendMessage(from,
 `@${boardnow.X} *_Infelizmente seu oponente n√£o aceitou o desafio ‚ùåüòï_*`,
 MessageType.text, {quoted: info,
 contextInfo: {
 mentionedJid: [boardnow.X + "@s.whatsapp.net"],
},
}
);
}
}
}

if (arrNum.includes(cmde)) {
const boardnow = setGame(`${from}`);
if (!boardnow.status) return reply(`Parece que seu oponente n√£o aceitou o desafio ainda...`)
if (
(boardnow.turn == "X" ? boardnow.X : boardnow.O) !=
     
sender.replace("@s.whatsapp.net", "")
)
return;
const moving = validmove(Number(budy), `${from}`);
const matrix = moving._matrix;
if (moving.isWin) {
if (moving.winner == "SERI") {
const chatEqual = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
Jogo termina empatado üòê
`;
reply(chatEqual);
fs.unlinkSync(`./lib/tictactoe/db/${from}.json`);
return;
}
const abt = Math.ceil(Math.random() + 4000)
const winnerJID = moving.winner == "O" ? moving.O : moving.X;
const looseJID = moving.winner == "O" ? moving.X : moving.O;
const limWin = Math.floor(Math.random() * 1) + 10;
const limLoose = Math.floor(Math.random() * 1) + 5;
const chatWon = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
Vencido por @${winnerJID} üòéüëë
`;
addLevelingXp(winnerJID + "@s.whatsapp.net", abt)

ayumi.sendMessage(from, chatWon, MessageType.text, {quoted: info,
contextInfo: {
mentionedJid: [
moving.winner == "O" ?
moving.O + "@s.whatsapp.net" :
moving.X + "@s.whatsapp.net",
],
},
});
setTimeout( () => {
if (fs.existsSync("./lib/tictactoe/db/" + from + ".json")) {
 fs.unlinkSync("./lib/tictactoe/db/" + from + ".json");
 reply(`*üïπÔ∏èJOGO DA VELHA RESETADO...üïπÔ∏è*`);
 } else {
console.log(color(time, "red"), color("[ ESPIRADO ]", "magenta"), color('Jogo da velha espirado', "red"));
 }
}, 2000000) //20 minutos
reply(`_*ü•≥Parab√©ns @${winnerJID} Voc√™ ganhou "${abt}" em xp por ter ganhado o jogo da velhaüéâ...*_`)      
fs.unlinkSync(`./lib/tictactoe/db/${from}.json`);
} else {
const chatMove = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
‚ùå : @${moving.X}
‚≠ï : @${moving.O}

Sua vez : @${moving.turn == "X" ? moving.X : moving.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
ayumi.sendMessage(from, chatMove, MessageType.text, {quoted: info,
contextInfo: {
mentionedJid: [
moving.X + "@s.whatsapp.net",
moving.O + "@s.whatsapp.net",
],
},
});
}
} 



//=================================\\


if(isUrl(bady) && isAntiLinkHard && isGroupAdmins && isBotGroupAdmins) {
const linkAS = await ayumi.groupInviteCode(`${from}`)
if (budy.match(linkAS)) return reply('Link do Grupo, n√£o irei remover..')  
reply('*Link detectado, por√©m usu√°rio √© admin*')
}
if(isUrl(bady) && isAntiLinkHard && !isGroupAdmins && isBotGroupAdmins) {
reply('*Link detectado, punindo usu√°rio...*')
kic = `${sender.split("@")[0]}@s.whatsapp.net`
ayumi.groupRemove(from, [kic])
}

//========(CONTADOR-DE-MENSAGENS)========\\

const groupIdscount = []
const numbersIds = []
for(let obj of countMessage) {
groupIdscount.push(obj.groupId)
}
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
for(let obj of countMessage[ind].numbers) {numbersIds.push(obj.jid)}
if(numbersIds.indexOf(sender) >=0) {
var indnum = numbersIds.indexOf(sender)
countMessage[ind].numbers[indnum].messages += 1
countMessage[ind].numbers[indnum].cmd_messages += isCmd ? 1 : 0
fs.writeFileSync('./lib/grupos/countmsg.json', JSON.stringify(countMessage, null, 2)+ '\n')
} else {
const messages = 1
const cmd_messages = isCmd ? 1 : 0
countMessage[ind].numbers.push({
jid: sender,
messages: messages,
cmd_messages: cmd_messages
})
fs.writeFileSync('./lib/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
}
else if(isGroup) {
countMessage.push({
groupId: from,
numbers: [{
jid: sender,
messages: 2,
cmd_messages: isCmd ? 1 : 0
}]
})
fs.writeFileSync('./lib/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
//======================================\\

//===============(AUTO-BAN)=============\\
const dbids = []
for(i=0;i<adeuscara.length;++i) {
dbids.push(adeuscara[i].groupId)
}
const isAdeusCara = (isGroup && dbids.indexOf(from) >= 0) ? true : false

//======================================\\


//============(EVAL-EXECU√á√ïES)===========\\

if (budy.startsWith('>')){
if(!isOwner && !issupre && !info.key.fromMe && !issupre) return
console.log('[', color('EVAL', 'silver'),']', color(moment(info.messageTimestamp * 1000).format('DD/MM HH:mm:ss'), 'yellow'), color(budy))
try {
return reply(JSON.stringify(eval(budy.slice(2)),null,'\t'))
} catch(e) {
reply(`${e}`)
}
}
if (budy.startsWith('=>')){
if (!isOwner && !issupre && !info.key.fromMe && !issupre) return reply('somente meu criador')
var konsol = budy.slice(3)
Return = (sul) => {
var sat = JSON.stringify(sul, null, 2)
bang = util.format(sat)
if (sat == undefined){
bang = util.format(sul)
}
return reply(bang)
}
try {
reply(util.format(eval(`;(async () => { ${konsol} })()`)))
console.log('\x1b[1;37m>', '[', '\x1b[1;32mEXEC\x1b[1;37m', ']', time, color(">", "green"), 'from', color(sender.split('@')[0]), 'args :', color(args.length))
} catch(e){
  reply(String(e))
}
}
if (body.startsWith('$')) {
if (!q && !isOwner && !issupre && !info.key.fromMe) return reply('somente meu criador')
exec(q, (err, stdout) => {
if(err) return reply(`${err}`)
if (stdout) {
reply(stdout)
}
})
}
//======================================\\


//======(ANTI-IMAGEM)========\\
if(isAntiImg && isBotGroupAdmins && type == MessageType.image) {
if (info.key.fromMe) return
if(isGroupAdmins) return ayumi.sendMessage(from,'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*', MessageType.text, {quoted: info})
await ayumi.sendMessage(from, '*mensagem proibida detectada, banindo...*',  MessageType.text, {quoted: info})
setTimeout(async function () {
ayumi.groupRemove(from, [sender])
}, 1000)
}

//======(ANTI-VIDEO)========\\
if(isAntiVid && isBotGroupAdmins && type == MessageType.video) {
if(isGroupAdmins) return ayumi.sendMessage(from,'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*', MessageType.text, {quoted: info})
await ayumi.sendMessage(from, '*mensagem proibida detectada, banindo...*', MessageType.text, {quoted: info})
setTimeout(async function () {
ayumi.groupRemove(from, [sender])
}, 1000)
}

//======(ANTI-AUDIO)=======\\
if(isAntiAudio && isBotGroupAdmins && type == MessageType.audio) {
if(isGroupAdmins) return ayumi.sendMessage(from,'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*', MessageType.text, {quoted: info})
await ayumi.sendMessage(from, '*mensagem proibida detectada, banindo...*', MessageType.text, {quoted: info})
setTimeout(async function () {
ayumi.groupRemove(from, [sender])
}, 1000)
}
//=======================================\\



//=========(ANTIPV-QUE-S√ì-FALA)==========\\

if(isCmd && !isGroup && !isOwner && !issupre && !info.key.fromMe && banChats === true) return reply(`Somente pode ser utilizado em Grupo`)
const atibot = info.isBaileys
if (atibot === true) return 


//======================================\\

//========(ANTI-PV-QUE-BLOQUEIA)======\\

if(isAntiPv && !isOwner && !issupre && !info.key.fromMe && isCmd && !isGroup){ 
	reply('*Antipv ativado, voc√™ ser√° bloqueado!*\n*Contate o criador*')
	ayumi.blockUser(sender, 'add') 
	return
}
//======================================\\



//==========(ANTI-LIGA√á√ÉO)===========\\
if(isAnticall){ 
ayumi.on('CB:action,,call', async json => {
const callerId = json[2][0][1].from;  
console.log('bloqueando o '+ callerId)
ayumi.blockUser(callerId, 'add') 
	return
});	
}
//====================================\\


//==SISTEMA DE VOTA√á√ÉO: CR√âDITOS: KAUAN==\\
if(isGroup) {
if (budy.toLowerCase() === 'voto'){
let vote = JSON.parse(fs.readFileSync(`./lib/${from}.json`))
let _votes = JSON.parse(fs.readFileSync(`./lib/vote/${from}.json`))  
let fil = vote.map(v => v.participant)
let id_vote = sender ? sender : '0@s.whatsapp.net'
if(fil.includes(id_vote)) {
return mentions('@'+sender.split('@')[0]+' n√£o √© possivel votar duas vezes', fil, true)
} else {
vote.push({
participant: id_vote,
voting: '‚úÖ'
})
fs.writeFileSync(`./lib/${from}.json`,JSON.stringify(vote))
let _p = []
let _vote = '*Vote* '+ '@'+ _votes[0].votes.split('@')[0] + `\n\n*para*: ${_votes[0].reason}\n*total Votos* : ${vote.length} Votos\n*Dura√ß√£o* : ${_votes[0].durasi} minutos\n\n` 
for(let i = 0; i < vote.length; i++) {
_vote +=  `@${vote[i].participant.split('@')[0]}\n*Vote* : ${vote[i].voting}\n\n`
_p.push(vote[i].participant)
        }  
_p.push(_votes[0].votes)
mentions(_vote,_p,true)   
}
} else if (budy.toLowerCase() === 'devoto'){
const vote = JSON.parse(fs.readFileSync(`./lib/${from}.json`))
let _votes = JSON.parse(fs.readFileSync(`./lib/vote/${from}.json`))  
let fil = vote.map(v => v.participant)
let id_vote = sender ? sender : '0@s.whatsapp.net'
if(fil.includes(id_vote)) {
return mentions('@'+sender.split('@')[0]+' n√£o √© possivel anular um voto', fil, true)
} else {
vote.push({
participant: id_vote,
voting: '‚ùå'
})
fs.writeFileSync(`./lib/${from}.json`,JSON.stringify(vote))
let _p = []
let _vote = '*Vote* '+ '@'+ _votes[0].votes.split('@')[0] + `\n\n*para*: ${_votes[0].reason}\n*total Votos* : ${vote.length} Vote\n*dura√ß√£o* : ${_votes[0].durasi} minutos\n\n` 
for(let i = 0; i < vote.length; i++) {
_vote +=  `@${vote[i].participant.split('@')[0]}\n*Vote* : ${vote[i].voting}\n\n`
_p.push(vote[i].participant)
}  
_p.push(_votes[0].votes)
mentions(_vote,_p,true)   
}
}
}	
//======================================\\



//_VISUALIZA AS MENSAGENS 
ayumi.chatRead(from)

//_CONTAGEM DE COMANDOS
if (isCmd) cmdadd()
            
if (isBanned) return
BannedExpired(ban)

if (isCmd && !isOwner && !issupre) addFilter(sender)


//INICIO DE COMANDOS SEM PREFIXO
switch(testat){
}

if(budy.includes("@null VS @null")) {
(async () => {
if (fs.existsSync("./lib/tictactoe/db/" + from + ".json")) {
fs.unlinkSync("./lib/tictactoe/db/" + from + ".json");
reply(`Jogo da velha resetado autom√°tico, neste grupo!!`);
}
})()
}

if (budy.includes("bot corno") || (budy.includes("Bot corno"))){
await ayumi.updatePresence(from, Presence.composing)
reply("Corno √© voc√™, seu animal")
}

if (budy.includes("adivinha meu celular") || (budy.includes("Adivinha meu celular") || (budy.includes("Adivinha Meu celular") || (budy.includes("Adivinha Meu Celular") || (budy.includes("bot qual meu celular")))) )){
adivinha = info.key.id.length > 21 ? 'Android ü§£' : info.key.id.substring(0, 2) == '3A' ? 'IOSüòÇüòÇüòÖ' : 'Zap zap web üòÇüòÇ‚òùüèºüòÖ';
await ayumi.sendMessage(from, adivinha, text, {quoted: info})
}

if(messagesC.includes('exec')) {
if(!isOwner && !issupre) return
try{
paramsQuoted = info.message.extendedTextMessage.contextInfo.quotedMessage.conversation || info.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;	
return eval(`${paramsQuoted}`)
console.log(`[EXEC]~> ${paramsQuoted}`)
}catch(e){
reply(e)
}
}

if (messagesC == "corno"){
ayumi.updatePresence(from, Presence.composing)
tujuh = fs.readFileSync('./audios/corno.mp3');
await ayumi.sendMessage(from, tujuh, MessageType.audio, {quoted: info, mimetype: 'audio/mp4', ptt:true})
}

//INICIO DE COMANDO DE PREFIXO
switch(command) {

case 'destrava':
if (!isPremium && !isGroupAdmins) return reply(enviar.msg.premium)
await ayumi.sendMessage(from, destrava(prefix), text, {quoted: info})
break 

case 'perfil':
case 'infome':
case 'eu':
try {
         var ppimg = await ayumi.getProfilePicture(`${sender.split('@')[0]}@c.us`)
            } catch {
               var ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
            }
var palavras = ["*Se voc√™ tra√ßar metas absurdamente altas e falhar, seu fracasso ser√° muito melhor que o sucesso de todos. ‚Äì James Cameron, Cineastra*", "*O sucesso normalmente vem para quem est√° ocupado demais para procurar por ele ‚Äì Henry David Thoreau, fil√≥sofo*", "*A vida √© melhor para aqueles que fazem o poss√≠vel para ter o melhor ‚Äì John Wooden, jogador e treinador de basquete*", "*Os empreendedores falham, em m√©dia, 3,8 vezes antes do sucesso final. O que separa os bem-sucedidos dos outros √© a persist√™ncia ‚Äì Lisa M. Amos, executiva*", "*Se voc√™ n√£o est√° disposto a arriscar, esteja disposto a uma vida comum ‚Äì Jim Rohn, empreendedor*", "*Escolha uma ideia. Fa√ßa dessa ideia a sua vida. Pense nela, sonhe com ela, viva pensando nela. Deixe c√©rebro, m√∫sculos, nervos, todas as partes do seu corpo serem preenchidas com essa ideia. Esse √© o caminho para o sucesso ‚Äì Swami Vivekananda, pensador hindu*", "*Para de perseguir o dinheiro e comece a perseguir o sucesso ‚Äì Tony Hsieh, empreendedor*", "*Todos os seus sonhos podem se tornar realidade se voc√™ tem coragem para persegui-los ‚Äì Walt Disney, desenhista e empreendedor", "*Ter sucesso √© falhar repetidamente, mas sem perder o entusiasmo ‚Äì Winston Churchill, pol√≠tico*", "*Sempre que voc√™ vir uma pessoa de sucesso, voc√™ sempre ver√° as gl√≥rias, nunca os sacrif√≠cios que os levaram at√© ali ‚Äì Vaibhav Shah, pensador*", "*Sucesso? Eu n√£o sei o que isso significa. Eu sou feliz. A defini√ß√£o de sucesso varia de pessoa para pessoa Para mim, sucesso √© paz anterior ‚Äì Denzel Washington, ator*", "*Oportunidades n√£o surgem. √â voc√™ que as cria ‚Äì Chris Grosser, fot√≥grafo*", "*N√£o tente ser uma pessoa de sucesso. Em vez disso, seja uma pessoa de valor ‚Äì Albert Einstein, f√≠sico*", "*N√£o √© o mais forte que sobrevive, nem o mais inteligente. Quem sobrevive √© o mais disposto √† mudan√ßa ‚Äì Charles Darwin, bi√≥logo*", "*A melhor vingan√ßa √© um sucesso estrondoso ‚Äì Frank Sinatra, cantor*", "*Eu n√£o falhei. S√≥ descobri 10 mil caminhos que n√£o eram o certo ‚Äì Thomas Edison, inventor*", "*Um homem de sucesso √© aquele que cria uma parede com os tijolos que jogaram nele ‚Äì David Brinkley, jornalista*", "*Ningu√©m pode fazer voc√™ se sentir inferior sem o seu consentimento ‚Äì Eleanor Roosevelt, primeira-dama dos EUA", "*O grande segredo de uma boa vida √© encontrar qual √© o seu destino. E realiz√°-lo ‚Äì Henry Ford, empreendedor*", "*Se voc√™ est√° atravessando um inferno, continue atravessando ‚Äì Churchill*", "*O que nos parece uma prova√ß√£o amarga pode ser uma b√™n√ß√£o disfar√ßada ‚Äì Oscar Wilde, escritor*", "A dist√¢ncia entre a insanidade e a genialidade √© medida pelo sucesso ‚Äì Bruce Feirstein, roteirista", "*N√£o tenha medo de desistir do bom para perseguir o √≥timo ‚Äì John D. Rockefeller, empreendedor*", "*N√£o tenha medo de desistir do bom para perseguir o √≥timo ‚Äì John D. Rockefeller, empreendedor*", "*A felicidade √© uma borboleta que, sempre que perseguida, parecer√° inating√≠vel; no entanto, se voc√™ for paciente, ela pode pousar no seu ombro ‚Äì Nathaniel Hawthorne, escritor*", "*Se voc√™ n√£o pode explicar algo de forma simples, ent√£o voc√™ n√£o entendeu muito bem o que tem a dizer ‚Äì Einstein*", "*H√° dois tipos de pessoa que v√£o te dizer que voc√™ n√£o pode fazer a diferen√ßa neste mundo: as que t√™m medo de tentar e as que t√™m medo de que voc√™ se d√™ bem ‚Äì Ray Goforth, executivo*", "*Comece de onde voc√™ est√°. Use o que voc√™ tiver. Fa√ßa o que voc√™ puder ‚Äì Arthur Ashe, tenista*","*As pessoas me perguntam qual √© o papel que mais gostei de interpretar. Eu sempre respondo: o pr√≥ximo ‚Äì Kevin Kline, ator*","*Descobri que, quanto mais eu trabalho, mais sorte eu pare√ßo ter ‚Äì Thomas Jefferson, pol√≠tico*","*O ponto de partida de qualquer conquista √© o desejo ‚Äì Napoleon Hill, assessor pol√≠tico*"]
var conselho = palavras[Math.floor(Math.random() * palavras.length)]
const nivelgado = ['1','2','3','4','5','6','7','8','9']
const nivelgado2 = ['1','2','3','4','5','6','7','8','9'] 
const nivelgador = nivelgado[Math.floor(Math.random() * (nivelgado.length))]
const nivelgado2r = nivelgado2[Math.floor(Math.random() * (nivelgado2.length))] 
const puta = ['1','2','3','4','5','6','7','8','9']
const puta2 = ['1','2','3','4','5','6','7','8','9'] 
const putar = puta[Math.floor(Math.random() * (puta.length))]
const putar2 = puta2[Math.floor(Math.random() * (puta2.length))] 
const gostosura = ['1','2','3','4','5','6','7','8','9']
const gostosura2 = ['1','2','3','4','5','6','7','8','9'] 
const gostosurar = gostosura[Math.floor(Math.random() * (gostosura.length))]
const gostosurar2 = gostosura2[Math.floor(Math.random() * (gostosura2.length))] 
gadop = `${Math.floor(Math.random() * 100)}`
const programa = Math.ceil(Math.random() * 10000)
const proximolvlxp = 5000 * (Math.pow(2, getLevelingLevel(sender)) - 1)
buffer = await getBuffer(ppimg)
buttons = [{buttonId: `#level`,buttonText:{displayText: `Level`},type:1}]
              imageMsg = (await ayumi.prepareMessageMedia(buffer, "imageMessage", { thumbnail: buffer,})).imageMessage
              buttonsMessage = {footerText:'ùó∞ùóÆùòÄùó≤ ùó∞ùóøùó∂ùóÆùó±ùóÆ ùóΩùóºùóø ùòÄùóÆùó∞ùóºùóπùó≤ ', imageMessage: imageMsg,
              contentText:`
     „Äå üî• ~_*PERFIL*_~ üåà „Äç
 üóí *Nome* : *${pushname}*
ü™Ä *N√∫mero* : @${sender.split("@")[0]}
üêÇ *N√≠vel gado* : *${nivelgador}${nivelgado2r}%*
üì± *Seu C√©lular* : ${info.key.id.length > 21 ? 'Android ü§£' : info.key.id.substring(0, 2) == '3A' ? 'IOSüòÇüòÇüòÖ' : 'Zap zap web üòÇüòÇ‚òùüèºüòÖ'}
üòà *N√≠vel puta* : *${putar}${putar2}%*
üòã *N√≠vel de gostosura* : *${gostosurar}${gostosurar2}%*
üçº *Valor do programa* : *R$${programa}*

‚ûª *~_CONSELHO_~* :
${conselho}`,buttons,headerType:4}
              prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
              ayumi.relayWAMessage(prep)
break

case 'frases':
case 'frase':
try {
ppimg = await ayumi.getProfilePicture(`${sender.split('@')[0]}@c.us`)
} catch {
ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
}
hehe = await fetchJson(`https://www.luc4rio-rest-api.tk/api/aleatorios/frases`)
if (hehe.error) return reply(hehe.error)
ccg =
`
  ‚Ä£ Author: ${hehe.Author}
 
  ‚Ä£ Criador: ${hehe.Criador}
 
  ‚Ä£ Frase: 
 
  ${hehe.Frase}\n`
daftarimg = await getBuffer(ppimg)
await ayumi.sendMessage(from, daftarimg, image, {quoted:info, caption: ccg})
break

case 'conselhobiblico':
case 'conselhosbiblico':  
case 'conselhosb':   
case 'conselhob':  
var conselhosb = conselhob[Math.floor(Math.random() * conselhob.length)]   
jr = `${tempo} ${pushname} 

Conselhos B√≠blico para voc√™: 

- ${conselhosb} 

> Bot: ${NomeDoBot}
> Grupo: ${groupName}`
await ayumi.sendMessage(from, jr, text, {quoted:info, contextInfo: {"mentionedJid": jr}})
break

case 'tabela':
await ayumi.sendMessage(from, tabela(prefix), text, {quoted: selo})
break 

case 'destrava2':
if (!isPremium && !isGroupAdmins) return reply(enviar.msg.premium)
await ayumi.sendMessage(from, destrava2 (prefix), text, {quoted: info})
break 

case 'infovota√ß√£o':
case 'infovotacao':  
await ayumi.sendMessage(from, infovotacao(prefix), text, {quoted: selo})
break

case 'infocontador':
await ayumi.sendMessage(from, infocontador(prefix), text, {quoted: selo})
break

case 'infolistanegra':
await ayumi.sendMessage(from, infolistanegra(prefix), text, {quoted: selo})
break

case 'infopalavr√£o':
case 'infopalavrao':
await ayumi.sendMessage(from, infopalavrao(prefix), text, {quoted: selo})
break

case 'infobancarac':
await ayumi.sendMessage(from, infobancarac(prefix), text, {quoted: selo})
break

//========(FUN√á√ïES-PREMIUM-AQUI)=======\\
case 'metadinhas':
case 'metadinha': 
if(!isPremium) return reply(enviar.msg.premium)
mortandela(from)
couple = await fetchJson(`https://api.dapuhy.ga/api/randomimage/couple?apikey=${dapuhykey}`)
metadinha1 = await getBuffer(couple.result.pria)
await ayumi.sendMessage(from, metadinha1, image, {quoted: info})
metadinha2 = await getBuffer(couple.result.wanita)
await ayumi.sendMessage(from, metadinha2, image, {quoted: info})

case 'ler': 
case 'ocr':   
case 'lerfoto':  
if(!isPremium) return reply(enviar.msg.premium)
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const media = await ayumi.downloadAndSaveMediaMessage(encmedia)
mortandela(from)
await recognize(media, {lang: 'eng+ind', oem: 1, psm: 3})
.then(teks => {
reply(teks.trim())
fs.unlinkSync(media)
})
.catch(err => {
reply(err.message)
fs.unlinkSync(media)
})
} else {
reply('Somente fotos!')
}
break

case 'premiumlist':
if(!isPremium) return reply(enviar.msg.premium)   
tkks = '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ*„Äå *PREMIUM USERüëë* „Äç\n'
for (let V of premium) {
tkks += `‚îÇ+  @${V.split('@')[0]}\n`
}
tkks += `‚îÇ+ Total : ${premium.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*„Äå *${setting.NomeDoBot}* „Äç*‚îÄ‚îÄ‚îÄ‚îÄ`
await ayumi.sendMessage(from, tkks.trim(), extendedText, {quoted: info, contextInfo: {"mentionedJid": premium}})
break

case 'delete':
case 'del':
case 'd':  
if (!isPremium && !isOwner && !issupre && !info.key.fromMe && !isGroupAdmins) return reply(enviar.msg.premium)
if (!isGroup)return reply(enviar.msg.grupo)
try {
await ayumi.deleteMessage(from, {id: info.message.extendedTextMessage.contextInfo.stanzaId, remoteJid: from, fromMe: true})
} catch {
reply('S√≥ √© poss√≠vel deletar mensagens minhas')
}
break

case 'gerarcpf':
if(!isPremium) return reply(enviar.msg.premium)
cp1 = `${Math.floor(Math.random() * 300) + 600}`
cp2 = `${Math.floor(Math.random() * 300) + 600}`
cp3 = `${Math.floor(Math.random() * 300) + 600}`
cp4 = `${Math.floor(Math.random() * 30) + 60}`
cpf = `${cp1}.${cp2}.${cp3}-${cp4}`
await ayumi.sendMessage(from, `CPF gerado com sucesso : ${cpf}`, text, {quoted: info})
break

case 'cep':
if(!isPremium) return reply(enviar.msg.premium)  
if (args.length == 0) return reply(`Exemplo: ${prefix + command} 54330235`)
query = args.join(" ")
get_result = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/tools/cep?apikey=apiteam&cep=${query}`)
x = get_result.resultado
k = `CEP : ${x.cep}
LOGRADOURO: ${x.logradouro}
BAIRRO : ${x.bairro}
LOCALIDADE : ${x.localidade}
UF : ${x.uf}
IBGE : ${x.ibge}
GIA : ${x.gia}
DDD : ${x.ddd}
SIAFI : ${x.siafi}`
reply(k)
break 

case 'ddd':
if(!isPremium) return reply(enviar.msg.premium)
if (args.length < 1) return reply(`Use ${prefix + comando} 81`)
ddd = body.slice(5)
ddds = await axios.get(`https://brasilapi.com.br/api/ddd/v1/${ddd}`)
dddlist = `Lista de Cidades de ${ddds.data.state} com este DDD ${q}>\n\n`
for (let i = 0; i < ddds.data.cities.length; i++) { dddlist += `${i + 1} ‚™ß *${ddds.data.cities[i]}*\n` }
ayumi.sendMessage(from, dddlist, text, {quoted: info})	
break

case 'encurtalink':
if(!isPremium) return reply(enviar.msg.premium)
if(args.length < 1) return reply(`Exemplo:\n${prefix}encurtalink https://xvideos.com`)
try {
link = args[0]
anu = await axios.get(`https://tinyurl.com/api-create.php?url=${link}`)
reply(`${anu.data}`)
} catch (e) {
emror = String(e)
reply(`${e}`)
}
await limitAdd(sender)
break

//===========(ADMS-FUN√á√ïES-AKI‚ù¨ üèì ‚ù≠\\

case 'atividade':
case 'atividades':  
try{
if(!isGroupAdmins && !issupre) return reply(enviar.msg.admin)
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
teks = `*Atividade dos membros do grupo:*\n\n`
mem = []
for(let obj of groupMembers) {
if(numbersIds.indexOf(obj.jid) >=0) {
var indnum = numbersIds.indexOf(obj.jid)
teks += `*‚Ä¢ Membro:* @${countMessage[ind].numbers[indnum].jid.split('@')[0]}\n*‚Ä¢ Comandos:* ${countMessage[ind].numbers[indnum].cmd_messages}\n*‚Ä¢ Mensagens:* ${countMessage[ind].numbers[indnum].messages}\n\n----------------------------------\n\n`
} else {
teks += `*‚Ä¢ Membro:* @${obj.jid.split('@')[0]}\n*‚Ä¢ Comandos:* 0\n*‚Ä¢ Mensagens:* 0\n\n----------------------------------\n\n`
}
mem.push(obj.jid)
}
ayumi.sendMessage(from, teks, extendedText, {quoted: info, contextInfo:{mentionedJid: mem}})
} else return reply('*Nada foi encontrado*')
} catch (e){
console.log(e)
}
break

case 'linkgp':
case 'linkgroup':
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isGroup) return reply(enviar.msg.grupo)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
linkgc = await ayumi.groupInviteCode(from)
reply('https://chat.whatsapp.com/'+linkgc)
break

case 'promover':
if (!isGroup) return reply(enviar.msg.group)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
const dlptu = body.slice(10)
if (dlptu.length > 14)return reply(`Exemplo : ${prefix}promover @55439220420`) 
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if (mentioned.length > 1) {
ytb = 'Promovido com sucesso\n'
for (let _ of mentioned) {
ytb += `@${_.split('@')[0]}\n`
}
mentions(from, mentioned, true)
ayumi.groupRemove(from, mentioned)
} else {
mentions(`Ok, chefe. esse(a) aqui: @${mentioned[0].split('@')[0]} agora √© admin do grupo!`, mentioned, true)
ayumi.groupMakeAdmin(from, mentioned)
}
break

case 'rebaixar':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
const dlp = body.slice(15)
if (dlp.length >= 15)return reply(`Exemplo : ${prefix}rebaixar @55439220420`)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if (mentioned.length > 1) {
ytb = 'Rebaixado com sucesso\n'
for (let _ of mentioned) {
ytb += `@${_.split('@')[0]}\n`
}
mentions(ytb, mentioned, true)
await ayumi.groupRemove(from, mentioned)
} else {
mentions(`Ok, chefe. esse(a) aqui: @${mentioned[0].split('@')[0]} perdeu o adm com sucesso!`, mentioned, true)
await ayumi.groupDemoteAdmin(from, mentioned)
}
break

case 'grupo': 
if (!isGroup) return reply(`S√ì EM GRUPO`)
if (!isGroupAdmins) return reply(`PRECISA SER ADMININASTROR`)
if (!isBotGroupAdmins) return reply(`BOT PREPRECISA SER ADMININASTROR`)
if (args[0] === 'a') {
reply(`*GRUPO ABERTO COM SUCESSO*`)
await ayumi.groupSettingChange(from, GroupSettingChange.messageSend, false)
} else if (args[0] === 'f') {
reply(`*GRUPO FECHADO COM SUCESSO*`)
await ayumi.groupSettingChange(from, GroupSettingChange.messageSend, true)
}				 
break 
case 'grupoinfo':
case 'infogrupo':
case 'infogp':  
case 'gpinfo':  
if (!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins)return reply(enviar.msg.adm)
ayumi.updatePresence(from, Presence.composing)
ppUrl = await ayumi.getProfilePicture(from)
buffer = await getBuffer(ppUrl)
ayumi.sendMessage(from, buffer, image, {quoted: info, caption: `*NOME* : ${groupName}\n*MEMBRO* : ${groupMembers.length}\n*ADMIN* : ${groupAdmins.length}\n*DESCRI√á√ÉO* : ${groupDesc}`, thumbnail: null})
break 

case 'hidetag':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
var value = body.slice(9)
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map( async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
text: value,
contextInfo: { mentionedJid: mem },
quoted: info
}
ayumi.sendMessage(from, options, text)
break

case 'totag':
if(!isGroupAdmins) return reply(enviar.msg.adm)
if ((isMedia && !info.message.videoMessage || isQuotedSticker) && args.length == 0) {
encmediau = isQuotedSticker ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, sticker, options)
fs.unlinkSync(file)
} else if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
encmediau = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, image, options)
fs.unlinkSync(file)
} else if ((isMedia && !info.message.videoMessage || isQuotedAudio) && args.length == 0) {
encmediau = isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
mimetype : 'audio/mp4', duration: 999999999,
ptt : true,
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, audio, options)
fs.unlinkSync(file)
 } else if ((isMedia && !info.message.videoMessage || isQuotedVideo) && args.length == 0) {
encmediau = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
mimetype : 'video/gif',
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, video, options)
fs.unlinkSync(file)
} else if ((isMedia && !info.message.videoMessage || isQuotedDocument) && args.length == 0) {
encmediau = isQuotedDocument ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
mimetype : 'text/plain',
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, document, options)
fs.unlinkSync(file)
}  else if ((isMedia && !info.message.videoMessage || isQuotedVideo) && args.length == 0) {
encmediau = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
file = await ayumi.downloadAndSaveMediaMessage(encmediau, filename = getRandom())
value = args.join(" ")
var group = await ayumi.groupMetadata(from)
var member = group['participants']
var mem = []
member.map(async adm => {
mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
var options = {
mimetype : 'video/mp4', duration: 999999999,
contextInfo: { mentionedJid: mem },
quoted: info
}
ini_buffer = fs.readFileSync(file)
ayumi.sendMessage(from, ini_buffer, video, options)
fs.unlinkSync(file)
} else{
reply(`Responder imagem/documento/gif/adesivo/√°udio/v√≠deo com legenda ${prefix + comamand}`)
}
break

case 'marcar':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
members_id = []
jrp = (args.length > 1) ? body.slice(8).trim() : ''
jrp += '\n\n'
for (let mem of groupMembers) {
jrp += `*#* @${mem.jid.split('@')[0]}\n`
members_id.push(mem.jid)
}
mentions(jrp, members_id, true)
break

case 'kick':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
const dltp = body.slice(6)
if (dltp.length > 14)return reply(`Exemplo : ${prefix}kick @55439220420`) 
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque o alvo que voc√™ quer remover do grupo!') 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if (mentioned.length > 1) {
teks = 'Esse ai ja foi kkkk :\n'
for (let _ of mentioned) {
teks += `@${_.split('@')[0]}\n`
}
mentions(teks, mentioned, true)
ayumi.groupRemove(from, mentioned)
} else {
mentions(`Alvo removido com sucesso  : @${mentioned[0].split('@')[0]}`, mentioned, true)
ayumi.groupRemove(from, mentioned)
}
break

case 'ban':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar. msg.Badmin)
if (info.message.extendedTextMessage === null || info.message.extendedTextMessage === undefined) return reply('Marque uma mensagem de um random')
if (info.message.extendedTextMessage.contextInfo.participant == numerodono) return reply('N√£o posso remover meu dono.')
if (info.message.extendedTextMessage.contextInfo.participant == botNumber) return reply('C acha que sou besta?, vou me remover n√£o.')
setTimeout(function() {}, 2000);
if (info.message.extendedTextMessage.contextInfo.participant === undefined) {
entah = info.message.extendedTextMessage.contextInfo.mentionedJid
if (exe1.length > 1) {
var M_exe = []
for (let cut of exe1) {
M_exe.push(cut)
}
ayumi.groupRemove(from, M_exe)
} else {
ayumi.groupRemove(from, [exe1[0]])
}
} else {
exe1 = info.message.extendedTextMessage.contextInfo.participant
ayumi.groupRemove(from, [exe1])
}
break


//======‚â†(INFOS/EXECU√á√ÉO/DONO)‚â†=========\\

case 'bateria':
reply('„Ää Aguarde, esta informa√ß√£o √© apenas para saber a porcentagem da bateria do celular do Bot „Äã')
post = await fetchJson(`https://api-gdr2.herokuapp.com/api/textmaker/game?text=Bateria&text2=${battre}%&theme=battlefield`)
send = await getBuffer(post.result.url)
ayumi.sendMessage(from, send, image,  {quoted: { key: { participant: `0@s.whatsapp.net`, ...{}}, message: { "imageMessage": { "caption": `${battre}%üîã`,}}}})
break

case 'autoban':
if (!isGroup) return reply(enviar.msg.admin)
if (!isOwner && !info.key.fromMe) return reply('Precisa ser Dono')
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
var ind = dbids.indexOf(from)
if(isAdeusCara) {
adeuscara[ind].actived = true
} else {
adeuscara.push({
groupId: from,
actived: true,
number: []
})
}
fs.writeFileSync('./lib/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`Ativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`)
} else if (Number(args[0]) === 0) {
var ind = dbids.indexOf(from)						
if(isAdeusCara) {
adeuscara[ind].actived = false
} else {
adeuscara.push({
groupId: from,
actived: false,
number: []
})
}
fs.writeFileSync('./lib/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`Desativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`)
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'listban':
if (!isGroup) return reply(enviar.msg.admin)
if (!isGroupAdmins) return reply(enviar.msg.admin)
var ind = dbids.indexOf(from)
if(!isAdeusCara) return reply('*Nenhum N√∫mero n√£o foi adicionado*')
teks = '*N√∫meros que vou moer na porrada se voltar üò°:*\n'
for(i=0;i<adeuscara[ind].number.length;++i) {
teks += `‚û§ *${adeuscara[ind].number[i]}*\n`
}
teks += '*Esses ai vou descer meu martelo do ban ü•µ*'
reply(teks)
break  

case 'addautorm':
case 'addautoban':
case 'listanegra':  
if (!isGroup) return reply(enviar.msg.admin)
if (!isOwner && !info.key.fromMe) return reply('Precisa ser Dono')
if (args.length < 1) return reply('Diga o numero sem espa√ßo, + ou tra√ßo')
if (isNaN(args[0])) return reply('Diga o numero sem espa√ßo, + ou tra√ßo')
var ind = dbids.indexOf(from)
if(isAdeusCara) {
var numind = adeuscara[ind].number.indexOf(args[0])
if(numind >= 0) return reply('*Esse N√∫mero ja esta incluso*')
adeuscara[ind].number.push(args[0])
} else {
adeuscara.push({
groupId: from,
actived: false,
number: [args[0]]
})
}
fs.writeFileSync('./lib/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`*N√∫mero adicionado a lista de autoban*`)
break

case 'delremover':
case 'delautorm':  
case 'delautoban': 
case 'tirardalista':  
if (!isGroup) return reply(enviar.msg.admin)
if (!isOwner && !info.key.fromMe) return reply('Precisa ser Dono')
if (args.length < 1) return reply('Diga o numero sem espa√ßo, + ou tra√ßo')
if (isNaN(args[0])) return reply('Diga o numero sem espa√ßo, + ou tra√ßo')
var ind = dbids.indexOf(from)
if(!isAdeusCara) return reply('*Nenhum N√∫mero n√£o foi adicionado*')
var numind = adeuscara[ind].number.indexOf(args[0])
if(numind < 0) return reply('*Esse n√∫mero n√£o est√° incluso*')
adeuscara[ind].number.splice(numind, 1)
fs.writeFileSync('./lib/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`*N√∫mero removido a lista de autoban*`)
break

case 'banghost':
case 'banghosts':  
if(!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if(!isGroup) return reply(enviar.msg.group)
if(groupIdscount.indexOf(from) >= 0) {
for(let obj of groupMembers) {
if(numbersIds.indexOf(obj.jid) >=0) { 
var indnum = numbersIds.indexOf(obj.jid)
if(countMessage[ind].numbers[indnum].messages <= args[0]) {
if(groupAdmins.includes(obj.jid)) {
mentions(`@${obj.jid} ta liberado da inspe√ß√£o por ser admin`, [obj.jid], true)
} else {
ayumi.groupRemove(from, [obj.jid])
}
}
} else {
if(groupAdmins.includes(obj.jid)) {
mentions(`@${obj.jid} ta liberado da inspe√ß√£o por ser admin`, [obj.jid], true)
} else {
ayumi.groupRemove(from, [obj.jid])
}
}
}
}
break

case 'setprefix':
if (args.length < 1) return
if (!isOwner && !info.key.fromMe) return reply(enviar.msg.ownerB)
prefix = args[0]
setting.prefix = prefix
fs.writeFileSync('./dono/settings.json', JSON.stringify(setting, null, '\t'))
reply(`O prefixo foi alterado com sucesso para: ${prefix}`)
break

case 'setprefixs':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
prefix = args[0]
setting.prefix = prefix
fs.writeFileSync('./dono/settings.json', JSON.stringify(setting, null, '\t'))
reply(`O prefixo foi alterado com sucesso para: ${prefix}`)
break

case 'nomegp':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.admin)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
await ayumi.groupUpdateSubject(from, `${body.slice(9)}`)
await ayumi.sendMessage(from, 'Sucesso, alterou o nome do grupo', text, {quoted: info})
break

case 'fotobot':
ayumi.updatePresence(from, Presence.composing)
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (!isQuotedImage) return reply(`Envie fotos com legendas ${prefix}fotobot ou tags de imagem que j√° foram enviadas`)
enmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(enmedia)
await ayumi.updateProfilePicture(botNumber, media)
reply('Obrigado pelo novo perfilüòó')
break

case 'clonar':
if (!isOwner && !issupre) return reply('Voc√™ quem √© o propriet√°rio?')
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Marque a pessoa que voc√™ quer clonar\n\n*EXEMPLO:* clone @')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Tag cvk')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0]
let { jid, id, notify } = groupMembers.find(x => x.jid === mentioned)
try {
pp = await ayumi.getProfilePicture(id)
buffer = await getBuffer(pp)
ayumi.updateProfilePicture(botNumber, buffer)
mentions(`Foto do perfil atualizada com sucesso, usando a foto do perfil @${id.split('@')[0]}`, [jid], true)
} catch (e) {
reply('Putz, deu erro, a pessoa deve estar sem foto üòî')
}
break

case 'leveling':
if (!isGroup) return reply('S√≥ em Grupo')
if (!isGroupAdmins) return reply('Voc√™ precisa ser adm')
if (args.length < 1) return reply('Ative pressione 1, Desativar pressione 0')
if (Number(args[0]) === 1) {
if (isLevelingOn) return reply('*O recurso de n√≠vel j√° estava ativo antes*')
_leveling.push(from)
fs.writeFileSync('./lib/usuarios/leveling.json', JSON.stringify(_leveling))
reply(enviar.levelon) 
} else if (Number(args[0]) === 0) {
if (!isLevelingOn) return reply('*O recurso de n√≠vel j√° est√° Desativado*')  
_leveling.splice(from, 1)
fs.writeFileSync('./lib/usuarios/leveling.json', JSON.stringify(_leveling))
reply(enviar.leveloff)
} else {
reply('*Adicionar par√¢metro 1 ou 0* ')
}
break

case 'level':
if (!isLevelingOn) return reply(enviar.levelnoton)
if (!isGroup) return reply(enviar.msg.group)
const userLevel = getLevelingLevel(sender)
const userXp = getLevelingXp(sender)
if (userLevel === undefined && userXp === undefined) return reply(enviar.levelnol)
sem = sender.replace('@s.whatsapp.net','')
try {
         var ppimg = await ayumi.getProfilePicture(`${sender.split('@')[0]}@c.us`)
            } catch {
               var ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
            }
					buff = await getBuffer(ppimg)

                const requiredXp = 5000 * (Math.pow(2, userLevel) - 1)
buttons = [{buttonId: `#anagrama`,buttonText:{displayText: `Anagrama`},type:1}]
              imageMsg = (await ayumi.prepareMessageMedia(buff, "imageMessage", { thumbnail: buff,})).imageMessage
              buttonsMessage = {footerText:'ùó∞ùóÆùòÄùó≤ ùó∞ùóøùó∂ùóÆùó±ùóÆ ùóΩùóºùóø ùòÄùóÆùó∞ùóºùóπùó≤ ', imageMessage: imageMsg,
              contentText:`Ô∏é‚ï≠‚îÅ‚îÅ„Äé‚òÉÔ∏è„Äè *NIVEL*„Äé‚òÉÔ∏è„Äè\n‚îÇ‚ùí …¥·¥è·¥ç·¥á : ${pushname}\n‚îÇ‚ùí …¥·¥ú·¥ç·¥á Ä·¥è : wa.me/${sender.split("@")[0]}\n‚îÇ‚ùí XP :  ${userXp}/${requiredXp}\n‚îÇ‚ùí Seu n√≠vel : ${userLevel}\n‚îÇ‚ùí Patente : ${patt}\n‚ï∞‚îÅ‚îÅ„Äéü¶ã„Äè*NIVEL*„Äéü¶ã„Äè‚îÅ‚îÅ`,buttons,headerType:4}
              prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
              ayumi.relayWAMessage(prep)
break

 case 'minerar':      
                      if (!isOwner) {
                      const one = 9999999
                      addLevelingXp(sender, one)
                      addLevelingLevel(sender, 10)
                      reply(`como e vc sacole ganhou ${one} e +10 n√≠vel ‚ö°`)
                      }else{
                      const mining = Math.ceil(Math.random() * 20000)
                      addLevelingXp(sender, mining) 
                      await reply(`*${pushname} min√©rou‚õèÔ∏è na mina e conseguiu* ${mining} de xp...*`)
                      }                                      
                   await limitAdd(sender)
             					break

case 'bc':
      case 'tm':

             if (args.length < 1) return reply('teks?')
             anu = await ayumi.chats.all()
             if (isMedia && !mek.message.videoMessage || isQuotedImage) {
             const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
             bc = await ayumi.downloadMediaMessage(encmedia)
             for (let _ of anu) {
             ayumi.sendMessage(_.jid, bc, image, {quoted:selo,caption: `*„Äå¬©saco„Äç*\n${body.slice(4)}`})
}
             reply('Tm feita')
             } else {
             for (let _ of anu) {
ayumi.sendMessage(_.jid, 
			{"contentText": `*„Äå ${setting.NickDono} „Äç*\n ${body.slice(4)}`,
			"footerText": '*„Äå¬©Sacole„Äç*',
			"buttons": [
			{"buttonId": `#dono`,
			"buttonText": {"displayText": "Dono"
			},"type": "RESPONSE"}
			], "headerType": 1,
			}, MessageType.buttonsMessage )
}
             reply('feito')
}
             break

case 'transmitir':
if(!budy.includes("-")) return reply(`Defina pra que tipo de p√∫blico voc√™ deseja enviar, por exemplo: ${prefix + command} -pvs bla bla fala oq quer, -pvs = privados / -gps = grupos / -all = para todos / boa sorte..`)
if (!isOwner && !issupre) return reply('Quem √© Voc√™, voc√™ n√£o √© meu dono üòÇ?')
if (args.length < 1) return reply('.......')
anu = await ayumi.chats.all()
bahh = ayumi.chats.array.filter(v => v.jid.endsWith('g.us'))
bahhh = ayumi.chats.array.filter(v => v.jid.endsWith('s.whatsapp.net'))
if(args[0].toLowerCase() === '-all'){
if (isMedia && !info.message.videoMessage || isQuotedImage) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
buff = await ayumi.downloadMediaMessage(encmedia)
for (i = 0; i < anu.length; i++) {
ayumi.sendMessage(anu[i].jid, buff, image, {caption: `[ TRANSMI√á√ÉO DE MY DONO ]\n\n${body.slice(16)}`})
}
reply(`transmi√ß√£o foi enviada a ${bahh.length} grupos e ah ${bahhh.length} pvs`)
} else {
for (i = 0; i < anu.length; i++) {
sendMess(anu[i].jid, `[ TRANSMISS√ÉO DO MY DONO ]\n\n${body.slice(16)}`)
}
reply(`transmi√ß√£o foi enviada a ${bahh.length} grupos e ah ${bahhh.length} pvs`)
}
}else if(args[0].toLowerCase() === '-pvs'){
if (isMedia && !info.message.videoMessage || isQuotedImage) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
buff = await ayumi.downloadMediaMessage(encmedia)
for (i = 0; i < bahhh.length; i++) {
ayumi.sendMessage(bahhh[i].jid, buff, image, {caption: `[ TRANSMI√á√ÉO DE MY DONO ]\n\n${body.slice(16)}`})
}
reply(`transmi√ß√£o foi enviada para ${bahhh.length} pvs`)
} else {
for (i = 0; i < bahhh.length; i++) {
sendMess(bahhh[i].jid, `[ TRANSMISS√ÉO DE MY DONO ]\n\n${body.slice(16)}`)
}
reply(`transmi√ß√£o foi enviada a ${bahhh.length} pvs`)
}
} else if(args[0].toLowerCase() === '-gps'){
if (isMedia && !info.message.videoMessage || isQuotedImage) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
buff = await ayumi.downloadMediaMessage(encmedia)
for (i = 0; i < bahh.length; i++) {
ayumi.sendMessage(bahh[i].jid, buff, image, {caption: `[ TRANSMI√á√ÉO DE MY DONO ]\n\n${body.slice(16)}`})
}
reply(`transmi√ß√£o foi enviada a ${bahh.length} grupos`)
} else {
for (i = 0; i < bahh.length; i++) {
sendMess(bahh[i].jid, `[ TRANSMISS√ÉO DE MY DONO ]\n\n${body.slice(16)}`)
}
reply(`transmi√ß√£o foi enviada a ${bahh.length} grupos`)
}
}
break

case 'bcgp':
case 'bcgc':  
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('.......')
fgp = await groupMembers
var nomor = info.participant
if (isMedia && !info.message.videoMessage || isQuotedImage) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
buff = await ayumi.downloadMediaMessage(encmedia)
for (let _ of fgp) {
ayumi.sendMessage(_.jid, buff, image, {caption: `*„Äå TRANSMISS√ÉO „Äç*\n\nGrupo: ${groupName}\n N√∫mero: wa.me/${(sender.split('@')[0])}\nMensagem : ${body.slice(6)}`})
}
reply('')
} else {
for (let _ of fgp) {
sendMess(_.jid, `*„Äå TRANSMISS√ÉO „Äç*\n\nGrupo : ${groupName}\n N√∫mero : wa.me/${(sender.split('@')[0])}\nMensagem : ${body.slice(6)}`)
}
reply('Grupo de transmiss√£o bem-sucedido')
} 
break

case 'dono1':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono1 = body.slice(8)
nescessario.dono1 = dono1
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um segundo dono(a) alterado com sucesso para: ${dono1}`)
break

case 'dono2':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono2 = body.slice(8)
nescessario.dono2 = dono2
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um segundo dono(a) alterado com sucesso para: ${dono2}`)
break

case 'dono3':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono3 = body.slice(8)
nescessario.dono3 = dono3
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um terceiro dono(a) alterado com sucesso para: ${dono3}`)
break

case 'dono4':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono4 = body.slice(8)
nescessario.dono4 = dono4
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um quarto dono(a) alterado com sucesso para: ${dono4}`)
break

case 'dono5':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono5 = body.slice(8)
nescessario.dono5 = dono5
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um quinto dono(a) alterado com sucesso para: ${dono5}`)
break

case 'dono6':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
dono6 = body.slice(8)
nescessario.dono6 = dono6
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`Agora contem um quinto dono(a) alterado com sucesso para: ${dono6}`)
break

case 'getquoted':
reply(JSON.stringify(info.message.extendedTextMessage.contextInfo, null, 3))
break

case 'donos':
p = `[ Lista de donos do bot ${setting.NomeDoBot} ] 

Dono Oficial do bot: ${setting.numerodono}

- [ 1 ] ${nescessario.dono1}\n- [ 2 ] ${nescessario.dono2}\n- [ 3 ] ${nescessario.dono3}\n- [ 4 ] ${nescessario.dono4}\n- [ 5 ] ${nescessario.dono5}\n- [ 6 ] ${nescessario.dono6} `
reply(p)
break

case 'online':
case 'onlines':  
case 'listonline': 
case 'listonlines':  
let ido = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : from
let online = [...Object.keys(ayumi.chats.get(ido).presences), ayumi.user.jid]
ayumi.sendMessage(from, 'ùíçùíäùíîùíïùíÇ ùíÖùíÜ ùíñùíîùíñùíÇùíìùíäùíêùíî ùíêùíèùíçùíäùíèùíÜùíî:\n' + online.map(v => '- @' + v.replace(/@.+/, '')).join `\n`, text, {
 quoted: info,
 contextInfo: {
 mentionedJid: online
}
})
break

case 'admins':
case 'listadmins':  
case 'listaadmins':   
if (!isGroup) return reply(enviar.msg.grupo)
ytb = `Lista de admins do grupo *${groupMetadata.subject}*\nTotal : ${groupAdmins.length}\n\n`
no = 0
for (let admon of groupAdmins) {
no += 1
ytb += `[${no.toString()}] @${admon.split('@')[0]}\n`
}
mentions(ytb, groupAdmins, true)
break

case 'ausente': 
if (!isOwner && !issupre && !info.key.fromMe) return reply(`Voc√™ n√£o e o wa.me/${setting.NumeroDono} so ele pode usar esse comando kkkk`)
offline = true
waktuafk = Date.now()
anuu = args.join(" ") ? args.join(" ") : 'ativar'
alasanafk = anuu
anu  = {contextInfo:{"forwardingScore":999,"isForwarded":true,'stanzaId': "B2673620DD5947E63E3ABE663F263", 'participant': `${setting.numerodono}@s.whatsapp.net`, 'remoteJid': `${from}`, 'quotedMessage': {"imageMessage": {"caption": `OFFLINE`, 'jpegThumbnail': await getBuffer(`${linklogos}`)}}}}
await ayumi.sendMessage(from, `[‚ùó] AGORA EU ESTOU OFFLINE`,MessageType.text,anu)
await limitAdd(sender)
break 

case 'ativo':
if (!isOwner && !issupre && !info.key.fromMe) return reply(`Voc√™ n√£o e o wa.me/${setting.numerodono} so ele pode usar esse comando kkkk`)
offline = false
anu  = {contextInfo:{"forwardingScore":999,"isForwarded":true,'stanzaId': "B2673620DD5947E63E3ABE663F263", 'participant': `${setting.numerodono}@s.whatsapp.net`, 'remoteJid': `${from}`, 'quotedMessage': {"imageMessage": {"caption": `ONLINE`, 'jpegThumbnail': await getBuffer(`${linklogos}`)}}}}
await ayumi.sendMessage(from, `[‚ùó] AGORA ESTOU ONLINE`,MessageType.text,anu)
await limitAdd(sender)
break   

case 'serpremium':
case 'serprem':  
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
premium.push(`${setting.numerodono}@s.whatsapp.net`)
fs.writeFileSync('./lib/usuarios/premium.json', JSON.stringify(premium))
reply(`Pronto ${setting.numerodono} voc√™ foi adicionado na lista premium.`)
break

case 'addpremium':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
premium.push(`${mentioned}`)
fs.writeFileSync('./lib/usuarios/premium.json', JSON.stringify(premium))
susp = `üëë@${mentioned[0].split('@')[0]} foi adicionado √† lista de usu√°rios premium com sucessoüëë`
mentions(`${susp}`, mentioned, true)   
break 

case 'delpremium':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return  reply(enviar.msg.ownerB)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
premium.splice(`${mentioned}`)
fs.writeFileSync('./lib/usuarios/premium.json', JSON.stringify(premium))
susp = `‚úñ@${mentioned[0].split('@')[0]} foi removido da lista de usu√°rios premium‚úñ`
mentions(`${susp}`, mentioned, true)   
break 

case 'limpar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.admin)
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
ayumi.sendMessage(from, clear , MessageType.text, {quoted: selo, contextInfo : { forwardingScore: 500, isForwarded:true}})
break
case 'clearchat':
case 'limparchat':  
case 'limparmsg':  
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
anu = await ayumi.chats.all()
list_chat = await ayumi.chats.all()
for (let chat of list_chat) {
await ayumi.modifyChat(chat.jid, "delete", {includeStarred: false})
}
reply("Chat limpo")
break

case 'addpalavra':
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply( `Use assim : ${prefix + command} [palavr√£o]. exemplo ${prefix + command} puta`)
const bw = body.slice(12)
palavra.push(bw)
fs.writeFileSync('./lib/grupos/palavras.json', JSON.stringify(palavra))
reply('Palavr√£o adicionado com sucesso!')
await limitAdd(sender)
break

case 'delpalavra':
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply( `Use assim : ${prefix + command} [palavr√£o]. exemplo ${prefix + command} puta`)
let dbw = body.slice(12)
palavra.splice(dbw)
fs.writeFileSync('./lib/grupos/palavras.json', JSON.stringify(palavra))
reply('Palavr√£o removido da lista com sucesso!')
await limitAdd(sender)
break

case 'listapalavr√£o': case 'listapalavra':
case 'listpalavra':
let lbw = `Esta √© a lista de palavr√£o\nTotal : ${palavra.length}\n`
for (let i of palavra) {
lbw += `‚û∏ ${i.replace(palavra)}\n`
}
await reply(lbw)
await limitAdd(sender)
break 

case 'legendasaiu':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
legendasaiu = args.join(" ")
nescessario.legendasaiu = legendasaiu
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`A legenda de saiu foi alterada com sucesso para: ${legendasaiu}`)
break

case 'legendabv':
if (args.length < 1) return
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
legendabv = args.join(" ")
nescessario.legendabv = legendabv
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`A legenda do bem vindo foi alterada com sucesso para: ${legendabv}`)
break

case 'fundobemvindo':
case 'fundobv':  
if (!isOwner && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply(`Marque alguma imagem com o comando ${prefix}imgpralink e copie o link e digite\n${prefix}fundobemvindo o link aqui.\nE ${prefix}fundosaiu o link aqui.`)
fundo1 = args[0]
if(budy.includes("  ")) return reply(`N√£o pode espa√ßo, sen√£o vai bugar, e √© link da imagem, marca uma foto com o comando ${prefix}imgpralink, n√£o √© texto`)
nescessario.fundo1 = fundo1
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`A imagem de bem vindo foi alterado com sucesso para: ${fundo1}`)
break

case 'fundosaiu':
if (!isOwner && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply(`Marque alguma imagem com o comando ${prefix}imgpralink e copie o link e digite\n${prefix}fundosaiu o link aqui.\nE ${prefix}fundobemvindo o link aqui.`)
fundo2 = args[0]
if(budy.includes("  ")) return reply(`N√£o pode espa√ßo, sen√£o vai bugar, e √© link da imagem, marca uma foto com o comando ${prefix}imgpralink, n√£o √© texto`)
nescessario.fundo2 = fundo2
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`A imagem de saiu foi alterado com sucesso para: ${fundo2}`)
break

case 'test':
if (isUser) return reply(`üìå *Voc√™ j√° est√° registrado*`)
const namaUser = q.substring(0, q.indexOf('/') - 0)
const serialUser = createSerial(20)
reply('„Äé‚ùó„ÄèEs·¥ò·¥á Ä·¥á ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss·¥Ä·¥ç·¥á…¥·¥õ·¥è ·¥Ö·¥è s·¥á·¥ú  ü·¥è…¢…™…¥')
try {
var ppimg = await ayumi.getProfilePicture(`${sender.split('@')[0]}@c.us`)
} catch {
var ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
}
buff = await getBuffer(ppimg)
const tekentod = 
`
‚ï≠‚Ä¢‚ùè üìù ‡´®‡´Øg¬°‡™Ω∆¨‡´®—≥
 ‚Ä¢ ‚™ß ‚Éù‚Éï‡ºòüê§REGISTRADO(A)
‚îÇ‚™ß ‚Éù‚Éï‡ºò‚ö°…™·¥Ö: ${serialUser}
 ‚Ä¢ R·¥á…¢…™s·¥õ Ä·¥è  ô·¥á·¥ç s·¥ú·¥Ñ·¥á·¥Ö…™·¥Ö·¥è!!
‚îÇ‚™ß ‚Éù‚Éï‡ºò‚è≥ ú·¥è Ä·¥Ä Ä…™·¥è: ${time}
 ‚Ä¢ ‚™ß ‚Éù‚Éï‡ºò,‚ö†Ô∏è…¥·¥è·¥ç·¥á: ${pushname}
‚îÇ‚™ß ‚Éù‚Éï‡ºòüê§…¥·¥ú·¥ç·¥á Ä·¥è: wa.me/${sender.split('@')[0]}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ ‚Ä¢ ‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ùã€™€™‡Ω¥‡Ωª‚∏ô
`            
veri = sender
if (isGroup) {
addRegisteredUser(sender, pushname, time, serialUser)
await ayumi.sendMessage(from, buff, image, {sendEphemeral: true, contextInfo: { forwardingScore: 508, isForwarded: true}, quoted: mek, caption: `${tekentod}`})              
} else {
addRegisteredUser(from, pushname, time, serialUser)
await ayumi.sendMessage(from, buff, image, {sendEphemeral: true, contextInfo: { forwardingScore: 508, isForwarded: true}, quoted: mek, caption: `${tekentod}`})      
}       
break

case 'antiligar':
try {
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAnticall) return reply('Ja esta ativo')
anticall.push('Ativado')
fs.writeFileSync('./lib/usuarios/anticall.json', JSON.stringify(anticall))
reply('Ativou com sucesso o recurso de antiliga√ß√£o no bot‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
fs.writeFileSync('./lib/usuarios/anticall.json', JSON.stringify([]))
reply('Desativou com sucesso o recurso de antiliga√ß√£o no bot‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Falha ao ativar')
}
break

case 'antipvon':
if (!isOwner && !issupre && !info.key.fromMe ) return await reply('Apenas Meu Dono')
if (banChats) return await reply('j√° est√° ativo o modo antipv')
banChats = true
nescessario.banChats = banChats
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
await ayumi.sendMessage(from, "*Sucesso alterado para modo antipv, pv n√£o poder√° ser utilizado" , text)
break

case 'antipvoff':
if (!isOwner && !issupre && !info.key.fromMe) return await reply('Apenas meu dono o owner')
if (!banChats) return await reply('Nao estava ativado ainda')
banChats = false
nescessario.banChats = banChats
fs.writeFileSync('./dono/nescessario.json', JSON.stringify(nescessario, null, '\t'))
await ayumi.sendMessage(from, "*Sucesso modo antipv desligado, pv liberado.", text)
break

case 'antipv':
try {
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiPv) return reply('Ja esta ativo')
antipv.push('Ativado')
fs.writeFileSync('./lib/usuarios/antipv.json', JSON.stringify(antipv))
reply('Ativou com sucesso o recurso de antipv no bot‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiPv) return reply('Ja esta Desativado') 
fs.writeFileSync('./lib/usuarios/antipv.json', JSON.stringify([]))
reply('Desativou com sucesso o recurso de antipv no bot‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Falha ao ativar')
}
break

case 'block':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return  reply(enviar.msg.ownerB)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
ban.push(`${mentioned}`)
fs.writeFileSync('./lib/usuarios/banned.json', JSON.stringify(ban))
susp = `üö´@${mentioned[0].split('@')[0]} foi banido e n√£o poder√° mais usar os comandos do botüö´`
mentions(`${susp}`, mentioned, true)   
break

case 'unblock':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return  reply(enviar.msg.ownerB)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
ban.splice(`${mentioned}`)
fs.writeFileSync('./lib/usuarios/banned.json', JSON.stringify(ban))
susp = `‚ùé@${mentioned[0].split('@')[0]} foi desbanido e poder√° novamente usar os comandos do bot‚ùé`
mentions(`${susp}`, mentioned, true)   
break

case 'blocklist':
ayumi.updatePresence(from, Presence.composing) 
jrc = 'ESTA √â A LISTA DE N√öMEROS BLOQUEADOS :\n'
for (let benn of ban) {
jrc += `~> @${benn.split('@')[0]}\n`
}
jrc += `Total : ${ban.length}`
ayumi.sendMessage(from, jrc.trim(), extendedText, {quoted: info, contextInfo: {"mentionedJid": ban}})
break

case 'acess':
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
teks = body.slice(7)
exec(teks, (err, stdout) => {
if (err) return ayumi.sendMessage(from, `root@ALEOFC-BOT:~ ${err}`, text, {quoted: info})
if (stdout) {
ayumi.sendMessage(from, stdout, text)
}
})
break

case 'bangp':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
if (isBanchat) return reply(`Este grupo ja est√° banido`)
bancht.push(from)
fs.writeFileSync('./lib/grupos/banchat.json', JSON.stringify(bancht))
reply(`Grupo banido com sucesso`)
break

case 'unbangp':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isOwner && !issupre && !info.key.fromMe) return reply(enviar.msg.ownerB)
let cur = bancht.indexOf(from)
bancht.splice(cur, 1)
fs.writeFileSync('./lib/grupos/banchat.json', JSON.stringify(bancht))
reply(`Grupo desbanido...`)
break

case 'limitec':
if(!isOwner) return reply(enviar.msg.ownerB)
if (args.length < 1) return
if (!setTimeout && !info.key.fromMe) return reply(enviar.msg.ownerB)
limitefl = args.join(" ")
limitefll.limitefl = limitefl
fs.writeFileSync('./lib/usuarios/flood.json', JSON.stringify(limitefll, null, '\t'))
reply(`${limitefl} foi adicionado como limite de antiflood `)
break

case 'execut':
if(!isOwner && !issupre) return
try{
return eval(`(async() => { ${args.join(' ')}})()`)
}catch (e) {
reply(`${e}`)
}
break

case 'exec':
if(!isOwner && !issupre) return
try{
paramsQuoted = info.message.extendedTextMessage.contextInfo.quotedMessage.conversation || info.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;	
return eval(`${paramsQuoted}`)
console.log(`[EXEC]~> ${paramsQuoted}`)
}catch(e){
reply(e)
}
break

case 'ping':
buttons = [{buttonId:`#bateria`,buttonText:{displayText: 'Bateria'},type:1}]
const timestamp = speed();
const latensi = speed() - timestamp
uptime = process.uptime()
               buttonsMessage = {
               contentText: `*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä P I N G ü¶ä‚ù≠*
 *‚îÇ‚û¢ Velocidade: ${latensi.toFixed(4)} SEGUNDOS
 *‚îÇ‚û¢ Ativo por: *${kyun(uptime)}*
*‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ*`,
               footerText: `${pushname}`,
               buttons: buttons,
               headerType: 1
}
          prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
               ayumi.relayWAMessage(prep)
               break 

case 'gtts':
if (args.length < 1) return reply('sem linguagem sem audio')
const gtts = require('./lib/gtts')(args[0])
if (args.length < 2) return ayumi.sendMessage(from, 'Falta colocar o c√≥digo do idioma!', text, {quoted: info})
dtt = body.slice(8)
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
dtt.length > 250
? reply('Para reduzir spam o m√°ximo de letras permitidas s√£o 130!')
: gtts.save(ranm, dtt, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
fs.unlinkSync(ranm)
buffer = fs.readFileSync(rano)
if (err) return reply('Falha')
ayumi.sendMessage(from, buffer, audio, {quoted: info, ptt:true})
fs.unlinkSync(rano)
})
})
break

case 'playlist':

        if (isBanned) return reply(yag.ban())

mortandela(from)

datuA = await fetchJson(`https://hardianto-chan.herokuapp.com/api/yt/search?query=${args.join(" ")}&apikey=hardianto`)

datuB = datuA.result

datuC = `${datuA.result[0].url}`

datuD = []

datuB.splice(10, datuB.length)

datuB.forEach((datuB, i) =>{

datuD.push({

"rows": [

 {

description: `Titulo: ${datuB.title}`,

"title": " ",

"rowId": `#play ${datuB.url}`

},

], title: i+1 })

})

datuK = ayumi.prepareMessageFromContent(from, {

"listMessage":{

"title": "```Play Yt```",

"description": `Resultados para: ${args.join(" ")}`,

"buttonText": "Escolha sua m√∫sicaüéß",

"listType": "SINGLE_SELECT",

"sections": datuD}}, {}) 

ayumi.relayWAMessage(datuK, {waitForAck: false, quoted: selo})

 break

case 'tagme':
const tagme = {
text: `@${sender.split("@")[0]} ‚úîÔ∏è`, contextInfo: {mentionedJid: [sender]}
}
await ayumi.sendMessage(from, tagme, text)
break

case 'blockcmd':
if(!isOwner) return reply(enviar.msg.ownerB)
if(budy.includes("blockcmd blockcmd") || (budy.includes("blockcmd  blockcmd"))) return reply(`T√° louco maluco?, Quer banir o comando de bloquear comando?`)
if(getComandoBlock(from).includes(args[0]))return reply('Este comando j√° est√° blockeado')
addComandos(from, args[0])
reply(`O comando ${args[0]} Foi blockeado`)
break

case 'unblockcmd':
if(!isOwner) return reply(enviar.msg.ownerB) 
if(budy.includes("blockcmd unblockcmd") || (budy.includes("blockcmd  unblockcmd"))) return reply(`T√° louco maluco?, Quer banir o comando de desbloquear comando?`)  
if(!getComandoBlock(from).includes(args[0]))return reply('Este comando j√° est√°  desbloqueado')
deleteComandos(from, args[0])
reply(`O comando ${args[0]} Foi desblockeado`)
break

case 'listacomandos':
tkks = '‚ï≠‚îÄ*„Äå *COMANDOS BLOCK* „Äç\n'
for (let V of getComandoBlock(from)) {
tkks += `‚îÇ+  ${V}\n`
}
tkks += `‚îÇ+ Total : ${getComandoBlock(from).length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*„Äå *${NomeDoBot}* „Äç*‚îÄ‚îÄ‚îÄ‚îÄ`
await ayumi.sendMessage(from, tkks.trim(), extendedText, {quoted: info})
break

case 'avalie':
const avalie = body.slice(8)
if (args.length <= 1) return reply(`Exemplo: ${prefix}avalie "Bot muito bom, parab√©ns. "`)
if (args.length >= 400) return ayumi.sendMessage(from, 'M√°ximo 400 caracteres', msgType.text, {quoted: info})
var nomor = info.participant
tdptls = `[ Avalia√ß√£o ]\nDe: wa.me/${sender.split("@s.whatsapp.net")[0]}\n: ${avalie}`
var options = {
text: tdptls,
contextInfo: {
mentionedJid: [sender]
},
}
await ayumi.sendMessage(`${setting.numerodono}@s.whatsapp.net`, options, text, {quoted: info})
reply("mensagem enviada ao meu dono, obrigado pela avalia√ß√£o, iremos melhorar a cada dia.")
break

case 'bug':
const bug = body.slice(5)
if (args.length <= 1) return reply(`Exemplo: ${prefix}bug "ocorreu um erro no comando sticker"`)
if (args.length >= 800) return ayumi.sendMessage(from, 'M√°ximo 800 caracteres', msgType.text, {quoted: info})
var nomor = info.participant
teks1 = `[ Problema ]\nDe: wa.me/${sender.split("@s.whatsapp.net")[0]}\nErro ou bug: ${bug}`
var options = {
text: teks1,
contextInfo: {
mentionedJid: [sender]
},
}
await ayumi.sendMessage(`${setting.numerodono}@s.whatsapp.net`, options, text, {quoted: info})
reply("mensagem enviada ao meu dono, se enviar muitas mensagens repetida por zoueiras, voc√™ sera banido de utilizar os comandos do bot.")
break

case 'sugest√£o':
case 'sugestao':
const sugestao = body.slice(10)
if (args.length <= 1) return reply(`Exemplo: ${prefix}sugestao "Opa, crie um comando tal, que ele funcione de tal maneira, isso ser√° muito bom, n√£o s√≥ pra mim, mas pra v√°rios fazer isso.."`)
if (args.length >= 800) return ayumi.sendMessage(from, 'M√°ximo 800 caracteres', msgType.text, {quoted: info})
var nomor = info.participant
sug = `[ Sugest√µes ]\nDe: wa.me/${sender.split("@s.whatsapp.net")[0]}\n: ${sugestao}`
var options = {
text: sug,
contextInfo: {
mentionedJid: [sender]
},
}
await ayumi.sendMessage(`${setting.numerodono}@s.whatsapp.net`, options, text, {quoted: info})
reply("mensagem enviada ao meu dono, obrigado pela sugest√£o, tentar ouvir o m√°ximo poss√≠vel de sugest√µes.")
break

//==========(BAIXAR/PESQUISAS)==========\\

case 'mediafire':
if (args.length < 1) return reply('Digite o link do arquivo que deseja buscar no Mediafire')
if(!isUrl(args[0]) && !args[0].includes('mediafire')) return reply('Link invalido')
mortandela(from)
teks = args.join(' ')
const resm = await mediafireDl(teks)
result = `*„Äå  MEDIAFIRE DOWNLOAD  „Äç*

*Nome :* ${resm[0].nama}
*Tamanho :* ${resm[0].size}
*Link :* ${resm[0].link}`
reply(result)
sendFileFromUrl(resm[0].link, document, {mimetype: resm[0].mime, filename: resm[0].nama, quoted: info})
break

case 'face':
case 'facemp4':  
linkaq = args.join(" ")
mortandela(from)
face = await fetchJson(`https://api.dapuhy.ga/api/socialmedia/snapsave?url=${linkaq}&apikey=${dapuhykey}`)
if(face.error) return reply('Error!!')
getbf = await getBuffer(face.result.sd)
ayumi.sendMessage(from, getbf, video, {quoted:info, mimetype: 'video/mp4'})
break

case 'pinterest': 
if(!q) return reply(`Digite o nome da imagem que vc quer buscar\nExemplo: ${prefix + command} azul`)
mortandela(from)
pin = await hx.pinterest(q)
ac = pin[Math.floor(Math.random() * pin.length)]
buffer = await getBuffer(ac)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'gimage':
case 'googleimage':
case 'img':
if (args.length < 1) return reply('O que voc√™ deseja procurar?')
console.log(color('[DEV]', 'cyan'), color('[‚ùó] PROCURANDO A IMAGEM NO GOOGLE...', 'magenta'))
mortandela(from)
teks = args.join(' ')
res = await googleImage(teks, google)
function google(error, result){
if (error){ return reply('_[ ! ] Erro encontrado ou resultado n√£o encontrado_')}
else {
gugIm = result
random =  gugIm[Math.floor(Math.random() * gugIm.length)].url
sendFileFromUrl(random, image, {quoted: info, caption: `*Resultados da pesquisa de : * ${teks}`})
}
}
await limitAdd(sender)
break

case 'imgpralink': case 'tourl': 
const imgbbkey = imgbbb[Math.floor(Math.random() * imgbbb.length)] 
var encmedia  = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
var jnckk = await  ayumi.downloadAndSaveMediaMessage(encmedia)
var imgbb = require('imgbb-uploader')
imgbb(`${imgbbkey}`, jnckk)
.then(data => {
var caps = `‚ï≠‚îÄ„Äå IMAGEM PARA LINK „Äç\n‚îÇ\n‚îÇ‚Ä¢ ID : ${data.id}\n‚îÇ‚Ä¢ Tipo : ${data.image.mime}\n‚îÇ‚Ä¢ Extens√£o : ${data.image.extension}\n‚îÇ\n‚îÇ‚Ä¢ LINK : ${data.display_url}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
ibb = fs.readFileSync(jnckk)
ayumi.sendMessage(from, ibb, image, {quoted: info, caption: caps})
})
.catch(err => {
throw err 
})
await limitAdd(sender)
break

case 'videourl':
case 'videopralink':
case 'gerarlink':  
if ((isMedia && !dev.message.videoMessage || isQuotedImage || isQuotedVideo ) && args.length == 0) {
mortandela(from)
boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
owgi = await ayumi.downloadMediaMessage(boij)
res = await uploadd(owgi)
reply(res)
} else {
reply(`Mande uma imagem/v√≠deo com a legenda ${prefix + command}`)
}
break

case 'google':
if (!q) return reply(enviar.wrongFormat)
ss = await getBuffer(`https://api.apiflash.com/v1/urltoimage?access_key=966a90a8125c4862b276f23068b56fd6&url=https://google.com/search?q=${q}`)
mortandela(from)
if(q == undefined || q == ' ') return reply(`*Resultado da pesquisa : ${q}*`)
googleIt({ 'query': q }).then(results => {
vars = `_*Resultado da pesquisa : ${q}*_\n`
for (let i = 0; i < results.length; i++) {
vars +=  `\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n*T√≠tulo:* ${results[i].title}\n\n*Descri√ß√£o:* ${results[i].snippet}\n\n*Link:* ${results[i].link}\n\n`
}
ayumi.sendMessage(from, ss, image, {caption: vars, quoted : info})
}).catch(e => {
console.log(e)
reply(`${e}`)
})
break

case 'ytsearch':
if (args.length < 1) return reply('Cade o txt?')
const srch = args[0];
try {
var aramas = await yts(srch);
} catch {
return await ayumi.sendMessage(from, 'Error!', MessageType.text, dload)
}
aramat = aramas.all 
var tbuff = await getBuffer(aramat[0].image)
var ytresult = '';
ytresult += '„Äå *YOUTUBE* „Äç'
ytresult += '\n________________________\n\n'
aramas.all.map((video) => {
ytresult += '‚ùè Titulo: ' + video.title + '\n'
ytresult += '‚ùè Link: ' + video.url + '\n________________________\n\n'
});
ytresult += `${setting.NomeDoBot}`
await ayumi.sendMessage(from, tbuff, image, {thumbnail: fs.readFileSync('./media/ayumi.jpg'), quoted: info, caption: ytresult})
break 

case 'ytmp4':
if (!q) return reply('Use o comando juntamente com um link do youtube')
mortandela(from)
ase = await y2mateV(q).catch(e => {
reply('Erro,tente novamenteüòî')
})
vidionye = await getBuffer(ase[0].link)
await ayumi.sendMessage(from, vidionye, video, {mimetype: 'video/mp4', filename: `${ase[0].output}`, quoted: info})
break

case 'ytmp3':
if (args.length === 0) return reply(`Use assim :  *${prefix + command} [linkYt]*`)
try {
mortandela(from)
yta(args[0])
.then((res) => {
const { dl_link, thumb, title, filesizeF, filesize } = res
axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
.then((a) => {
if (Number(filesizeF) >= 30000) return sendMediaURL(from, thumb, `*Dados obtidos com sucesso!*\n\n*Titulo* : ${title}\n*Extra√ß√£o* : mp3\n*Tamanho* : ${filesizeF}\n*Link* : ${a.data}\n\n_Para tamanhos superiores a 30 MB, √© apresentado na forma de um link_`)
captions = `*„Äå YOUTUBE MP3 „Äç*\n\n*Titulo* : ${title}\n*Ext* : mp3\n*Tamanho* : ${filesizeF}\n\n_Enviando o √°udio..._`
sendMediaURL(from, thumb, captions)
sendMediaURL(from, dl_link).catch(() => reply(enviar.error.api))
})
})
} catch (err) {
reply(enviar.error.api)
}
await limitAdd(sender)
break 

case 'jooxplay':
if (args.length == 0) return reply(`Exemplo: ${prefix + command} Musica Sad`)
query = args.join(" ")
mortandela(from)
get_result = await fetchJson(`https://pencarikode.xyz/download/joox?search=${query}&apikey=pais`)
get_result = get_result.result
ini_mn1k = `Titulo : ${get_result.judul}\n`
ini_mn1k += `Dura√ß√£o : ${get_result.duration}\n`
thumbnail = await getBuffer(get_result.img_url)
await ayumi.sendMessage(from, thumbnail, image, {quoted: info, caption: ini_mn1k })
get_audio = await getBuffer(get_result.mp3_url)
await ayumi.sendMessage(from, get_audio, audio, { mimetype: 'audio/mp4', filename: `${get_result.judul}.mp3`, quoted: info, thumbnail: null})
break

case 'playstore':
if (args.length == 0) return reply(`Exemplo: ${prefix + command} telegram`)
query = args.join(" ")
get_result = await fetchJson(`https://api-gdr2.herokuapp.com/api/googleplay?q=${query}`)
get_result = get_result.result
ini_mn1k = 'Play Store Pesquisa : \n'
for (var x of get_result) {
buffer = await getBuffer(`${x.icon}`)  
ini_mn1k += `üìÑ Titulo: ${x.title}\n`
ini_mn1k += `üè¶ Empresa: ${x.developerId}\n`
ini_mn1k += `üì§ Id da empresa: ${x.appId}\n`
ini_mn1k += `ü§µüèª Criador: ${x.developer}\n`
ini_mn1k += `üìì Resumo: ${x.summary}\n`
ini_mn1k += `üåÄ Link: ${x.url}\n`
ini_mn1k += `‚õ©Ô∏è Tipo: ${x.priceText}\n`
ini_mn1k += `üìä Pontua√ß√£o: ${x.scoreText}\n`
ini_mn1k += `üîé Total de pontua√ß√£o: ${x.score}\n`
ini_mn1k += `üíµ Pre√ßo: ${x.price}\n\n`
}
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail:null, caption: `${ini_mn1k}`})
break

case 'igstalk':
if(args.length < 1) return reply('Cad√™ o nome?')
usur = args.join(" ")
teste = await fetchJson(`https://pencarikode.xyz/stalk/instagram?username=${usur}&apikey=pais`)
teste = teste.result.user
corno = `Nome : ${teste.username}\n`
corno += `PK : ${teste.pk}\n`
testebf = await getBuffer(`${teste.profile_pic_url}`)
await ayumi.sendMessage(from, testebf, image, {quoted:info, caption: `${corno}`})
break

case 'celular':
if (!q) return reply(`Qual celular voc√™ est√° procurando?`)
teks = args.join(' ')
anu = await fetchJson(`https://api-yogipw.herokuapp.com/api/search/gsmarena?query=${q}`)
const busca_celular = 
`
üìù Titulo: ${anu.judul}
‚ùó√öltima atualiza√ß√£o: ${anu.rilis}
üì± Tamanho do celular: ${anu.ukuran}
‚ö° Tipo: ${anu.type}
üóÉÔ∏è Armazenamento: ${anu.storage}
üì¥ Tela: ${anu.display}
üì≥ Polegada: ${anu.inchi}
üî∞ Resolu√ß√£o da c√¢mera: ${anu.pixel}
üì≤ Resolu√ß√£o do video: ${anu.videoPixel}
üí≠ Ram do celular: ${anu.ram}
üë§ Hardware do celular: ${anu.chipset}
‚ö†Ô∏è Bateria: ${anu.batrai}
üîã Tipo da bateria: ${anu.merek_batre}`
 wew = fs.readFileSync('./media/ayumi.jpg')
await ayumi.sendMessage(from, wew, image, {quoted: info, thumbnail:null, caption: `${busca_celular}`})
break

case '007':  
				 if (args.length < 1) return reply('*qual o nome do video par√ßa?*')
				play = args.join(" ")
				anu = await fetchJson(`https://api.zeks.xyz/api/ytplaymp4?q=${play}}&apikey=${setting.zekskey}`)
				if (anu.error) return reply(anu.error)
				///////buffer = await getBuffer(anu.result.thumbnail)
				buffer1 = await getBuffer(anu.result.url_video)
				ayumi.sendMessage(from, buffer1, video, {mimetype: 'video/mp4', filename: `${anu.result.video}.mp4`, quoted:info, caption: '...'})
					break
case '006':   
				play = body.slice(5)
				anu = await fetchJson(`https://api.zeks.xyz/api/ytplaymp3?q=${play}&apikey=apivinz`)
				if (anu.error) return reply(anu.error)		
				lagu = await getBuffer(anu.result.url_audio)
				ayumi.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', filename: `${anu.result.title}.mp3`, quoted: info})
				            
				break

case 'play':
				play = body.slice(5)
				anu = await fetchJson(`https://api.zeks.xyz/api/ytplaymp3?q=${play}&apikey=apivinz`)
				if (anu.error) return reply(anu.error)
				buffer = await getBuffer(anu.result.thumbnail)
        sendButImage(
          from,
          `opa ${pushname}`,
          `Selecione um formato abaixo`,
          buffer,
          [
            {
              buttonId: `#007 ${q}`,
              buttonText: {
                displayText: `Video`,
              },
              type: 1,
            },
            {
              buttonId:`#006 ${q}`,
              buttonText: {
                displayText: `Audio`,
              },
              type: 1,
            },
          ]
        );
        break

case 'playdoc':                 
if (args.length === 0) return reply(`Use assim *${prefix + command}* _O t√≠tulo da m√∫sica a ser pesquisada_`)
const playp = await axios.get(`https://bx-hunter.herokuapp.com/api/yt/search?query=${body.slice(10)}&apikey=Ikyy69`)
const mulaikahh = playp.data.result[0].url
try {
mortandela(from)
 yta(mulaikah)
.then((res) => {
const { dl_link, thumb, title, filesizeF, filesize } = res
axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
.then(async (a) => {
if (Number(filesize) >= 30000) return sendMediaURL(from, thumb, `‚ùè *PLAYmp3*\n\n‚ùè *Tit√∫lo* : ${title}\n‚ùè *Ext* : MP3\n*Tamanho* : ${filesizeF}\n*Link* : ${a.data}\n\n_Desculpe, a dura√ß√£o excede o limite m√°ximo, por favor clique no link acima_`)
sendFileFromUrl(dl_link, document, {mimetype: 'audio/mp3', filename: `${title}.mp3`, quoted: info,thumbnail: dfrply, contextInfo: { forwardingScore: 508, isForwarded: true, externalAdReply:{title:title,body:"",mediaType:"2",thumbnail:getBuffer(thumb),mediaUrl:mulaikah}}}).catch(() => reply(enviar.error.api))
})
})
} catch (err) {
reply(enviar.error.api)
}              
break

case 'play2':  
play2 = args.join(" ")
anu = await fetchJson(`https://api.zeks.xyz/api/ytplaymp3?q=${play2}&apikey=AriaGanzTzy`)
if (anu.error) return reply(anu.error) 
ayumi.sendMessage(from, 'Enviando sua m√∫sica, aguarde üé¨',MessageType.text, {quoted: info} )
infomp3 = `*T√≠tulo:* ${anu.result.title}\n*Fonte:* ${anu.result.source}\n*Tamanho:* ${anu.result.size}`
buffer = await getBuffer(anu.result.thumbnail) 
lagu = await getBuffer(anu.result.url_audio)
ayumi.sendMessage(from, buffer, image, {quoted: info, caption: infomp3})
ayumi.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', filename: `${anu.title}.mp3`, quoted: info, thumbnail: null})
break

case 'play3':
if (args.length < 1) return reply(`Exemplo : ${prefix}play Jo√£o e maria chico buarque`)
mortandela(from) 
apykeybysayo = 'akame'
argp = args.join(" ")
anu = await fetchJson(`https://akamer.herokuapp.com/api/yt/playmp3?query=${argp}&apikey=${apykeybysayo}`)
if (anu.error) return reply(anu.error)
infomp3 = `‚ùóMUS√çCA ENCONTRADA\n[‚ùó] enviando sua m√∫sica aguarde..`				
buffer = await getBuffer(anu.result.thumb)
ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})					
msc = await getBuffer(anu.result.url)				
ayumi.sendMessage(from, msc, audio, {mimetype: 'audio/mp4', quoted: info})
break

case 'play4': 
if (args.length < 1) return reply(`Exemplo : ${prefix + comando} Plut√£o`)	
testeki = args.join(" ")
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/yt/playmp3?query=${testeki}&apikey=apiteam`)
if (anu.error) return reply(anu.error) 
lagu = await getBuffer(anu.url)
buffer = await getBuffer(anu.thumb)
testekkzu = `üíé T√≠tulo: ${anu.titulo}\nüëæCanal: ${anu.canal}\nüì• Views: ${anu.views}\nüìù Data: ${anu.data}`
ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail:null, caption: `${testekkzu}`})		
ayumi.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: info})
break

case 'play5':  
if (args.length < 1) return reply('Qual o nome da m√∫sica?')
play = args.join(" ")
mortandela(from)
play_4 = await fetchJson(`https://api-gdr2.herokuapp.com/api/ytplay?q=${play}`)
buffer = await getBuffer(play_4.result.thumb)
lagu = await getBuffer(play_4.result.url)
ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null, caption: `${play_4.result.title}`})
ayumi.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: info})
break

case 'play6': 
if (args.length < 2) return reply(`Exemplo : ${prefix + command} m√∫sica sad, tem que conter 2 palavra `)	
testeki = args.join(" ")
mortandela(from)
anu = await fetchJson(`https://www.luc4rio-rest-api.tk/api/social/play/audio?video=${testeki}`)
if (anu.error) return reply(anu.error) 
lagu = await getBuffer(anu.Link_De_Download)
buffer = await getBuffer(anu.Imagem_Do_Video)
testekkzu = `üíé T√≠tulo: ${anu.Titulo_Encontrado}\nüëæTamanho: ${anu.Tamanho_Do_Video}\nüì• Dura√ß√£o: ${anu.Duracao_Do_Video}\nüìù Link: ${anu.Link_Do_Video}`
ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail:null, caption: `${testekkzu}`})		
ayumi.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: info})
break

case 'play7':
try{
if (!q) return reply(`Exemplo : ${prefix + command} musica`)
reply(`Espere estou a procurar sua musicaüéß`)
res = await fetchJson(`https://api-gdr2.herokuapp.com/api/ytplay?q=${q}`)
thumbnfo = `*Resultado Encontrado*
               
üìú T√≠tulo : ${res.result.title}
üåê Data : ${res.result.published}
üéûÔ∏è Views : ${res.result.views}
‚öñÔ∏è Dura√ß√£o : ${res.duration}
üé• Video Yt : ${res.url}`

buttons = [{buttonId:`${prefix}playmp4 ${res.urlyt}`,buttonText:{displayText:'üé•VIDEO'},type:1},{buttonId:`${prefix}mp3 ${res.result.url}`,buttonText:{displayText:'üéµAUDIO'},type:1}]

imageMessage = (await ayumi.prepareMessageMedia({url: res.result.thumb},'imageMessage',{thumbnail: fs.readFileSync('./media/ayumi.jpg')})).imageMessage

buttonsMessage = {
contentText: thumbnfo,
footerText:'```ayumi bot```',
imageMessage,
buttons,
headerType:4
}
inibut = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{})
ayumi.relayWAMessage(inibut)
}catch (e){
reply(`desculpe mas n√£o achei eua musica`)
console.log(e)
}
break

case 'mp3':
if(!q) return reply('?')
mortandela(from)
res = await getBuffer(`${q}`).catch(e => {
reply('_[ ! ] Erro [ ! ]_')
})
ayumi.sendMessage(from, res, audio,{mimetype: 'audio/mp4',quoted:info, thumbnail: null})
break

case 'playmp4':
addFilter(from)
if (args.length === 0) return reply(`Use assim : *${prefix + command}* _O t√≠tulo da m√∫sica_`) 
const uangsaku = Math.floor(Math.random() * 1) + 0.3
mortandela(from)
aramas = await yts(q);
aramat = aramas.all 
mulaikah = aramat[0].url      
console.log(color('[YT PLAY V√çDEO]', 'magenta'), color(`PROCURANDO O V√çDEO NO YT`, 'yellow'))       
try {
ytv(mulaikah)
.then((res) => {
const { dl_link, thumb, title, filesizeF, filesize } = res
axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
.then(async (a) => {
if (Number(filesize) >= 100000) return sendMediaURL(from, thumb, `*„Äå REPRODUZIR V√çDEOS „Äç*\n\n*Titulo* : ${title}\n*Extra√ß√£o* : MP3\n*Tamanho do arquivo* : ${filesizeF}\n*Link* : ${a.data}\n\n_Aguarde o envio do arquivo; isso pode levar alguns minutos_`)
const captions = `*„Äå REPRODUZIR V√çDEOS „Äç*\n\n*Titulo* : ${title}\n*Extra√ß√£o* : MP4\n*Tamanho* : ${filesizeF}\n*Link para dowload* : ${a.data}\n\n_Aguarde o envio do arquivo; isso pode levar alguns minutos_`
sendMediaURL(from, thumb, captions)
await sendMediaURL(from, dl_link).catch(() => reply('error'))
})                
})
} catch (err) {
reply(enviar.error.api)
}
await limitAdd(sender)
break 

case 'playmp42':
mortandela(from) 
if (args.length == 0) return reply(`Exemplo: ${prefix + command} Musica Sad`)
query = args.join(" ")
get_resullt = await fetchJson(`https://akamer.herokuapp.com/api/yt/playmp4?query=${query}&apikey=akame`)
get_result = get_resullt.result
get_video = await getBuffer(get_result.url)
ayumi.sendMessage(from, get_video, video, {mimetype: Mimetype.mp4, filename: `${get_result.title}.mp4`, quoted: info, thumbnail: null})
break

//============(CASE-BEM-VINDO‚ù¨ üèì ‚ù≠\\

case 'bemvindo':
case 'welcome':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('1 pra ligar, 0 pra desligar')
if (Number(args[0]) === 1) {
if (isWelkom) return reply('J√° esta ativo.')
welkom.push(from)
fs.writeFileSync('./lib/grupos/welkom.json', JSON.stringify(welkom))
reply('Ativou com sucesso o recurso de boas-vindas neste grupo üòâÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isWelkom) return reply('J√° esta Desativado!!')
welkom.splice(from, 1)
fs.writeFileSync('./lib/grupos/welkom.json', JSON.stringify(welkom))
reply('Desativou com sucesso o recurso de boas-vindas neste grupo üò°Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerd√£o vc em KAKKKK')
}
break


//=====================================\\



//=================(ANTS)=================\\

case 'antifake':
try {
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply(' 1 Para ativar/ 0 para desativar')
if (Number(args[0]) === 1) {
if (isAntifake) return reply('J√° est√° ativo.')
antifake.push(from)
fs.writeFileSync('./lib/ants/antifake.json', JSON.stringify(antifake))
reply('üìù Ativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntifake) return reply('J√° est√° Desativado.')  
antifake.splice(from, 1)
fs.writeFileSync('./lib/ants/antifake.json', JSON.stringify(antifake))
reply('üìù Desativou com sucesso o recurso de antifake neste grupo ‚ÄºÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'antiloc':
if (!isGroup) return reply(` SOMENTE EM GRUPOS`)
if (!isBotGroupAdmins) return reply(` O BOT PRECISA SER ADMIN`)
try {														 
if (args.length < 1) return reply('1 pra ativar, 0 pra desligar')
if (Number(args[0]) === 1) {
if(Antiloc) return reply('J√° est√° Ativo.')
antiloc.push(from)
fs.writeFileSync('./lib/ants/antiloc.json', JSON.stringify(antiloc))
reply('Ativou com sucesso o recurso de anti loc neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if(!Antiloc) return reply('J√° est√° Desativado.')
antiloc.splice(from, 1)
fs.writeFileSync('./lib/ants/antiloc.json', JSON.stringify(antiloc))
rpely('Desativou com sucesso o recurso de anti loc neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'antidocumento':
if (!isGroup) return reply(` SOMENTE EM GRUPOS`)
if (!isBotGroupAdmins) return reply(` O BOT PRECISA SER ADMIN`)
try {														 
if (args.length < 1) return reply('1 pra ativar, 0 pra desligar')
if (Number(args[0]) === 1) {
antidoc.push(from)
fs.writeFileSync('./lib/ants/antidoc.json', JSON.stringify(antidoc))
reply('Ativou com sucesso o recurso de anti documento neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
antidoc.splice(from, 1)
fs.writeFileSync('./lib/ants/antidoc.json', JSON.stringify(antidoc))
reply('Desativou com sucesso o recurso de antidocumento neste grupo‚úîÔ∏è')
 } else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'antiimg':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiImg) return reply('J√° Esta ativo')
antiimg.push(from)
fs.writeFileSync('./lib/ants/antiimg.json', JSON.stringify(antiimg))
reply('Ativou com sucesso o recurso de anti imagem neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiImg) return reply('Ja esta Desativado.')
antiimg.splice(from, 1)
fs.writeFileSync('./lib/ants/antiimg.json', JSON.stringify(antiimg))
reply('Desativou com sucesso o recurso de anti imagem neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antivideo':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiVid) return reply('Ja esta ativo')
antivid.push(from)
fs.writeFileSync('./lib/ants/antivideo.json', JSON.stringify(antivid))
reply('Ativou com sucesso o recurso de anti video neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiVid) return reply('Ja esta Desativado')
antivid.splice(from, 1)
fs.writeFileSync('./lib/ants/antivideo.json', JSON.stringify(antivid))
reply('Desativou com sucesso o recurso de anti video neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antiaudio':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiAudio) return reply('Ja esta ativo')
antiaudio.push(from)
fs.writeFileSync('./lib/ants/antiaudio.json', JSON.stringify(antiaudio))
reply('Ativou com sucesso o recurso de anti audio neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
antiaudio.splice(from, 1)
fs.writeFileSync('./lib/ants/antiaudio.json', JSON.stringify(antiaudio))
reply('Desativou com sucesso o recurso de anti audio neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'limitecaracteres':
case 'limiteflood':  
if (!isGroup) return reply(enviar.msg.adm)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar. msg.Badmin)
if (args.length < 1) return reply(`Digite ${prefix + command} 1 para ativar`)
if (Number(args[0]) === 1) {
if (isAntiFlood) return reply(`üåÄ O recurso limite de caracteres at√© ${limitefl} j√° est√° ativo no grupo üåÄ`)
antiflood.push(from)
fs.writeFileSync('./lib/usuarios/antiflood.json', JSON.stringify(antiflood))
reply(`‚úîÔ∏è O recurso limite de caracteres ${limitefl} foi ativado nesse grupoüìù`)
} else if (Number(args[0]) === 0) {
 if (!isAntiFlood) return reply('‚úîÔ∏è O recurso limite de caracteres n√£o est√° ativado no grupo üìù')
let position = false
Object.keys(antiflood).forEach((i) => {
if (antiflood[i] === from) {
position = i
}
})
if (position !== false) {
antiflood.splice(position, 1)
fs.writeFileSync('./lib/usuarios/antiflood.json', JSON.stringify(antiflood))
}
reply('O recurso limite de caracteres foi desativado nesse grupo ‚úîÔ∏è')
} else {
reply(`Digite ${prefix + command} 1 para ativar, 0 para desativar o recurso`)
}
break

case 'antilink':
if (!isGroup) return reply('S√≥ em grupo.')
if (!isGroupAdmins) return reply('Voc√™ precisa ser adm')
if (args.length < 1) return reply('Digite 1 para ativar\nDigite 0 para desativar')
if (Number(args[0]) === 1) {
if (isAntiLink) return reply('*RECURSOS ANTILINK EST√Å ATIVO*')
antilink.push(from)
fs.writeFileSync('./lib/ants/antilink.json', JSON.stringify(antilink))
reply('*Antilink ativado com sucesso ‚úì*')
await ayumi.sendMessage(from, `*Aten√ß√£o, antilink esta ativo, qualquer um que nao for adm mandar link, sera expulso do gp imediatamente.*`, text)
} else if (Number(args[0]) === 0) {
if (!isAntiLink) return reply('*J√° est√° desativado!!*')
antilink.splice(from)
fs.writeFileSync('./lib/ants/antilink.json', JSON.stringify(antilink))
reply('*Desativado com sucesso anti-link neste grupo ‚úîÔ∏è*')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antipalavr√£o':
case 'antipalavrao':  
if (!isGroup) return reply(`[‚ùó] SOMENTE EM GRUPOS`)
if (!isBotGroupAdmins) return reply(`[‚ùó] O BOT PRECISA SER ADMIN`)
if (args.length < 1) return reply(`[‚ùó] 1 / 0, Exemplo ${prefix + command} 1`)
if (Number(args[0]) === 1) {
if (isPalavr√£o) return reply('*J√° esta ativado...*')
palavr√£o.push(from)
fs.writeFileSync('./lib/grupos/palavr√£o.json', JSON.stringify(palavr√£o))
reply(`[‚ùó] anti palavr√£o ativado`)
} else if (Number(args[0]) === 0) {
if (!isPalavr√£o) return reply('*J√° esta Desativado...*')  
palavr√£o.splice(from, 1)
fs.writeFileSync('./lib/grupos/palavr√£o.json', JSON.stringify(palavr√£o))
reply(`[‚ùó] anti palavr√£o desativado...`)
} else {
reply(`[‚ùó] 1 / 0, Exemplo ${prefix + command} 0`)
}
await limitAdd(sender)
break

case 'antilinkhard':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if (Number(args[0]) === 1) {
if (isAntiLinkHard) return reply('Ja esta ativo')
antilinkhard.push(from)
fs.writeFileSync('./lib/ants/antilinkhard.json', JSON.stringify(antilinkhard))
reply('üåÄ Ativou com sucesso o recurso de antilink hardcore neste grupo üìù')
} else if (Number(args[0]) === 0) {
if (!isAntiLinkHard) return reply('Ja esta Desativado')  
antilinkhard.splice(from, 1)
fs.writeFileSync('./lib/ants/antilinkhard.json', JSON.stringify(antilinkhard))
reply('‚ÄºÔ∏è Desativou com sucesso o recurso de antilink harcore neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break  

case 'antifake':
try {
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply(' 1 Para ativar/ 0 para desativar')
if (Number(args[0]) === 1) {
if(isAntifake) return reply('J√° est√° ativo. ')  
antifake.push(from)
fs.writeFileSync('./lib/ants/antifake.json', JSON.stringify(antifake))
reply('Ativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
antifake.splice(from, 1)
fs.writeFileSync('./lib/ants/antifake.json', JSON.stringify(antifake))
if(isAntifake == 0) return reply('J√° est√° Desativado.')
reply('Desativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'vacilo':
case 'bemvindo2':  
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply(`Digite da forma correta:\nComando: ${prefix + command} 1 para ativar `)
if (Number(args[0]) === 1) {
if (isVacilo) return reply('‚ùéO recurso j√° est√° ativado no grupo‚ùé')
vacilo.push(from)
fs.writeFileSync('./lib/usuarios/vacilo.json', JSON.stringify(vacilo))
reply('‚úÖO recurso foi ativado‚úÖ')
} else if (Number(args[0]) === 0) {
if (!isVacilo) return reply('‚ùéO recurso n√£o est√° ativado no grupo‚ùé')
let position = false
Object.keys(vacilo).forEach((i) => {
if (vacilo[i] === from) {
position = i
}
})
if (position !== false) {
vacilo.splice(position, 1)
fs.writeFileSync('./lib/usuarios/vacilo.json', JSON.stringify(vacilo))
}
reply('‚ùåO recurso foi desativado‚ùå')
} else {
reply(`Digite da forma correta:\nComando: ${prefix + command} 1, para ativar e 0 para desativar`)
}
break

//==========(Sticker-Stickers)===========\\

case 'emoji':
case 'semoji':
if(!q) return reply(`Exemplo: ${prefix}emoji ‚òπÔ∏è/whatsapp`)
emot = q.split('/')[0]
jemot = q.split('/')[1]
if(jemot == 'apple'){
idemot = 0
}
else if(jemot == 'google'){
idemot = 1
}
else if(jemot == 'samsung'){
idemot = 2
}
else if(jemot == 'microsoft'){
idemot = 3
}
else if(jemot == 'whatsapp'){
idemot = 4
}
else if(jemot == 'twitter'){
idemot = 5
}
else if(jemot == 'facebook'){
idemot = 6
}
else if(jemot == 'joypixels'){
idemot = 7
}
else if(jemot == 'openmoji'){
idemot = 8
}
else if(jemot == 'emojidex'){
idemot = 9
}
else if(jemot == 'lg'){
idemot = 10
}
else if(jemot == 'htc'){
idemot = 11
}
else if(!jemot){
idemot = 4
}
else{
return reply(`Exemplo: ${prefix}emoji ‚òπÔ∏è/whatsapp`)
}
mortandela(from)
if(idemot == undefined) return
emoji.get(emot)
.then(emoji => {
console.log(emoji.images[idemot]);
sendStickerFromUrl(from,emoji.images[idemot].url, selo)
})
break

case 'rename':
if(!isPremium && !info.key.fromMe) return reply(enviar.msg.premium) 
if (!isQuotedSticker) return reply('Marque uma figurinha...')  
var namaPackss = q.substring(0, q.indexOf('/') - 0)
var authorPackss = q.substring(q.lastIndexOf('/') + 1)
texto = body.slice(7)
if (isDoubleByte(texto)) return reply('[ !  ] N√£o √© permitido letras modificadas nem emojis!!')
mortandela(from)
stiker_wm = JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
dlstiker_wm = await ayumi.downloadAndSaveMediaMessage(stiker_wm)
stickerpackid = "com.snowcorp.stickerly.android.stickercontentprovider b5e7275f-f1de-4137-961f-57becfad34f2"
packname = namaPackss;
author = authorPackss;
exif321 = getRandom('.exif')
exifst = getRandom('.webp')
googlelink = ` `;
applelink = ` `;
json = {"sticker-pack-id": stickerpackid, "sticker-pack-name": packname, "sticker-pack-publisher": author, "android-app-store-link": googlelink, "ios-app-store-link": applelink}
len = JSON.stringify(json).length
f = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00])
aaa = [0x00, 0x00, 0x16, 0x00, 0x00, 0x00]
if (len > 256) {
len = len - 256
aaa.unshift(0x01)
} else {
aaa.unshift(0x00)
}
fff = Buffer.from(aaa)
ffff = Buffer.from(JSON.stringify(json))
if (len < 16) {
len = len.toString(16)
len = "0" + len
} else {
len = len.toString(16)
}
ff = Buffer.from(len, "hex")
wm = Buffer.concat([f, ff, fff, ffff])
fs.writeFile(exif321, wm, function(err) {
if (err) return console.log(err);
exec(`webpmux -set exif ${exif321} undefined.webp -o ${exifst}`, (err) => {
if (err) return console.log(err);
ayumi.sendMessage(from, fs.readFileSync(exifst), sticker, {quoted: info})
fs.unlinkSync(exifst)
fs.unlinkSync(exif321)
fs.unlinkSync('undefined.webp')
})
});
break

case 'sc':
case 'stcirculo':
case 'circlesticker':  
const imgbbkey31 = imgbbb[Math.floor(Math.random() * imgbbb.length)]  
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
fgh = await imgbb(`${imgbbkey31}`, owgi)
imgtrg = `${fgh.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-exteam.herokuapp.com/api/circle?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
await limitAdd(sender)
break

case 'fstiker': 
case 'fsticker':
case 'f':
await limitAdd(sender)
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.webp')
await ffmpeg(`./${media}`)
.input(media)
.on('start', function (cmd) {
console.log(`Started : ${cmd}`)
})
.on('error', function (err) {
console.log(`Error : ${err}`)
fs.unlinkSync(media)
reply(enviar.stikga)
})
.on('end', function () {
console.log('Finish')
buffer = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer, sticker, {quoted: info})
fs.unlinkSync(media)
fs.unlinkSync(ran)
})
.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
.toFormat('webp')
.save(ran)
} else if ((isMedia && info.message.videoMessage.seconds < 10 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 10) && args.length == 0) {
const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.webp')
mortandela(from) 
await ffmpeg(`./${media}`)
.inputFormat(media.split('.')[1])
.on('start', function (cmd) {
console.log(`Started : ${cmd}`)
})
.on('error', function (err) {
console.log(`Error : ${err}`)
fs.unlinkSync(media)
tipe = media.endsWith('.mp4') ? 'video' : 'gif'
reply(enviar.stikga)
})
.on('end', function () {
console.log('Finish')
buffer = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer, sticker, {quoted: info})
fs.unlinkSync(media)
fs.unlinkSync(ran)
})
.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
.toFormat('webp')
.save(ran)
} else {
reply(`Enviar imagem / v√≠deo / gif com legenda \n${prefix}sticker (dura√ß√£o do adesivo de v√≠deo de 1 a 9 segundos)`)
}
break 

case 'st':
case 'sticker':
case 's':
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const media = await ayumi.downloadAndSaveMediaMessage(encmedia)
rano = getRandom('.webp')
mortandela(from)
await ffmpeg(`./${media}`)
.input(media)
.on('start', function (cmd) {
console.log(`Started : ${cmd}`)
})
.on('error', function (err) {
console.log(`Error : ${err}`)
exec(`webpmux -set exif ${addMetadata('bot','Bot')} ${rano} -o ${rano}`, async (error) => {
fs.unlinkSync(media)
reply(enviar.stick)
})
})
exec(`ffmpeg -i ${media} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${rano}`, (err) => {
fs.unlinkSync(media)
buffer = fs.readFileSync(rano)
ayumi.sendMessage(from, buffer, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else if ((isMedia && info.message.videoMessage.seconds < 11 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {
const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const media = await ayumi.downloadAndSaveMediaMessage(encmedia)
rano = getRandom('.webp')
await ffmpeg(`./${media}`)
.inputFormat(media.split('.')[1])
.on('start', function (cmd) {
console.log(`Started : ${cmd}`)
})
.on('error', function (err) {
console.log(`Error : ${err}`)
exec(`webpmux -set exif ${addMetadata('Bot', 'Ale')} ${rano} -o ${rano}`, async (error) => {
fs.unlinkSync(media)
tipe = media.endsWith('.mp4') ? 'video' : 'gif'
reply(`Falha na convers√£o de ${tipe} para sticker`)
})
})
exec(`ffmpeg -i ${media} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 200:200 ${rano}`, (err) => {
fs.unlinkSync(media)
buffer = fs.readFileSync(rano)
ayumi.sendMessage(from, buffer, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply(`Voc√™ precisa enviar ou marcar uma imagem ou v√≠deo com no m√°ximo 10 segundos`)
}
break

case 'toimg':
if (!isQuotedSticker) return reply('{ ‚ùó } *Marque a figurinha*')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.png')
exec(`ffmpeg -i ${media} ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) return reply('‚ùå Falha ao converter adesivos em imagens, n√£o converto gifs ‚ùå')
buffer = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer, image, {quoted: info, caption: 'Est√° ai, filho(a) da fruta'})
fs.unlinkSync(ran)
})
break

case 'togif':
if (!isQuotedSticker) return reply('*[ ‚ùó ] Marque a figurinha animada!*')
if ((isMedia && !info.message.videoMessage || isQuotedSticker) && args.length == 0) {
const encmediaaa = isQuotedSticker ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info
const mediaaa = await ayumi.downloadAndSaveMediaMessage(encmediaaa)
mortandela(from)
a = await webp2gifFile(mediaaa)
mp4 = await getBuffer(a.result)
await ayumi.sendMessage(from, mp4, MessageType.video, {mimetype: 'video/gif', filename: `stick.gif`, quoted: info, caption: '‚úÖ'})
fs.unlinkSync(mediaaa)
}
break

//=============(LOGOS)=============\\
//[API-DAPUHY]\\
//(Folhas-1-6)\\
case 'folha':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
var txt = encodeURI(body.slice(7))
mortandela(from)
anu = await getBuffer(`https://dapuhy-api.herokuapp.com/api/maker/nulis?text=${txt}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, anu, image, {quoted: info, thumbnail: null})
break	

case 'folha2':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
var txt = encodeURI(body.slice())
mortandela(from)
anu = await getBuffer(`https://dapuhy-api.herokuapp.com/api/maker/nuliskanan?text=${txt}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, anu, image, {quoted: info, thumbnail: null})
break	

case 'folha3':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
var txt = encodeURI(body.slice())
mortandela(from)
anu = await getBuffer(`https://dapuhy-api.herokuapp.com/api/maker/nuliskiri?text=${txt}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, anu, image, {quoted: info, thumbnail: null})
break	

case 'folha4':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
var txt = encodeURI(body.slice())
mortandela(from)
anu = await getBuffer(`https://dapuhy-api.herokuapp.com/api/maker/foliokanan?text=${txt}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, anu, image, {quoted: info, thumbnail: null})
break	

case 'folha5':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
var txt = encodeURI(body.slice())
mortandela(from)
anu = await getBuffer(`https://dapuhy-api.herokuapp.com/api/maker/foliokiri?text=${txt}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, anu, image, {quoted: info, thumbnail: null})
break
//========================================\\

case 'neondevil':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
sd = args.join(" ")
mortandela(from)
sad = await getBuffer(`https://dapuhy-api.herokuapp.com/api/textpro/neondevil?text=${sd}&apikey=${dapuhykey}`)
await ayumi.sendMessage(from, sad, image, {quoted: info, thumbnail: null})
break 

case 'show':
if(args.length < 2) return reply(`Exemplo: ${prefix + command} Sad/Tenso/Demais`)
txt = body.slice(6)
jro = txt.split("/")[0];
jru = txt.split("/")[1];
jrp = txt.split("/")[2];
mortandela(from)
tyd = await getBuffer(`https://dapuhy-api.herokuapp.com/api/photofunia/retrowave?text1=${jro}&text2=${jru}&text3=${jrp}&apikey=${dapuhykey}`, {method: 'get'})
await ayumi.sendMessage(from, tyd, image, {quoted: info, thumbnail: null})
break 

case 'bracelet':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
lvc = body.slice(10)
mortandela(from)
lop = await getBuffer(`https://dapuhy-api.herokuapp.com/api/photofunia/bracelet?text=${lvc}&apikey=${dapuhykey}`, {method: 'get'})
await ayumi.sendMessage(from, lop, image, {quoted: info, thumbnail: null})
break
//==========(FIM-DAPUHY-LOGOS)==========\\




//======================================\\

//==========(PLAQUINHAS-LOGOS)===========\\

case 'plaq': //by zanga 
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)
if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
teks = body.slice(6)
if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://raptibef.sirv.com/images%20(3).jpeg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=19%25&text.0.size=45&text.0.color=000000&text.0.opacity=55&text.0.font.family=Crimson%20Text&text.0.font.weight=300&text.0.font.style=italic&text.0.outline.opacity=21`)
ayumi.sendMessage(from, buffer, image, {sendEphemeral: true, quoted: selo, thumbnail: null, caption: ' *Plaquinha feita ‚úì* '})
break

case 'plaq2': //by zanga 
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)
if (args.length < 1) return reply(`${prefix}plaq2 e digite o seu nome`)
teks = body.slice(7)
if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://raptibef.sirv.com/images%20(1).jpeg?profile=Zanga%202.0&text.0.text=${teks}`)
await ayumi.sendMessage(from, buffer, image, {sendEphemeral: true, quoted: selo, thumbnail: null, caption: ' *Plaquinha feita ‚úì* '})
break

case 'plaq3': //by zanga
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)
if (args.length < 1) return reply(`${prefix}plaq3 e digite o seu nome`)
teks = body.slice(7)
if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://raptibef.sirv.com/images.jpeg?profile=Zanga%203.0&text.0.text=${teks}&text.0.outline.blur=63`)
await ayumi.sendMessage(from, buffer, image, {sendEphemeral: true, quoted: selo, thumbnail: null, caption: ' *Plaquinha feita ‚úì* '})
break

case 'plaq4':
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)  
if (args.length < 1) return reply(`${prefix}plaq7 e digite o seu nome`)
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://umethroo.sirv.com/Torcedora-da-sele%C3%A7%C3%A3o-brasileira-nua-mostrando-a-bunda-236x300.jpg?text.0.text=${teks}&text.0.position.x=-64%25&text.0.position.y=-39%25&text.0.size=25&text.0.color=1b1a1a&text.0.font.family=Architects%20Daughter`) //api
plaq = ` *Plaquinha feita ‚úì* `
await ayumi.sendMessage(from, buffer, image, {caption: plaq, quoted: selo, thumbnail: null, sendEphemeral:true})
break

case 'plaq5':
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)  
if (args.length < 1) return reply(`${prefix}plaq10 e digite o seu nome`)
teks = body.slice(7)
if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://umethroo.sirv.com/peito1.jpg?text.0.text=${teks}&text.0.position.x=-4%25&text.0.position.y=-6%25&text.0.size=14&text.0.color=000000&text.0.font.family=Shadows%20Into%20Light&text.0.font.weight=700`)
await ayumi.sendMessage(from, buffer, image, {sendEphemeral: true, quoted: selo, thumbnail: null, caption: ' *Plaquinha feita ‚úì* '})
break

case 'plaq4off': //by zanga
if (!isNsfw) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}nsfw 1`)
if (args.length < 1) return reply(`${prefix}plaq4 e digite o seu nome`)
teks = body.slice(7)
if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
mortandela(from) //mensagem
buffer = await getBuffer(`https://raptibef.sirv.com/images%20(2).jpeg?profile=Zanga%204.0&text.0.text=${teks}`)
await ayumi.sendMessage(from, buffer, image, {sendEphemeral: true, quoted: selo, thumbnail: null, caption: ' *Plaquinha feita ‚úì* '})
break

case 'placaloli':
if (!q) return reply(enviar.wrongFormat)
reply('Aguarde..')
lod = await fetchJson(`https://nekobot.xyz/api/imagegen?type=kannagen&text=${q}`)
sendStickerFromUrl(from, lod.message, enviar.success)
await limitAdd(sender)
break 

//=======================================\\

//========(HENTAIS)======\\

case 'solo':
try {

   
res = axios.get(`https://nekos.life/api/v2/img/solo`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 

case 'nsfwconn':
try {

   
res = axios.get(`https://waifu.pics/api/sfw/conn`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'ero':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/ero`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'erofeet':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/erofeet`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 

case 'memeotakus':
try {
data = await fetchJson(`https://fdciabdul.tech/api/pinterest/?keyword=memes de anime`, {method: 'get'})
n = JSON.parse(JSON.stringify(data));
nimek = n[Math.floor(Math.random() * n.length)];
pok = await getBuffer(nimek)
ayumi.sendMessage(sender, pok, image, {quoted: selo3, caption: `*....*`})
} catch {
reply(`....`)
}
break 

case 'bcstik':
case 'bcfig':
if (!isOwner) return reply('Quem √© Voc√™, Voc√™ n√£o √© meu dono ???')
if (!isQuotedSticker) return reply('Marque uma figurinha!!!')
bcsticker = await ayumi.chats.all()
if (isMedia && !mek.message.videoMessage || isQuotedSticker) {
const encmedia = isQuotedSticker ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
bc = await ayumi.downloadMediaMessage(encmedia)
for (let _ of bcsticker) {
ayumi.sendMessage(_.jid, bc, sticker) 
}
reply(`Figurinha envianda para: ${totalchat.length} chats`)
}
break 

case 'spank':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/spank`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'feet':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/feet`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'classic':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/classic`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'holoero':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/holoero`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'cum':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/cum_jpg`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'eroyuri':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/eroyuri`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'eron':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/eron`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'pwankg':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/pwankg`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'anal':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/anal`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'lewd':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/lewd`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'lewdkemo':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/lewdkemo`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'solog':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/solog`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'lewdk':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/lewdk`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 



case 'blowjob':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/blowjob`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'hentai':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/hentai`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'hololewd':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/hololewd`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'trap':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/trap`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'les':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/les`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'smallboobs':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/smallboobs`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'futanari':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/futanari`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'femdom':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/femdom`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case 'feed':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/feed`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case'erok':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/erok`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case'feetg':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/feetg`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 


case'erokemo':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/erokemo`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 

case'boobs':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/boobs`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 

case 'pussy':

try {

   
axios.get('https://nekos.life/api/v2/img/pussy_jpg').then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
e = String(e)
if (!e.includes("marker was not found")) {
reply('[‚ùå] deu error ao enviar o hentai üòû')
} 
}
await limitAdd(sender)
break 

                                         
                

//GIFS
case 'ngif':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/ngif`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.video, {mimetype: 'video/gif', quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break 

case 'smug':

try {

   
res = axios.get(`https://nekos.life/api/v2/img/smug`).then(res => {
imageToBase64(res.data.url)
.then(
(ress) => {
var buf = Buffer.from(ress, 'base64')
ayumi.sendMessage(sender, buf, MessageType.image, {quoted: selo})
})
})
} catch (e) {
if(console.log == "marker was not found")
reply('‚ùåocorreu um erro‚ùå\n\nTente novamente. ')
}
await limitAdd(sender)
break

//=========(API-Team-Of-LOGOS)==========\\
case 'thunder':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
vd = body.slice(9)
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/thunder?apikey=apiteam&texto=${vd}`)
buffer = await getBuffer(anu.resultado)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'thunderv2':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
teks = body.slice(11)
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/thunderv2?apikey=apiteam&texto=${teks}`)
buffer = await getBuffer(anu.resultado)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'transformer':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
tv = body.slice(13)
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/transformer?apikey=apiteam&texto=${tv}`)
buffer = await getBuffer(anu.resultado)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'grafity':
if(args.length < 2) return reply(`Exemplo: ${prefix + command} sad/demais`)
txt = body.slice(9)
teks1 = txt.split("/")[0];
teks2 = txt.split("/")[1];
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/graffiti?apikey=apiteam&texto1=${teks1}&texto2=${teks2}`)
buffer = await getBuffer(anu.resultado)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'toxic':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
teks = body.slice(7)
mortandela(from)
anu = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/toxic?apikey=apiteam&texto=${teks}`)
buffer = await getBuffer(anu.resultado)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break

case 'demongreen':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
tdt = args.join(" ")
mortandela(from)
hgf = await fetchJson(`https://api-team-of-hero.herokuapp.com/api/textpro/demon?apikey=apiteam&texto=${tdt}`) 
dtd = await getBuffer(hgf.resultado)
await ayumi.sendMessage(from, dtd, image, {quoted: info, thumbnail: null})
break
//========(FIM-Team-Of-LOGOS)==========\\


//‚ù¨ üèì ‚ù≠API-LEYSCODERS-LOGOS)========\\
case 'crossfire': 
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
jdf = args.join(" ")
mortandela(from)
jr = await fetchJson(`https://leyscoders-api.herokuapp.com/api/textmaker/crossfire?q=${jdf}&apikey=dappakntlll`)
int = await getBuffer(jr.result.url)
await ayumi.sendMessage(from, int, image, {quoted: info, thumbnail: null})
break
//‚ù¨ üèì ‚ù≠FIM-LEYSCODERS-LOGOS)========\\


//========(API-DOCS-JOJO-LOGOS‚ù¨ üèì ‚ù≠\\
case 'logogame':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
mortandela(from)
game = await getBuffer(`http://docs-jojo.herokuapp.com/api/gaming?text=${body.slice(10)}`)
await ayumi.sendMessage(from, game, image, {quoted: info, thumbnail: null})
break

case 'neon3': 
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`http://docs-jojo.herokuapp.com/api/neon_light?text=${txt}`)
await ayumi.sendMessage(from, buffer, image, {caption: 'est√° ai', quoted: info, thumbnail: null})
break 
//========(FIM-DOCS-JOJO-LOGOS‚ù¨ üèì ‚ù≠\\


//==========(API-H4CK3RS-LOGOS)==========\\
case 'goldplay':
case 'silverplay':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`https://h4ck3rs404-api.herokuapp.com/api/${command}?text=${txt}&apikey=404Api`)
await ayumi.sendMessage(from, buffer, image, {caption: 'Est√° ai', quoted: info, thumbnail: null})
break 
//===========(FIM-H4CK3RS-LOGOS)==========\\


//========(API-PENCARIKODE-LOGOS‚ù¨ üèì ‚ù≠\\
case 'jokerlogo':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} sad`)
jkr = body.slice(11)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/joker?text=${jkr}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'space':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/Demais`)
txt = body.slice(7)
ytb = txt.split("/")[0];
ytbs = txt.split("/")[1];
mortandela(from)
spc = await getBuffer(`https://pencarikode.xyz/api/textpro/space-3d?text=${ytb}&text2=${ytbs}&apikey=pais`)
await ayumi.sendMessage(from, spc, image, {quoted: info, thumbnail: null})
break

case 'neve':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
ldw = body.slice(6)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/xmas?text=${ldw}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'neon':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/neon-light?text=${txt}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break 

case 'horror':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/horror?text=${txt}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {caption: 'est√° ai', quoted: info, thumbnail: null})
break

case 'stone':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/Demais`)
txt = body.slice(7)
jrr = txt.split("/")[0];
jrr1 = txt.split("/")[1];
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/stone-text?text=${jrr}&text2=${jrr1}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break 

case 'break':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/break-wall?text=${txt}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {caption: 'est√° ai', quoted: info, thumbnail: null})
break 

case 'halloween':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = args.join(" ")
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/halloween?text=${txt}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {caption: 'est√° ai', quoted: info, thumbnail: null})
break 

case 'vidro':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
lpr = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/dropwater?text=${lpr}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break 

case 'carbon': 
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
sda = body.slice(8)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/glossy-carbon?text=${sda}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'metalblue':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
dki = body.slice(10)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/glossy-blue?text=${dki}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'pink':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
erl = body.slice(6)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/holographic-3d?text=${erl}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break 

case 'colaq':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
dfk = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/glue-text?text=${dfk}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'ossos':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
loi = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/skeleton?text=${loi}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'blood':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
dps = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/blood?text=${dps}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'areia':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
sdp = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/sand-engraved?text=${sdp}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'natal':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
lkl = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/christmas?text=${lkl}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'style':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
oip = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/1917-style?text=${oip}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'pornhub': 
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/Demais`)
txt = body.slice(9)
jrr = txt.split("/")[0];
jrr1 = txt.split("/")[1];
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/phub?text=${jrr}&text2=${jrr1}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break 

case 'larva':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
qui = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/lava?text=${qui}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'luxury':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
lx = body.slice(8)
mortandela(from)
jr = await getBuffer(`https://pencarikode.xyz/api/textpro/luxury?text=${lx}&apikey=pais`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'steel':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/Demais`)
txt = body.slice(7)
jrr = txt.split("/")[0];
jrr1 = txt.split("/")[1];
mortandela(from)
buffer = await getBuffer(`https://pencarikode.xyz/api/textpro/steel?text=${jrr}&text2=${jrr1}&apikey=pais`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break
//========(FIM-PENCARIKODE-LOGOS)======\\


//============(API-GDR2-LOGOS)===========\\
case 'placa': 
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
jld = body.slice(7)
mortandela(from)
jr = await getBuffer(`https://api-gdr2.herokuapp.com/api/mudeminhaopiniao?text=${jld}`)
await ayumi.sendMessage(from, jr, image, {quoted: info, thumbnail: null})
break

case 'comentariol': 
case 'coment√°riol':
txt = body.slice(13)
jrr = txt.split("/")[0];
jrr1 = txt.split("/")[1];
mortandela(from)
buffer = await getBuffer(`https://api-gdr2.herokuapp.com/api/youtubecomment?user=${jrr}&text=${jrr1}&avatar=https://i.ibb.co/BGF5ddc/8a1b991f4918.jpg`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break 

case 'comporn':
if(args.length < 5) return reply(`Exemplo: ${prefix + command} Pedro/Sou Gay`)
txt = body.slice(9)
jrr = txt.split("/")[0];
jrr1 = txt.split("/")[1];
mortandela(from)
buffer = await getBuffer(`https://api-gdr2.herokuapp.com/api/phubtext?user=${jrr}&texto=${jrr1}&img=https://i.ibb.co/BGF5ddc/8a1b991f4918.jpg`)
await ayumi.sendMessage(from, buffer, image, {quoted: info, thumbnail: null})
break 

case 'flower':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad`)
txt = body.slice(8)
mortandela(from)
post = await fetchJson(`https://api-gdr2.herokuapp.com/api/textmaker/alam?text=${txt}&theme=flower`)
send = await getBuffer(post.result.url)
await ayumi.sendMessage(from, send, image, {quoted: info, thumbnail: null})
break

case 'batle':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/demais`)
txt = body.slice(7)
teks = txt.split("/")[0];
teks2 = txt.split("/")[1];
mortandela(from)
post = await fetchJson(`https://api-gdr2.herokuapp.com/api/textmaker/game?text=${teks}&text2=${teks2}&theme=battlefield`)
send = await getBuffer(post.result.url)
await ayumi.sendMessage(from, send, image, {quoted: info, thumbnail: null})
break

case 'pubg':
if(args.length < 1) return reply(`Exemplo: ${prefix + command} Sad/demais`)
txt = body.slice(6)
teks = txt.split("/")
teks2 = txt.split("/")
mortandela(from)
post = await fetchJson(`https://api-gdr2.herokuapp.com/api/textmaker/game?text=${teks}&text2=${teks2}&theme=pubg`)
send = await getBuffer(post.result.url)
await ayumi.sendMessage(from, send, image, {quoted: info, thumbnail: null})
break
//=============(FIM-GDR2-LOGOS)===========\\

//============(LOGOS-SEM-API)===========\\
case 'gold':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pGold(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'romantic':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pRomantic(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'wooden':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pWooden(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'madeira':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pMadeira(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'coffe2':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pCoffe2(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'neon2':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pNeon2(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case '8bit':
if (args.length < 1) return reply('onde est√° o texto?')
tdp = body.slice(6)
if(tdp.length < 5) return reply(`Utilize assim ${prefix + command} sad/sad`) 
p8Bit(args.join(' ').split('/')[0], args.join(' ').split('/')[1])
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'love':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pLoveMsg(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'coffe':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pCoffeCup(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'neon2':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pNeon2(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'copo':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pCup(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'america':
case 'escudo':  
if(args.length < 1) return reply(`Utilize assim ${prefix + command} sad/sad`) 
pCaptain(args.join(' ').split('/')[0], args.join(' ').split('/')[1])
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'glitch':
tdp = body.slice(8)
if(tdp.length < 5) return reply(`Utilize assim ${prefix + command} sad/sad`) 
pGlitch(args.join(' ').split('/')[0], args.join(' ').split('/')[1])
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'googlesg':
case 'googlelogo': 
tdt = args.join(" ")
if(tdt.length < 7) return reply(`Utilize assim ${prefix + command} sad/sad/sad`) 
pGooglesg(args.join(' ').split('/')[0], args.join(' ').split('/')[1], args.join(' ').split('/')[2])
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'butterfly':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pButterfly(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'fire':
frp = body.slice(6)
if (frp.length < 3) return reply(`onde est√° o texto?, Exemplo: ${prefix + command} sad`)
mortandela(from)
pFogo(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'shadow':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pShadow(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'grass':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pMsgGrass(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'narutologo':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pNaruto(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break

case 'metalgold':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pOuro(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break 

case 'cemiterio':
case 'cemit√©rio': 
if (!q) return reply('onde est√° o texto?')
pSemi(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break 

case 'papel':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pBurnPapper(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break 

case 'lobometal':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pAwolfMetal(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break 

case 'harryp':
if (args.length < 1) return reply('onde est√° o texto?')
mortandela(from)
pHarryPotter(`${q}`)
.then(res => {
console.log(res) 
sendMediaURL(from, res.url)
})
break 

//========(SORTEIO-VOTAR-CASES‚ù¨ üèì ‚ù≠\\

case 'delvote':
case 'delvoto':  
if(!info.key.remoteJid) return
delVote(from)
reply('vota√ß√£o deletada com sucesso')
break

case 'votar':
case 'votacao': 
case 'vota√ß√£o': 
if(!isGroup) return reply(enviar.msg.group)
if(!budy.includes("/")) return reply(`Cade a /, exemplo ${prefix}vota√ß√£o @marca/Ele √© total gay/ 1`)
if(!q) return reply('*Vota√ß√£o*\n\n'+ prefix+ 'votar @tag marcar / pergunta  / 1 (1 = 1 Minuto)')
if (info.message.extendedTextMessage.contextInfo.mentionedJid.length > 0 || info.message.extendedTextMessage.contextInfo == null) {
let id = info.message.extendedTextMessage.contextInfo.mentionedJid[0]
split = args.join(' ').replace('@', '').split('/')
if(!Number(split[2])) return reply('cade os minutos eim?\n\n1 = 1 Minuto')
await mentions('Vote ' +'@'+ id.split('@')[0]+' para' +'\n\n' + `voto = ‚úÖ\ndevoto = ‚ùå\n\npergunta: ${split[1]}`,[id],true)
addVote(from,split[1],split[0],split[2],reply)
}
break

case 'infosorteio':
case 'helpsorteio':  
await ayumi.sendMessage(from, infosorteio(prefix), text, {quoted: selo})
break

case 'sorteio':
try{
if(!isGroup) return reply(enviar.msg.grupo)
if(!q) return reply(`Coloque algo, ap√≥s o comando sorteio, por exemplo, ${prefix}sorteio de 100 R$`)
d = []
teks = `üéâParab√©ns, por ganhar o sorteio ${q}:\n\n`
for(i = 0; i < 1; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `üî•·çù‚Éü¬†¬†‚û£ @${groupMembers[r].jid.split('@')[0]}\n`
d.push(groupMembers[r].jid)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'sorteionumero':
case 'sorteionumeros':  
try{
if(!isGroup) return reply(enviar.msg.grupo)
if(!q) return reply(`Coloque algo, ap√≥s o comando sorteio, por exemplo, ${prefix}sorteionumero de 100 R$`)
var numerossrt = sortear[Math.floor(Math.random() * sortear.length)] 
d = []
teks =  `üéâParab√©ns ao n√∫mero do sortudo, por ganhar o sorteio ${q}:\n\n`
for(i = 0; i < 1; i++) {
teks += `üî•·çù‚Éü¬†¬†‚û£ ${numerossrt}\n`
d.push(numerossrt)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break
//======================================\\



//==========(TTPS/ATTP/TTM)============\\

case 'attp':
if (args.length == 0) return reply(`Exemplo: ${prefix + command} Sad`)
mortandela(from)
buffer = await getBuffer(`https://api.xteam.xyz/attp?file&text=${encodeURI(q)}`)
await ayumi.sendMessage(from, buffer, sticker, { quoted: info})
break

case 'attp2':		
case 'attp3': 
case 'attp4':
case 'attp5': 
case 'attp6':  
if (args.length < 1) return reply(`_Coloque o texto _\n\n*Exemplo ${prefix}attp Sad`)
mortandela(from)
url = await getBuffer(`http://brizas-api.herokuapp.com/ttp/${command}?apikey=brizaloka&text=${encodeURI(q)}`)
await ayumi.sendMessage(from, url, sticker, {quoted: info})
break	

case 'ttp':
if (args.length < 1) return reply(`cad√™ o texto mano?\nexemplo ${prefix + command} sad`)
mortandela(from)
const cor = ["f702ff","ff0202","00ff2e","efff00","00ecff","3100ff","ffb400","ff00b0","00ff95","efff00"] //CORES COLOQUE QUALQUER UMA MAS EM CODE
const fonte = ["Days%20One","Domine","Exo","Fredoka%20One","Gentium%20Basic","Gloria%20Hallelujah","Great%20Vibes","Orbitron","PT%20Serif","Pacifico"]//FONTS N√ÉO MEXA
sayo = cor[Math.floor(Math.random() * (cor.length))]	 				 
sayo2 = fonte[Math.floor(Math.random() * (fonte.length))]	 		
sayo = `https://huratera.sirv.com/PicsArt_0-01-10.00.42.png?profile=Example-Text&text.0.text=${encodeUrl(body.slice(5))}&text.0.outline.color=000000&text.0.outline.blur=0&text.0.outline.opacity=55&text.0.color=${sayo}&text.0.font.family=${sayo2}&text.0.background.color=ff0000` 
sendStickerFromUrl(from, sayo)
await limitAdd(sender)
break

case 'ttm':
if (args.length < 1) return reply('Cad√™ o  txt mano?')
but = args.join(" ")
mortandela(from)
anu = await getBuffer(`https://api-gdr2.herokuapp.com/api/ttpmaker?texto=${but}&cor=f0f&fonte=1`, {method: 'get'})
await ayumi.sendMessage(from, anu, image, {quoted: info})
break 

case 'ttm2':
if (args.length < 1) return reply('Cad√™ o  txt mano?')
buq = args.join(" ")
mortandela(from)
anu = await getBuffer(`https://api-gdr2.herokuapp.com/api/ttpmaker?texto=${buq}&cor=ff0&fonte=7`, {method: 'get'})
await ayumi.sendMessage(from, anu, image, {quoted: info})
break  

case 'ttm3':
if (args.length < 1) return reply('Cad√™ o  txt mano?')
bud = args.join(" ")
mortandela(from)
anu = await getBuffer(`https://api-gdr2.herokuapp.com/api/ttpmaker?texto=${bud}&cor=0ff&fonte=3`, {method: 'get'})
await ayumi.sendMessage(from, anu, image, {quoted: info})
break  

case 'ttm4':
if (args.length < 1) return reply('Cad√™ o  txt mano?')
bup = args.join(" ")
mortandela(from)
anu = await getBuffer(`https://api-gdr2.herokuapp.com/api/ttpmaker?texto=${bup}&cor=0ff&fonte=6`, {method: 'get'})
await ayumi.sendMessage(from, anu, image, {quoted: info})
break  

//======================================\\



//===(ZOUEIRAS/BRINCADEIRAS/HUMOR)===\\

case 'modonsfw':
case 'nsfw':  
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isNsfw) return reply('O modo nsfw j√° est√° ativo')
nsfw.push(from)
fs.writeFileSync('./lib/grupos/nsfw.json', JSON.stringify(nsfw))
reply(`\`\`\`‚úìAtivado com sucesso o modo nsfw +18 no grupo\`\`\` *${groupMetadata.subject}*`)
} else if (Number(args[0]) === 0) {
if (!isNsfw) return reply('O modo nsfw j√° est√° Desativado')  
nsfw.splice(from, 1)
fs.writeFileSync('./lib/grupos/nsfw.json', JSON.stringify(nsfw))
reply(`\`\`\`‚úìModo Nsfw +18 desativado com sucesso no grupo\`\`\` *${groupMetadata.subject}*`)
} else {
reply('1 para ativar, 0 para desligar')
}
break 

case 'modobrincadeira':
case 'modobrincadeiras':  
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isModobn) return reply('o modobrincadeira j√° est√° ativo')
modobn.push(from)
fs.writeFileSync('./lib/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úìAtivado com sucesso o modobrincadeiras no grupo\`\`\` *${groupMetadata.subject}*`)
} else if (Number(args[0]) === 0) {
if (!isModobn) return reply('o modobrincadeira j√° est√° Desativado')  
modobn.splice(from, 1)
fs.writeFileSync('./lib/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úìModo brincadeiras desativado com sucesso no grupo\`\`\` *${groupMetadata.subject}*`)
} else {
reply('1 para ativar, 0 para desligar')
}
break 

case 'fazernick': 
teks = body.slice(11)
send = await fetchJson(`http://brizas-api.herokuapp.com/gerador/fancytext?apikey=brizaloka&text=${teks}`)
teks = ` üßôüèª‚Äç‚ôÇÔ∏èNICKS GERADOS COM SUCESSO!üßôüèª‚Äç‚ôÇÔ∏è
üçôPrimeiro ${send.random_1} 
üçôSegundo ${send.random_2} 
üçôT√©rceiro ${send.random_3} 
üçôQuarto ${send.random_4} 
üçôQuinto ${send.random_5}
 
   üëæEXTRASüëæ
 üëæ${send.squares}
 üëæ${send.inverted_squares}
 üëæ${send.italic}
 üëæ${send.bold}
 üëæ${send.future_alien}
 üëæ${send.asian_1}
 üëæ${send.asian_2}
 üëæ${send.squiggle}
 üëæ${send.squiggle_2}
 üëæ${send.squiggle_3}
 üëæ${send.squiggle_4}
 üëæ${send.neon}
 
 
‚û£    ‚ñâ‚ïë‚ñà‚ñê‚ñâ‚ñâ‚ñê‚ñê‚ñç‚ñà‚ïë‚ñç‚ñâ‚ñè‚ñç‚ñç
‚û£    ‚ñâ‚ïë‚ñà‚ñê‚ñâ‚ñâ‚ñê‚ñê‚ñç‚ñà‚ïë‚ñç‚ñâ‚ñè‚ñç‚ñç
    
    ¬© ${setting.NomeDoBot}
 `
ayumi.sendMessage(from, teks, text, {quoted: info})
break

case 'chance':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
ayumi.updatePresence(from, Presence.composing)
var avb = body.slice(7)
if (args.length < 1) return ayumi.sendMessage(from, `Voc√™ precisa digitar da forma correta\nExemplo: ${prefix}chance do luuck ser gay`, text, {quoted: info})
random = `${Math.floor(Math.random() * 100)}`
hasil = `A chance ${body.slice(8)}\n\n√© de... ${random}%`
await ayumi.sendMessage(from, hasil, text, {quoted: info, contextInfo: {mentionedJid: [sender]}
})
break

case 'gay':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(5)
reply(' ‚ù∞ Pesquisando a sua ficha de gay : '+rate+' aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imggay}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
feio = random
boiola = random
if (boiola < 20 ) {bo = 'hmm... voc√™ √© heteroüòî'} else if (boiola == 21 ) {bo = '+/- boiola'} else if (boiola == 23 ) {bo = '+/- boiola'} else if (boiola == 24 ) {bo = '+/- boiola'} else if (boiola == 25 ) {bo = '+/- boiola'} else if (boiola == 26 ) {bo = '+/- boiola'} else if (boiola == 27 ) {bo = '+/- boiola'} else if (boiola == 2 ) {bo = '+/- boiola'} else if (boiola == 29 ) {bo = '+/- boiola'} else if (boiola == 30 ) {bo = '+/- boiola'} else if (boiola == 31 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 32 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 33 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 34 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 35 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 36 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 37 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 3 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 39 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 40 ) {bo = 'tenho minha desconfian√ßa...üòë'} else if (boiola == 41 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 42 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 43 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 44 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 45 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 46 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 47 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 4 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 49 ) {bo = 'voc√™ √© n√©?üòè'} else if (boiola == 50 ) {bo = 'voc√™ √© ou n√£o?üßê'} else if (boiola > 51) {bo = 'voc√™ √© gayüôà'
}
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: '  O quanto voc√™ √© gay? \n\n „Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù± gay üè≥Ô∏è‚Äçüåà\n\n '+bo+' ', thumbnail:null})
}, 7000)
break

case 'menu':
   uptime = process.uptime()
               buttons = [{buttonId: `#buybot`,buttonText:{displayText: 'Buy bot'},type:1}, {buttonId: `#ping`,buttonText:{displayText: 'Ping'},type:1}]

               imageMsg = (await ayumi.prepareMessageMedia(fs.readFileSync(`./media/hamsil.jpg`), 'imageMessage', {thumbnail: fs.readFileSync(`./media/hentai.jpg`)})).imageMessage

               buttonsMessage = {
               contentText: `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ    ‚ù¨ü¶ä‚ù≠  ùóú   ùó°  ùóô  ùó¢     ‚ù¨ü¶ä‚ù≠  
‚ï∞‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ïØ
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚û¢ üç® …¥…™·¥Ñ·¥ã : ${pushname}
‚îÇ‚û¢ üìà  ü·¥á·¥†·¥á ü : ${getLevelingLevel(sender)}
‚îÇ‚û¢ üîã x·¥ò : ${getLevelingXp(sender)}
‚îÇ‚û¢ üåå  Ä·¥Ä…¥·¥ã : ${patt}
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ    ‚ù¨ üîñ‚ù≠  ùóï   ùó¢   ùóß     ‚ù¨ üîñ‚ù≠  
‚ï∞‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ïØ
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚û¢ ‚ô®Ô∏è ·¥ò Ä·¥á“ì…™x·¥è : #
‚îÇ‚û¢ ü™ê ·¥ò·¥Ä Ä·¥Ñ·¥á…™ Ä·¥ès : *Kaue*
‚îÇ‚û¢ üåô ·¥Ñ Ä…™·¥Ä·¥Ö·¥è Ä : *Sacole*
‚îÇ‚û¢ ‚òÑÔ∏è ·¥Ä·¥õ…™·¥†·¥Ä ·¥Ä : *${kyun(uptime)}*
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
*‚îÇ  ‚ù¨üí´‚ù≠  G R U P O  ‚ù¨üí´‚ù≠  *
‚ï∞‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ïØ
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚û¢ ${prefix}infopalavr√£o
‚îÇ‚û¢ ${prefix}infolistanegra
‚îÇ‚û¢ ${prefix}infobancarac
‚îÇ‚û¢ ${prefix}infovota√ß√£o
‚îÇ‚û¢ ${prefix}infocontador
‚îÇ‚û¢ ${prefix}infosorteio
‚îÇ‚û¢ ${prefix}infobot
‚îÇ‚û¢ ${prefix}bug (questione)
‚îÇ‚û¢ ${prefix}avalie (o quao bom)
‚îÇ‚û¢ ${prefix}sugestao (dica)
‚îÇ‚û¢ ${prefix}kick [@] (pra-remover) 
‚îÇ‚û¢ ${prefix}ban (responder-mensagem)
‚îÇ‚û¢ ${prefix}promover [@] (promover a adm)
‚îÇ‚û¢ ${prefix}rebaixar [@] (rebaixar adm)
‚îÇ‚û¢ ${prefix}totag (menciona-algo)
‚îÇ‚û¢ ${prefix}grupo f/a
‚îÇ‚û¢ ${prefix}nomegp (Nome)
‚îÇ‚û¢ ${prefix}status
‚îÇ‚û¢ ${prefix}limpar (texto-invis–£¬≠vel-gp)
‚îÇ‚û¢ ${prefix}atividades (DO-GRUPO)
‚îÇ‚û¢ ${prefix}linkgp
‚îÇ‚û¢ ${prefix}grupoinfo
‚îÇ‚û¢ ${prefix}hidetag (txt) (marca–£–á–£–Éo)
‚îÇ‚û¢ ${prefix}marcar (marca tds do gp)
‚îÇ‚û¢ ${prefix}anagrama 1 / 0
‚îÇ‚û¢ ${prefix}antidocumento 1 / 0  
‚îÇ‚û¢ ${prefix}antiloc 1 / 0  
‚îÇ‚û¢ ${prefix}antilink 1 / 0
‚îÇ‚û¢ ${prefix}antilinkhard 1 / 0
‚îÇ‚û¢ ${prefix}antifake 1 / 0
‚îÇ‚û¢ ${prefix}bemvindo 1 / 0
‚îÇ‚û¢ ${prefix}antiimg 1 / 0
‚îÇ‚û¢ ${prefix}antiaudio 1 / 0
‚îÇ‚û¢ ${prefix}antivideo 1 / 0
‚îÇ‚û¢ ${prefix}leveling 1 / 0  
‚îÇ‚û¢ ${prefix}simih 1 / 0
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä H E N T A I S ü¶ä‚ù≠*
‚îÇ‚û¢ Calma adm q o bot envia no pv kkkk
‚îÇ‚û¢ ${prefix}holo
‚îÇ‚û¢ ${prefix}solo (o melhor)
‚îÇ‚û¢ ${prefix}ero
‚îÇ‚û¢ ${prefix}erofeet
‚îÇ‚û¢ ${prefix}spank
‚îÇ‚û¢ ${prefix}feet
‚îÇ‚û¢ ${prefix}classic
‚îÇ‚û¢ ${prefix}holoero
‚îÇ‚û¢ ${prefix}cum
‚îÇ‚û¢ ${prefix}eroyuri
‚îÇ‚û¢ ${prefix}eron
‚îÇ‚û¢ ${prefix}pwankg
‚îÇ‚û¢ ${prefix}anal
‚îÇ‚û¢ ${prefix}lewd
‚îÇ‚û¢ ${prefix}lewdkemo
‚îÇ‚û¢ ${prefix}solog
‚îÇ‚û¢ ${prefix}lewdk
‚îÇ‚û¢ ${prefix}blowjob
‚îÇ‚û¢ ${prefix}hentai_
‚îÇ‚û¢ ${prefix}hololewd
‚îÇ‚û¢ ${prefix}trap
‚îÇ‚û¢ ${prefix}les
‚îÇ‚û¢ ${prefix}smallboobs
‚îÇ‚û¢ ${prefix}futanari
‚îÇ‚û¢ ${prefix}femdom
‚îÇ‚û¢ ${prefix}erok
‚îÇ‚û¢ ${prefix}feetg
‚îÇ‚û¢ ${prefix}erokemo
‚îÇ‚û¢ ${prefix}boobs
‚îÇ‚û¢ ${prefix}pussy
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä P E S Q U I S A ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}play
‚îÇ‚û¢ ${prefix}play2
‚îÇ‚û¢ ${prefix}play3
‚îÇ‚û¢ ${prefix}play4
‚îÇ‚û¢ ${prefix}jooxplay
‚îÇ‚û¢ ${prefix}playmp4
‚îÇ‚û¢ ${prefix}ytmp4
‚îÇ‚û¢ ${prefix}ytmp3
‚îÇ‚û¢ ${prefix}facemp4
‚îÇ‚û¢ ${prefix}playstore
‚îÇ‚û¢ ${prefix}ytsearch
‚îÇ‚û¢ ${prefix}mediafire (url)
‚îÇ‚û¢ ${prefix}imgpralink
‚îÇ‚û¢ ${prefix}videopralink
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä I N F O ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}ping (velo)
‚îÇ‚û¢ ${prefix}bateria
‚îÇ‚û¢ ${prefix}atividade
‚îÇ‚û¢ ${prefix}rankativo
‚îÇ‚û¢ ${prefix}checkativo @marca
‚îÇ‚û¢ ${prefix}tabela (tabela-letras)
‚îÇ‚û¢ ${prefix}ranklevel (de todos)
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä J O G O S ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}ppt (papel-tesoura) 
‚îÇ‚û¢ ${prefix}jogodavelha @marca
‚îÇ‚û¢ ${prefix}quizanime (ADM-ATIVAR)
‚îÇ‚û¢ ${prefix}quizanimais (ADM-ATIVAR)
‚îä> Pra os quiz /revelarAnimal /revelarAnime
‚îÇ‚û¢ ${prefix}cassino
‚îÇ‚û¢ ${prefix}anagrama
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä F I G ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}fsticker
‚îÇ‚û¢ ${prefix}sticker
‚îÇ‚û¢ ${prefix}togif
‚îÇ‚û¢ ${prefix}toimg
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä A T T P ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}attp  (txt)
‚îÇ‚û¢ ${prefix}ttp (txt)
‚îÇ‚û¢ ${prefix}attp2 (txt)
‚îÇ‚û¢ ${prefix}attp3 (txt)
‚îÇ‚û¢ ${prefix}attp4 (txt)
‚îÇ‚û¢ ${prefix}attp5 (txt)
‚îÇ‚û¢ ${prefix}attp6 (txt)
‚îÇ‚û¢ ${prefix}ttm   (txt)
‚îÇ‚û¢ ${prefix}ttm2  (txt)
‚îÇ‚û¢ ${prefix}ttm3  (txt)
‚îÇ‚û¢ ${prefix}ttm4  (txt)
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä B A S I C O ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}gtts (linguagem)
‚îÇ‚û¢ ${prefix}tagme
‚îÇ‚û¢ ${prefix}emoji
‚îÇ‚û¢ ${prefix}tabela
‚îÇ‚û¢ ${prefix}conselhobiblico
‚îÇ‚û¢ ${prefix}simi (fale algo) 
‚îÇ‚û¢ ${prefix}perfil
‚îÇ‚û¢ ${prefix}tomp3 
‚îÇ‚û¢ ${prefix}frases
‚îÇ‚û¢ ${prefix}fazernick (nick)
‚îÇ‚û¢ ${prefix}bot
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä L O G O Sü¶ä‚ù≠*
‚îÇ‚û¢  ${prefix}plaq
‚îÇ‚û¢  ${prefix}plaq2
‚îÇ‚û¢  ${prefix}plaq3
‚îÇ‚û¢  ${prefix}plaq4
‚îÇ‚û¢  ${prefix}plaq5
‚îÇ‚û¢  ${prefix}placaloli (txt)
‚îÇ‚û¢  ${prefix}transformer (txt)
‚îÇ‚û¢  ${prefix}narutologo (txt)
‚îÇ‚û¢  ${prefix}thunderv2 (txt)
‚îÇ‚û¢  ${prefix}thunder (txt)
‚îÇ‚û¢  ${prefix}lobometal (txt)   
‚îÇ‚û¢  ${prefix}glitch (txt)
‚îÇ‚û¢  ${prefix}america (txt)
‚îÇ‚û¢  ${prefix}demongreen (txt)
‚îÇ‚û¢  ${prefix}metalgold (txt)
‚îÇ‚û¢  ${prefix}crossfire (txt)  
‚îÇ‚û¢  ${prefix}shadow (txt)      
‚îÇ‚û¢  ${prefix}wetglass (txt)    
‚îÇ‚û¢  ${prefix}butterfly (txt)   
‚îÇ‚û¢  ${prefix}grass (txt)       
‚îÇ‚û¢  ${prefix}logogame (txt)    
‚îÇ‚û¢  ${prefix}goldplay (txt)    
‚îÇ‚û¢  ${prefix}silverplay (txt)  
‚îÇ‚û¢  ${prefix}folha (txt)   
‚îÇ‚û¢  ${prefix}folha2 (txt)      
‚îÇ‚û¢  ${prefix}folha3 (txt)      
‚îÇ‚û¢  ${prefix}folha4 (txt)      
‚îÇ‚û¢  ${prefix}folha5 (txt)      
‚îÇ‚û¢  ${prefix}neondevil (txt)   
‚îÇ‚û¢  ${prefix}show (txt)        
‚îÇ‚û¢  ${prefix}bracelet (txt)    
‚îÇ‚û¢  ${prefix}placa (txt)       
‚îÇ‚û¢  ${prefix}copo (txt)        
‚îÇ‚û¢  ${prefix}papel (txt)       
‚îÇ‚û¢  ${prefix}madeira (txt)     
‚îÇ‚û¢  ${prefix}grafity (txt)     
‚îÇ‚û¢  ${prefix}toxic (txt)       
‚îÇ‚û¢  ${prefix}harryp (txt)      
‚îÇ‚û¢  ${prefix}glitch (txt)      
‚îÇ‚û¢  ${prefix}wooden (txt)      
‚îÇ‚û¢  ${prefix}romantic (txt)    
‚îÇ‚û¢  ${prefix}Gold (txt)   
‚îÇ‚û¢  ${prefix}neon (txt) 
‚îÇ‚û¢  ${prefix}neon2 (txt)
‚îÇ‚û¢  ${prefix}neon3 (txt)   
‚îÇ‚û¢  ${prefix}neon4 (txt)     
‚îÇ‚û¢  ${prefix}comporn (txt)     
‚îÇ‚û¢  ${prefix}comentarioL (txt) 
‚îÇ‚û¢  ${prefix}8bit (txt)        
‚îÇ‚û¢  ${prefix}cemiterio (txt)   
‚îÇ‚û¢  ${prefix}googlelogo (txt)  
‚îÇ‚û¢  ${prefix}grass (txt)       
‚îÇ‚û¢  ${prefix}flower (txt)      
‚îÇ‚û¢  ${prefix}batle (txt)       
‚îÇ‚û¢  ${prefix}coffe (txt)       
‚îÇ‚û¢  ${prefix}coffe2 (txt)      
‚îÇ‚û¢  ${prefix}pubg (txt)        
‚îÇ‚û¢  ${prefix}horror (txt)      
‚îÇ‚û¢  ${prefix}fire (txt)        
‚îÇ‚û¢  ${prefix}stone (txt)       
‚îÇ‚û¢  ${prefix}break (txt)       
‚îÇ‚û¢  ${prefix}hallowen (txt)    
‚îÇ‚û¢  ${prefix}vidro (txt)       
‚îÇ‚û¢  ${prefix}carbon (txt)      
‚îÇ‚û¢  ${prefix}metalblue (txt)   
‚îÇ‚û¢  ${prefix}pink (txt)        
‚îÇ‚û¢  ${prefix}colaq (txt)       
‚îÇ‚û¢  ${prefix}ossos (txt)       
‚îÇ‚û¢  ${prefix}blood (txt)       
‚îÇ‚û¢  ${prefix}areia (txt)       
‚îÇ‚û¢  ${prefix}natal (txt)       
‚îÇ‚û¢  ${prefix}style (txt)       
‚îÇ‚û¢  ${prefix}neve (txt)        
‚îÇ‚û¢  ${prefix}pornhub (txt)     
‚îÇ‚û¢  ${prefix}space (txt)       
‚îÇ‚û¢  ${prefix}jokerlogo (txt)  
‚îÇ‚û¢  ${prefix}love (txt)      
‚îÇ‚û¢  ${prefix}larva (txt)        
‚îÇ‚û¢  ${prefix}luxury (txt)      
‚îÇ‚û¢  ${prefix}steel (txt)  
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä B R I N K S ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}gay (marca (@))
‚îÇ‚û¢ ${prefix}feio (marca (@))
‚îÇ‚û¢ ${prefix}corno (marca (@))
‚îÇ‚û¢ ${prefix}vesgo (marca (@))
‚îÇ‚û¢ ${prefix}bebado (marca (@))
‚îÇ‚û¢ ${prefix}gostoso (marca (@))
‚îÇ‚û¢ ${prefix}gostosa (marca (@))
‚îÇ‚û¢ ${prefix}beijo (marca (@))
‚îÇ‚û¢ ${prefix}matar (marca (@))
‚îÇ‚û¢ ${prefix}tapa (marca (@))
‚îÇ‚û¢ ${prefix}chute (marca (@))
‚îÇ‚û¢ ${prefix}dogolpe (marca (@))   
‚îÇ‚û¢ ${prefix}nazista (marca (@))
‚îÇ‚û¢ ${prefix}chance (fale algo) 
‚îÇ‚û¢ ${prefix}casal    
‚îÇ‚û¢ ${prefix}rankgay      
‚îÇ‚û¢ ${prefix}rankgado
‚îÇ‚û¢ ${prefix}rankcorno  
‚îÇ‚û¢ ${prefix}rankgostoso
‚îÇ‚û¢ ${prefix}rankgostosa
‚îÇ‚û¢ ${prefix}ranknazista
‚îÇ‚û¢ ${prefix}rankotakus
‚îÇ‚û¢ ${prefix}rankpau
‚îÇ‚û¢ ${prefix}calunia @marca/bla/bla
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä T I C O L Eü¶ä‚ù≠*
‚îÇ‚û¢  ${prefix}infocontador
‚îÇ‚û¢  ${prefix}blockcmd  (cmd)
‚îÇ‚û¢  ${prefix}unblockcmd (cmd)
‚îÇ‚û¢  ${prefix}legendabv (oq qr)
‚îÇ‚û¢  ${prefix}legendasaiu (oq qr)
‚îÇ‚û¢  ${prefix}fundobemvindo (link-img)
‚îÇ‚û¢  ${prefix}fundosaiu (link-img)
‚îÇ‚û¢  ${prefix}serpremium
‚îÇ‚û¢  ${prefix}listabt
‚îÇ‚û¢  ${prefix}listagp
‚îÇ‚û¢  ${prefix}limparmsg (chat-do-bot)
‚îÇ‚û¢  ${prefix}antipalavr–£–Éo 1 / 0
‚îÇ‚û¢  ${prefix}antiligar 1 / 0
‚îÇ‚û¢  ${prefix}antipv 1 / 0 (esse da block)
‚îÇ‚û¢  ${prefix}addpalavra (palavr–£–Éo)
‚îÇ‚û¢  ${prefix}delpalavra (palavr–£–Éo)
‚îÇ‚û¢  ${prefix}antipvon
‚îÇ‚û¢  ${prefix}antipvoff
‚îÇ‚û¢  ${prefix}ativo
‚îÇ‚û¢  ${prefix}ausente (fale-oq-faz)
‚îÇ‚û¢  ${prefix}delpremium @(marca)
‚îÇ‚û¢  ${prefix}addpremium @(marca)
‚îÇ‚û¢  ${prefix}clonar [@] (rouba ft de prf)
‚îÇ‚û¢  ${prefix}fotobot (img, = foto do BT)
‚îÇ‚û¢  ${prefix}descri–£–á–£–Éogp (digite-algo)
‚îÇ‚û¢  ${prefix}limpar (limpa tds conversas)
‚îÇ‚û¢  ${prefix}block [@] (bloq de usar cmds) 
‚îÇ‚û¢  ${prefix}unblock [@] (desbloquear) 
‚îÇ‚û¢  ${prefix}setprefix  (prefixo-novo)
‚îÇ‚û¢  ${prefix}bangp
‚îÇ‚û¢  ${prefix}unbangp
‚îÇ‚û¢  ${prefix}dono2 @marca
‚îÇ‚û¢  ${prefix}dono3 @marca
‚îÇ‚û¢  ${prefix}dono4 @marca
‚îÇ‚û¢  ${prefix}dono5 @marca
‚îÇ‚û¢  ${prefix}bcgp (TM pra tds do gp)
‚îÇ‚û¢  ${prefix}transmitir -all / -pvs / -gps
‚îÇ‚û¢  ${prefix}transmitir2 (marcar)
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä P R E M ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}delete (Bot deleta (algo) )
‚îÇ‚û¢ ${prefix}destrava
‚îÇ‚û¢ ${prefix}destrava2
‚îÇ‚û¢ ${prefix}ddd (numero)
‚îÇ‚û¢ ${prefix}cep (numero)
‚îÇ‚û¢ ${prefix}gerarcpf
‚îÇ‚û¢ ${prefix}premiumlist
‚îÇ‚û¢ ${prefix}rename 
‚îÇ‚û¢ ${prefix}metadinha
‚îÇ‚û¢ ${prefix}lerfoto (marca)
‚îÇ‚û¢ ${prefix}encurtalink (link)
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ
*‚ï≠‚îÄ‚îÄ‚îÄ ‚ù¨ü¶ä E F E C T S ü¶ä‚ù≠*
‚îÇ‚û¢ ${prefix}triggered (marcar)-(img)
‚îÇ‚û¢ ${prefix}paisagem (marcar)-(img)
‚îÇ‚û¢ ${prefix}qbcabe–£–áa (marcar)-(img)
‚îÇ‚û¢ ${prefix}legenda (marcar)-(img)
‚îÇ‚û¢ ${prefix}vidroqb (marcar)-(img)
‚îÇ‚û¢ ${prefix}deletef (marcar)-(img)
‚îÇ‚û¢ ${prefix}petmak (marcar)-(img)
‚îÇ‚û¢ ${prefix}zombie (marcar)-(img)
‚îÇ‚û¢ ${prefix}arteft (marcar)-(img)
‚îÇ‚û¢ ${prefix}effect (marcar)-(img)
‚îÇ‚û¢ ${prefix}wanted (marcar)-(img)
‚îÇ‚û¢ ${prefix}hitler (marcar)-(img)
‚îÇ‚û¢ ${prefix}firef (marcar)-(img)
‚îÇ‚û¢ ${prefix}preso (marcar)-(img)
‚îÇ‚û¢ ${prefix}trash (marcar)-(img)
‚îÇ‚û¢ ${prefix}cubof (marcar)-(img)
‚îÇ‚û¢ ${prefix}figuborrada (marcar-(img) 
‚îÇ‚û¢ ${prefix}arma (marcar)-(img)
‚îÇ‚û¢ ${prefix}gtav (marcar)-(img)
‚îÇ‚û¢ ${prefix}rip (marcar)-(img) 
‚îÇ‚û¢${prefix}videolento (marca)
‚îÇ‚û¢${prefix}videorapido (marca)
‚îÇ‚û¢${prefix}videocontrario (marca)
‚îÇ‚û¢${prefix}audiolento (marca)
‚îÇ‚û¢${prefix}audiorapido (marca)
‚îÇ‚û¢${prefix}grave (marca)
‚îÇ‚û¢${prefix}grave2 (marca)
‚îÇ‚û¢${prefix}fast (marca)
‚îÇ‚û¢${prefix}esquilo (marca)
‚îÇ‚û¢${prefix}estourar (marca)
‚îÇ‚û¢${prefix}bass (marca)
‚îÇ‚û¢${prefix}bass2 (marca)
‚îÇ‚û¢${prefix}vozmenino (marca)
‚ï∞‚îÄ‚îÄ‚îÄ„ÄÖ`,
               footerText: 'ayumi bot', imageMessage: imageMsg,
               buttons: buttons,
               headerType: 4
}

               prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
               ayumi.relayWAMessage(prep)
               break 

case 'buybot':
buttons = [{buttonId:`#comprar1`,buttonText:{displayText: '1¬∞ O P √á √É O'},type:1},{buttonId:`#comprar2`,buttonText:{displayText: '2¬∞ O P √á √É O'},type:1}]
               buttonsMessage = {
               contentText: `‚ïì‚îÄ‚îÄ‚îÄ„ÄåüëÆ‚Äç‚ôÇÔ∏è ùó£ ùó• ùóò ùóñ ùó¢ ùó¶ üëÆ‚Äç‚ôÄÔ∏è„Äç
‚ïë *‚ûõ Descriptografado : 15 R$ *
‚ïë *‚ûõ Descript e editado com suas preferencias : 25 R$ *
‚ïô‚îÄ‚îÄ‚îÄ„ÄÖ`,
               footerText: `${pushname}`,
               buttons: buttons,
               headerType: 1
}
          prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
               ayumi.relayWAMessage(prep)
               break 

case 'comprar1':

reply(`O Sacole entrara em contato...`)
ayumi.sendMessage(`556293294732@s.whatsapp.net`, `„Äé P E D I D O„Äè\nùóªùòÇùó∫ùó≤ùóøùóº: @${senderr.split('@')[0]},\n*pedido: bot descriptografado*`, MessageType.text, {contextInfo: info})    
break 

case 'comprar2':

reply(`O Sacole entrara em contato...`)
ayumi.sendMessage(`556293294732@s.whatsapp.net`, `„Äé P E D I D O„Äè\nùóªùòÇùó∫ùó≤ùóøùóº: @${senderr.split('@')[0]},\n*pedido: bot descriptografado e editado*`, MessageType.text, {contextInfo: info})       
break 

case 'feio':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(6)
reply(' ‚ù∞ Pesquisando a sua ficha de feio : '+rate+', aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imgfeio}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
feio = random
if (feio < 20 ) {bo = '√â n√£o √© feio'} else if (feio == 21 ) {bo = '+/- feio'} else if (feio == 23 ) {bo = '+/- feio'} else if (feio == 24 ) {bo = '+/- feio'} else if (feio == 25 ) {bo = '+/- feio'} else if (feio == 26 ) {bo = '+/- feio'} else if (feio == 27 ) {bo = '+/- feio'} else if (feio == 2 ) {bo = '+/- feio'} else if (feio == 29 ) {bo = '+/- feio'} else if (feio == 30 ) {bo = '+/- feio'} else if (feio == 31 ) {bo = 'Ainda t√° na m√©dia'} else if (feio == 32 ) {bo = 'Da pra pegar umas(ns) novinha(o) ainda'} else if (feio == 33 ) {bo = 'Da pra pegar umas(ns) novinha(o) ainda'} else if (feio == 34 ) {bo = '√â fein, mas tem baum cora√ß√£o'} else if (feio == 35 ) {bo = 'T√° na m√©dia, mas n√£o deixa de ser feii'} else if (feio == 36 ) {bo = 'Bonitin mas √© feio com orgulho'} else if (feio == 37 ) {bo = 'Feio e pregui√ßoso(a), vai se arrumar praga feia'} else if (feio == 3 ) {bo = 'tenho '} else if (feio == 39 ) {bo = 'Feio, mas um banho E se arrumar, deve resolver'} else if (feio == 40 ) {bo = 'FeiN,  mas n√£o existe gente feia, existe gente que n√£o conhece os produtos jequity'} else if (feio == 41 ) {bo = 'voc√™ √© Feio, mas √© legal, continue assim'} else if (feio == 42 ) {bo = 'Nada que uma maquiagem e se arrumar, que n√£o resolva ü•¥'} else if (feio == 43 ) {bo = 'Feio que d√≥i de ver, compra uma m√°scara que melhora'} else if (feio == 44 ) {bo = 'Feio mas nada que um saco na cabe√ßa n√£o resolva n√©!?'} else if (feio == 45 ) {bo = 'voc√™ √© feio, mas tem bom gosto'} else if (feio == 46 ) {bo = 'Feio mas tem muitos amigos'} else if (feio == 47 ) {bo = 'Feio mas tem l√°bia pra pegar v√°rias novinha'} else if (feio == 4 ) {bo = 'Feio e ainda n√£o sabe se vestir, vixi'} else if (feio == 49 ) {bo = 'Feiooo'} else if (feio == 50 ) {bo = 'voc√™ √© Feio, mas n√£o se encherga üßê'} else if (feio > 51) {bo = 'voc√™ √© Feio demais üôà'} 

await ayumi.sendMessage(from, wew, image, { quoted: info, caption: '  O quanto voc√™ √© feio? \n\n „Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù± feio\n\n '+bo+' ' })
 }, 7000)
break 

case 'matar':
case 'mata':  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('marque o alvo que voc√™ quer matar')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `Voc√™ Acabou de matar o(a) @${mentioned[0].split('@')[0]} üòàüëπ` 
const jrpp = fs.readFileSync('./media/matar.mp4')
await ayumi.sendMessage(from, jrpp,  MessageType.video, {mimetype: 'video/gif', quoted: info, caption: susp})
break 

case 'corno':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(7)
reply(' ‚ù∞ Pesquisando a ficha de corno : '+rate+', aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imgcorno}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: '  O quanto voc√™ √© corno? \n\n „Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù±  corno üêÉ'})
}, 7000)
break

case 'vesgo':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(7)
reply(' ‚ù∞ Pesquisando a ficha de vesgo : '+rate+', aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imgvesgo}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: 'O quanto voc√™ √© vesgo? \n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù±  Vesgo üôÑüòÜ'})
}, 7000)
break 

case 'bebado':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(7)
reply(' ‚ù∞ Pesquisando a ficha de bebado : '+rate+', aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imgbebado}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: 'O quanto voc√™ √© bebado? \n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù± B√™bado ü§¢ü•µü•¥'})
}, 7000)
break 

case 'gado':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(6)
reply(' ‚ù∞ Pesquisando a ficha de gado : '+rate+', aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imggado}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: 'O quanto voc√™ √© gado? \n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù±  gado üêÇ'})
}, 7000)
break 

case 'gostoso':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(9)
reply(' ‚ù∞ Pesquisando a sua ficha de gostoso : '+rate+' aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imggostoso}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: '  O quanto voc√™ √© gostoso? üòè\n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù± gostoso üòù', Mimetype: 'video/gif'})
}, 7000)
break 

case 'gostosa':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(9)
reply(' ‚ù∞ Pesquisando a sua ficha de gostosa : '+rate+' aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imggostosa}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: 'O quanto voc√™ √© gostosa? üòè\n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù±  gostosa üò≥'})
}, 7000)
break

case 'beijo':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque algu√©m que vc quer da um beijo')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `Voc√™ deu um beijo gostoso na(o) @${mentioned[0].split('@')[0]} üòÅüëâüëà‚ù§` 
wew = fs.readFileSync('./media/beijo.mp4')
await ayumi.sendMessage(from, wew, video, {mimetype: 'video/gif', quoted: info, caption: susp})
break

case 'tapa':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('marque o alvo que voc√™ quer d√° o tapa')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `Voc√™ Acabou de da um tapa na raba daüòè @${mentioned[0].split('@')[0]} üî•` 
const jrq = fs.readFileSync('./media/tapa.mp4')
await ayumi.sendMessage(from, jrq,  MessageType.video, {mimetype: 'video/gif', quoted: info, caption: susp})
break

case 'chute':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('marque o alvo que voc√™ quer d√° um chute')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `Voc√™ Acabou de da um chute em @${mentioned[0].split('@')[0]} ü§°` 
const jry = fs.readFileSync('./media/chute.mp4')
await ayumi.sendMessage(from, jry,  MessageType.video, {mimetype: 'video/gif', quoted: info, caption: susp})
break 

case 'dogolpe':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
if (args.length < 1) return await ayumi.sendMessage(from, 'coloca um nome', text, {quoted: info})
pkt = body.slice(9)
await ayumi.updatePresence(from, Presence.composing)
random = `${Math.floor(Math.random() * 100)}`
jpr = `*GOLPISTA ENCONTRADOüëâüèª*\n\n*GOLPISTA* : *${args[0]}*\n*PORCENTAGEM DO GOLPE* : ${random}%üòÇ\n\nEle(a) gosta de ferir sentimentos üò¢`
reply(jpr)
break

case 'casal':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
membr = []
const suamae11 = groupMembers
const suamae21 = groupMembers
const teupai11 = suamae11[Math.floor(Math.random() * suamae11.length)]
const teupai21 = suamae21[Math.floor(Math.random() * suamae21.length)]
var shipted1 = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `100%`]
const shipted = shipted1[Math.floor(Math.random() * shipted1.length)]
jet = `*Hmmm.... Eu Shipo eles 2üíòüíò*\n\n1= @${teupai11.jid.split('@')[0]}\ne esse\n2= @${teupai21.jid.split('@')[0]}\ncom uma porcentagem de: ${shipted}`
membr.push(teupai11.jid)
membr.push(teupai21.jid)
mentions(jet, membr, true)
break

case 'nazista':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
rate = body.slice(9)
reply(' ‚ù∞ Pesquisando a sua ficha de nazista : '+rate+' aguarde... ‚ù±')
 setTimeout(async() => {
wew = await getBuffer(`${imgnazista}`)
zxzz = 
await ayumi.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
await ayumi.sendMessage(from, wew, image, { quoted: info, caption: 'O quanto voc√™ √© nazista? \n\n„Äå '+rate+' „ÄçVoc√™ √©: ‚ù∞ '+random+'% ‚ù±  nazista Âçê'})
}, 7000)
break 

case 'rankativo':
case 'rankativos':  
if (!isGroup) return reply(enviar.msg.group)
if(groupIdscount.indexOf(from) < 0) return reply('O bot n√£o tem ainda dados sobre o grupo')
var ind = groupIdscount.indexOf(from)
if(countMessage[ind].numbers.length < 3) return reply('Necessita do registro de 3 usuarios')
countMessage[ind].numbers.sort((a, b) => (a.messages < b.messages) ? 1 : -1)
mentioned_jid = []
boardi = 'üî•·çù‚Éü¬†¬†¬† Ranking dos membros mais ativos:\n\n'
try {
for (let i = 0; i < 5; i++) {
if (i == 0) boardi += `${i + 1}¬∫ ü•á : @${countMessage[ind].numbers[i].jid.split('@')[0]}\nMensagens: ${countMessage[ind].numbers[i].messages}\nComandos dados: ${countMessage[ind].numbers[i].cmd_messages}\n\n`
else if (i == 1) boardi += `${i + 1}¬∫ ü•à : @${countMessage[ind].numbers[i].jid.split('@')[0]}\nMensagens: ${countMessage[ind].numbers[i].messages}\nComandos dados: ${countMessage[ind].numbers[i].cmd_messages}\n\n`
else if (i == 2) boardi += `${i + 1}¬∫ ü•â : @${countMessage[ind].numbers[i].jid.split('@')[0]}\nMensagens: ${countMessage[ind].numbers[i].messages}\nComandos dados: ${countMessage[ind].numbers[i].cmd_messages}\n\n`
else if (i == 3) boardi += `${i + 1}¬∫ ü•â : @${countMessage[ind].numbers[i].jid.split('@')[0]}\nMensagens: ${countMessage[ind].numbers[i].messages}\nComandos dados: ${countMessage[ind].numbers[i].cmd_messages}\n\n`	
else if (i == 4) boardi += `${i + 1}¬∫ ü•â : @${countMessage[ind].numbers[i].jid.split('@')[0]}\nMensagens: ${countMessage[ind].numbers[i].messages}\nComandos dados: ${countMessage[ind].numbers[i].cmd_messages}\n\n`			
				
mentioned_jid.push(countMessage[ind].numbers[i].jid)
} 
mentions(boardi, mentioned_jid, true)
} catch (err) {
			console.log(err)
await ayumi.sendMessage(from, `√â necess√°rio 5 jogadores para se construir um ranking`, text, {quoted: info})
}
break

case 'checkativo':
if (!isGroup) return reply(enviar.msg.group)
if(groupIdscount.indexOf(from) < 0) return reply('O bot n√£o tem ainda dados sobre o grupo')
var ind = groupIdscount.indexOf(from)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque o n√∫mero que deseja puxar a atividade')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(numbersIds.indexOf(mentioned[0]) >= 0) {
var indnum = numbersIds.indexOf(mentioned[0])
mentions(`ñ£ò‚Éü·óí Consulta das atividade de\nñ£ò‚Éü·óí @${mentioned[0].split('@')[0]} no grupo\n??‚Éü·óí Mensagens: ${countMessage[ind].numbers[indnum].messages}\nñ£ò‚Éü·óí Comandos dados: ${countMessage[ind].numbers[indnum].cmd_messages}`, mentioned, true)
}
else {
mentions(`‚ãÜ‚Éü€ú€£·≠™‚û£ Consulta da atividade de ‚ãÜ‚Éü€ú€£·≠™‚û£ @${mentioned[0].split('@')[0]} no grupo\n‚ãÜ‚Éü€ú€£·≠™‚û£ Mensagens: 0\n‚ãÜ‚Éü€ú€£·≠™‚û£ Comandos dados: 0`, mentioned, true)
}
break

case 'listabt'://case by: Bielzinho-Bot
if (!isOwner && !info.key.fromMe) return reply('```SOMENTE MEU DONO LIND√ÉO```')
tdtpt = await ayumi.chats.all()
dpy = await getpc(tdtpt)
sdpt = `*L I S T A  D E  B A T E - P A P O S*\n*Total de Chats* : ${dpy.length}\n\n`
for(let i=0; i<dpy.length; i++){
conts = info.key.fromMe ? info.user.jid : ayumi.contacts[dpy[i]] || {notify: jid.replace(/@.+/, '')}
nomes = ayumi.contacts[dpy[i]] != undefined ? ayumi.contacts[dpy[i]].vname || ayumi.contacts[dpy[i]].notify : undefined
sdpt += `‚Ä¢ *Nome* : ${nomes}\n‚Ä¢ *Tag* : @${dpy[i].split("@")[0]}\n‚Ä¢ *Wame* : wa.me//${dpy[i].split("@")[0]}\n\n----------------------------------\n\n`
}
mentions( sdpt, dpy, true)
break 

case 'listagp': //case by: Bielzinho-Bot
if (!isOwner && !info.key.fromMe) return reply('```SOMENTE MEU DONO LIND√ÉO```')
tdufg = await ayumi.chats.all()
ingfoo = await getGroup(tdufg)
teks1 = `*L I S T A  D E  G R U P O S*\n*Total de Grupos* : ${ingfoo.length}\n\n`
for (let i = 0; i < ingfoo.length; i++){
teks1 += `‚Ä¢ *Nome do Grupo* : ${ingfoo[i].subject}\n‚Ä¢ *Id do Grupo* : ${ingfoo[i].id}\n‚Ä¢ *Criado* : ${moment(`${ingfoo[i].creation}` * 1000).tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}\n‚Ä¢ *Total de Membros* : ${ingfoo[i].participants.length}\n\n`
}
reply(teks1)
break

case 'ranklevel':
case 'rl':
case 'rank':
_level.sort((a, b) => (a.xp < b.xp) ? 1 : -1)
let leaderboardlvl = '    üèÜ„Ää Rank Niveis „ÄãüèÜ\n\n'
let nom = 0
try {
for (let i = 0; i < 10; i++) {
nom++
leaderboardlvl += `
‚îè ‚úòüåñ ${setting.NomeDoBot} üåò‚úò‚îì
‚îÉ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚îÄ‚îÄ‚îÄ‚Ä¢
‚î£‚ù≤üèÜ‚ù≥ [${nom}] œü‚û† ${_level[i].jid.replace('@s.whatsapp.net', '')}
‚î£‚ù≤üèÜ‚ù≥„Äåxp„Äç: œü${_level[i].xp}
‚î£‚ù≤üèÜ‚ù≥„ÄåLevel„Äç :œü‚û† ${_level[i].level}
‚îó ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äå‚òÖ„Äç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îö\n`

}
leaderboardlvl += `√ó‚Ä¢-‚Ä¢-‚Ä¢‚üÆ üèÜRanking LevelüèÜ‚üØ‚Ä¢-‚Ä¢-‚Ä¢√ó`
ayumi.sendMessage(from, leaderboardlvl, text, {sendEphemeral: true, quoted: selo})
} catch (err) {
console.error(err)
await reply(`Deve conter 10 pessoas com level, e o leveling deve est√° ativado para que aconte√ßa a evolu√ß√£o de level dos membros, ap√≥s as intera√ß√µes`)
}
break

case 'rankgay':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
try{
d = []
ret = 'üè≥Ô∏è‚Äçüåà Rank dos mais gays\n'
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `üè≥Ô∏è‚Äçüåà‚ùß @${groupMembers[r].jid.split('@')[0]}\n`
d.push(groupMembers[r].jid)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'rankgado':
case 'rankgados':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
try{
d = []
ret = 'üêÇüêÇ Rank dos mais gados do grupo \n'
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `üêÇ‚ùß @${groupMembers[r].jid.split('@')[0]}\n`
d.push(groupMembers[r].jid)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'rankcorno':
case 'rankcornos':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
membr = []
const corno1 = groupMembers
const corno2 = groupMembers
const corno3 = groupMembers
const corno4 = groupMembers
const corno5 = groupMembers
const cornos1 = corno1[Math.floor(Math.random() * corno1.length)]
const cornos2 = corno2[Math.floor(Math.random() * corno2.length)]
const cornos3 = corno3[Math.floor(Math.random() * corno3.length)]
const cornos4 = corno4[Math.floor(Math.random() * corno4.length)]
const cornos5 = corno5[Math.floor(Math.random() * corno5.length)]
var porcentagemcorno = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `O chifre desse ai bate na lua ksksksk`]
const porcentagemc = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcentag = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcent = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcl = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const prg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
ytb = `
Esses s√£o os cornos do grupo ${groupName}\n@${cornos1.jid.split('@')[0]}\nCom uma porcentagem de ${porcent}\n@${cornos2.jid.split('@')[0]}\nCom uma porcentagem de ${porcentag}\n@${cornos3.jid.split('@')[0]}\nCom uma porcentagem de ${porcl}\n@${cornos4.jid.split('@')[0]}\nCom uma porcentagem de ${porg}\n@${cornos5.jid.split('@')[0]}\nCom uma porcentagem de ${prg}\n\n‚ö° ${setting.NomeDoBot} ‚ö°`
membr.push(cornos1.jid)
membr.push(cornos2.jid)
membr.push(cornos3.jid)
membr.push(cornos4.jid)
membr.push(cornos5.jid)
mentions(ytb, membr, true)
break

case 'rankgostosos':
case 'rankgostoso':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
member = []
const p01 = groupMembers
const p02 = groupMembers
const p03 = groupMembers
const p04 = groupMembers
const p05 = groupMembers
const o01 = p01[Math.floor(Math.random() * p01.length)]
const o02 = p02[Math.floor(Math.random() * p02.length)]
const o03 = p03[Math.floor(Math.random() * p03.length)]
const o04 = p04[Math.floor(Math.random() * p04.length)]
const o05 = p05[Math.floor(Math.random() * p05.length)]
luy = `
Parados!ü§öü§ö\n\n1=ü§öü§≠@${o01.jid.split('@')[0]}ü§öü§≠\n\n\n2=ü§öü§≠@${o02.jid.split('@')[0]}ü§öü§≠\n\n\n3=ü§öü§≠@${o03.jid.split('@')[0]}ü§öü§≠\n\n\n4=ü§öü§≠@${o04.jid.split('@')[0]}ü§öü§≠\n\n\n5=ü§öü§≠@${o05.jid.split('@')[0]}ü§öü§≠\n\n\nMulta por serem gostosos dmsüò≥ pague pena trabalhando em nossa ag√™ncia de modelos üòä by: ${NomeDoBot}`
member.push(o01.jid)
member.push(o02.jid)
member.push(o03.jid)
member.push(o04.jid)
member.push(o05.jid)
mentions(luy, member, true)
break

case 'rankgostosas':
case 'rankgostosa':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
member = []
const p1 = groupMembers
const p2 = groupMembers
const p3 = groupMembers
const p4 = groupMembers
const p5 = groupMembers
const o1 = p1[Math.floor(Math.random() * p1.length)]
const o2 = p2[Math.floor(Math.random() * p2.length)]
const o3 = p3[Math.floor(Math.random() * p3.length)]
const o4 = p4[Math.floor(Math.random() * p4.length)]
const o5 = p5[Math.floor(Math.random() * p5.length)]
luy = `
Paradas!ü§öü§ö\n\n1=ü§öü§≠@${o1.jid.split('@')[0]}ü§öü§≠\n\n\n2=ü§öü§≠@${o2.jid.split('@')[0]}ü§öü§≠\n\n\n3=ü§öü§≠@${o3.jid.split('@')[0]}ü§öü§≠\n\n\n4=ü§öü§≠@${o4.jid.split('@')[0]}ü§öü§≠\n\n\n5=ü§öü§≠@${o5.jid.split('@')[0]}ü§öü§≠\n\n\nMultas por serem gostosas dmsüò≥ pague pena enviando nud no PV do donoüòä by Bot`
member.push(o1.jid)
member.push(o2.jid)
member.push(o3.jid)
member.push(o4.jid)
member.push(o5.jid)
mentions(luy, member, true)
break

case 'ranknazista':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
try{
if(!isGroup) return reply(enviar.msg.grupo)
d = []
teks = 'üíÇ‚Äç‚ôÇÔ∏èRank dos mais nazistas do gp\n'
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `üíÇ‚Äç‚ôÇÔ∏è‚ùß @${groupMembers[r].jid.split('@')[0]}\n`
d.push(groupMembers[r].jid)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'rankotakus':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
membr = []
const otaku1 = groupMembers
const otaku2 = groupMembers
const otaku3 = groupMembers
const otaku4 = groupMembers
const otaku5 = groupMembers
const otaku6 = groupMembers
const otaku7 = groupMembers
const otaku = groupMembers
const otaku9 = groupMembers
const otaku10 = groupMembers
const otakus1 = otaku1[Math.floor(Math.random() * otaku1.length)]
const otakus2 = otaku2[Math.floor(Math.random() * otaku2.length)]
const otakus3 = otaku3[Math.floor(Math.random() * otaku3.length)]
const otakus4 = otaku4[Math.floor(Math.random() * otaku4.length)]
const otakus5 = otaku5[Math.floor(Math.random() * otaku5.length)]
const otakus6 = otaku6[Math.floor(Math.random() * otaku6.length)]
const otakus7 = otaku7[Math.floor(Math.random() * otaku7.length)]
const otakus = otaku[Math.floor(Math.random() * otaku.length)]
const otakus9 = otaku9[Math.floor(Math.random() * otaku9.length)]
const otakus10 = otaku10[Math.floor(Math.random() * otaku10.length)]
ytb = `esses s√£o os otakus fedidos do grupo\n@${otakus1.jid.split('@')[0]}\n@${otakus2.jid.split('@')[0]}\n@${otakus3.jid.split('@')[0]}\n@${otakus4.jid.split('@')[0]}\n@${otakus5.jid.split('@')[0]}\n@${otakus6.jid.split('@')[0]}\n@${otakus7.jid.split('@')[0]}\n@${otakus.jid.split('@')[0]}\n@${otakus9.jid.split('@')[0]}\n@${otakus10.jid.split('@')[0]}\n\n‚ö° ${setting.NomeDoBot} ‚ö°`
membr.push(otakus1.jid)
membr.push(otakus2.jid)
membr.push(otakus3.jid)
membr.push(otakus4.jid)
membr.push(otakus5.jid)
membr.push(otakus6.jid)
membr.push(otakus7.jid)
membr.push(otakus.jid)
membr.push(otakus9.jid)
membr.push(otakus10.jid)
mentions(ytb, membr, true)
break

case 'rankpau':
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for um, apenas digite ${prefix}modobrincadeira 1`)
membr = []
const pauz1 = groupMembers
const pauz2 = groupMembers
const pauz3 = groupMembers
const pauz4 = groupMembers
const pauz5 = groupMembers
const paus1 = pauz1[Math.floor(Math.random() * pauz1.length)]
const paus2 = pauz2[Math.floor(Math.random() * pauz2.length)]
const paus3 = pauz3[Math.floor(Math.random() * pauz3.length)]
const paus4 = pauz4[Math.floor(Math.random() * pauz4.length)]
const paus5 = pauz5[Math.floor(Math.random() * pauz5.length)]
var pcpau1 = ["Minusc√∫lo", `Pequenino`, `Pequeno`, `M√©dio`, `Grandinho`, `Grande`, `Grand√£o`, `Gigante`, `Gigantesco`, `Enorme`, `BATENDO NA LUA`, `QUEIMADO, T√ÉO GRANDE QUE BATEU NO SOL E QUEIMOU ksksksk`]
var pcpau2 = ["Minusc√∫lo", `Pequenino`, `Pequeno`, `M√©dio`, `Grandinho`, `Grande`, `Grand√£o`, `Gigante`, `Gigantesco`, `Enorme`, `BATENDO NA LUA`, `QUEIMADO, T√ÉO GRANDE QUE BATEU NO SOL E QUEIMOU ksksksk`]
var pcpau3 = ["Minusc√∫lo", `Pequenino`, `Pequeno`, `M√©dio`, `Grandinho`, `Grande`, `Grand√£o`, `Gigante`, `Gigantesco`, `Enorme`, `BATENDO NA LUA`, `QUEIMADO, T√ÉO GRANDE QUE BATEU NO SOL E QUEIMOU ksksksk`]
var pcpau4 = ["Minusc√∫lo", `Pequenino`, `Pequeno`, `M√©dio`, `Grandinho`, `Grande`, `Grand√£o`, `Gigante`, `Gigantesco`, `Enorme`, `BATENDO NA LUA`, `QUEIMADO, T√ÉO GRANDE QUE BATEU NO SOL E QUEIMOU ksksksk`]
var pcpau5 = ["Minusc√∫lo", `Pequenino`, `Pequeno`, `M√©dio`, `Grandinho`, `Grande`, `Grand√£o`, `Gigante`, `Gigantesco`, `Enorme`, `BATENDO NA LUA`, `QUEIMADO, T√ÉO GRANDE QUE BATEU NO SOL E QUEIMOU ksksksk`]
const pc1 = pcpau1[Math.floor(Math.random() * pcpau1.length)]
const pc2 = pcpau2[Math.floor(Math.random() * pcpau2.length)]
const pc3 = pcpau3[Math.floor(Math.random() * pcpau3.length)]
const pc4 = pcpau4[Math.floor(Math.random() * pcpau4.length)]
const pc5 = pcpau5[Math.floor(Math.random() * pcpau5.length)]
pdr = `Esses s√£o os caras com o menor e maior pau do Grupo\n${groupName}\n\n@${paus1.jid.split('@')[0]}\n${pc1}\n@${paus2.jid.split('@')[0]}\n${pc2}\n@${paus3.jid.split('@')[0]}\n${pc3}\n@${paus4.jid.split('@')[0]}\n${pc4}\n@${paus5.jid.split('@')[0]}\n${pc5}\n\n ${setting.NomeDoBot}`
membr.push(paus1.jid)
membr.push(paus2.jid)
membr.push(paus3.jid)
membr.push(paus4.jid)
membr.push(paus5.jid)
mentions(pdr, membr, true)
break 

case 'jogodavelha':
if(!isGroup) return reply('comando apenas para grupos')
if (fs.existsSync(`./lib/tictactoe/db/${from}.json`)) {
const boardnow = setGame(`${from}`);
const matrix = boardnow._matrix;
const chatMove = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
     
[‚ùó] Algu√©m est√° jogando no momento...\n\n@${boardnow.X} VS @${boardnow.O}
     
‚ùå : @${boardnow.X}
‚≠ï : @${boardnow.O}
     
 Sua vez : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}
     
${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
ayumi.sendMessage(from, chatMove, MessageType.text, {quoted: info,
contextInfo: {
mentionedJid: [
boardnow.X + "@s.whatsapp.net",
boardnow.O + "@s.whatsapp.net",
],
},
});
return;
}
if (argss.length === 1)
return reply(`*‚üÖ‚ùó‚üÜ Jogue com Alguem!!!!*
*para inicar a partida : ${prefix + command} @membro do gp*`);
const boardnow = setGame(`${from}`);
console.log(`Start Tictactore ${boardnow.session}`);
boardnow.status = false;
boardnow.X = sender.replace("@s.whatsapp.net", "");
boardnow.O = argss[1].replace("@", "");
fs.writeFileSync(`./lib/tictactoe/db/${from}.json`,
JSON.stringify(boardnow, null, 2)
);
const strChat = `*„Äéüìå·é¨’è·è¢·é¨·é°·é™Œù·é†œ¥ œ¥ œ¥·è¢œ¥Œù·é¨ŒùÕ≤·é¨‚öîÔ∏è„Äè*
     
@${sender.replace("@s.whatsapp.net",
"")} _est√° te desafiando para uma partida de jogo da velha..._
_[ ${argss[1]} ] Use *„ÄéS„Äè* para aceitar ou *„ÄéN„Äè* para n√£o aceitar..._
     `;
ayumi.sendMessage(from, strChat, MessageType.text, {quoted: info,
contextInfo: {
mentionedJid: [sender, argss[1].replace("@", "") + "@s.whatsapp.net"],
},
});
break

case 'resetarvelha':
case 'resetavelha':  
case 'resetarv':
case 'resetav': 
case 'rv': 
if (!isGroupAdmins) return reply(`Fale com algum adm para resetar o jogo, digite ${prefix}admins pra acordar esses vagaba`)
if (fs.existsSync("./lib/tictactoe/db/" + from + ".json")) {
fs.unlinkSync("./lib/tictactoe/db/" + from + ".json");
reply(`Jogo da velha resetado com sucesso nesse grupo!`);
} else {
reply(`N√£o a nenhuma sess√£o em andamento...`);
}
break

case "ppt":
if (args.length < 1) return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
ppt = ["pedra", "papel", "tesoura"]
ppy = ppt[Math.floor(Math.random() * ppt.length)]
ppg = Math.floor(Math.random() * 1) + 10
pptb = ppy
if ((pptb == "pedra" && args == "papel") ||
(pptb == "papel" && args == "tesoura") ||
(pptb == "tesoura" && args == "pedra")) {
var vit = "vitoria"
} else if ((pptb == "pedra" && args == "tesoura") ||
(pptb == "papel" && args == "pedra") ||
(pptb == "tesoura" && args == "papel")) {
var vit = "derrota"
} else if ((pptb == "pedra" && args == "pedra") ||
(pptb == "papel" && args == "papel") ||
(pptb == "tesoura" && args == "tesoura")) {
var vit = "empate"
} else if (vit = "undefined") {
return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
}
if (vit == "vitoria") {
var tes = "Vit√≥ria do jogador"
}
if (vit == "derrota") {
var tes = "A vit√≥ria √© do BOT"
}
if (vit == "empate") {
var tes = "O jogo terminou em empate"
}
reply(`${NomeDoBot} jogou: ${pptb}\nO jogador jogou: ${args}\n\n${tes}`)
if (tes == "Vit√≥ria do jogador") {
reply(pph)
}
break

case 'cassino':
ayumi.updatePresence(from, Presence.composing) //CASSINO
 const soto = [
'üçä : üçí : üçê',
'üçí : üîî : üçä',
'üçá : üçá : üçá',
'üçä : üçã : üîî',
'üîî : üçí : üçê',
'üîî : üçí : üçä',
'üçä : üçã : ??',		
'üçê : üçí : üçã',
'üçê : üçê : üçê',
'üçä : üçí : üçí',
'üîî : üîî : üçá',
'üçå : üçí : üîî',
'üçê : üîî : üîî',
'üçä : üçã : üçí',
'üçã : üçã : üçå',
'üîî : üîî : üçá',
'üîî : üçê : üçá',
'üîî : üîî : üîî',
'üçí : üçí : üçí',
'üçå : üçå : üçå'
]		
const somtoy2 = sotoy[Math.floor(Math.random() * sotoy.length)]
if ((somtoy2 == 'ü•ë : ü•ë : ü•ë') ||(somtoy2 == 'üçâ : üçâ : üçâ') ||(somtoy2 == 'üçì : üçì : üçì') ||(somtoy2 == 'üçé : üçé : üçé') ||(somtoy2 == 'üçç : üçç : üçç') ||(somtoy2 == 'ü•ù : ü•ù : ü•ù') ||(somtoy2 == 'üçë : üçë : üçë') ||(somtoy2 == 'ü•• : ü•• : ü••') ||(somtoy2 == 'üçã : üçã : üçã') ||(somtoy2 == 'üçê : üçê : üçê') ||(somtoy2 == 'üçå : üçå : üçå') ||(somtoy2 == 'üçí : üçí : üçí') ||(somtoy2 == 'üîî : üîî : üîî') ||(somtoy2 == 'üçä : üçä : üçä') ||(somtoy2 == 'üçá : üçá : üçá')) {
var Vit√≥ria = "Voc√™ ganhou!!!"
} else {
var Vit√≥ria = "Voc√™ perdeu..."
}
	const cassino = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚ù™üé∞‚ù´‚îÅ‚îÅ‚îÅ‚îÅ
‚î£‚ñ∫ ${somtoy2}‚óÑ‚îõ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚ù™üí∞‚ù´‚îÅ‚îÅ‚îÅ‚îÅ

*${Vit√≥ria}*`
reply(cassino)
if (Vit√≥ria == "Voc√™ ganhou!!!") {
reply('Parab√©ns')
}
await limitAdd(sender)
break

case 'quizanime':
case 'quiz':  
if(!isGroup) return reply('Comando apenas para grupos')
const animequiz = Math.floor(Math.random() * quizanime.length)
if(!isGroupAdmins) return reply('Comando apenas para admins')
if(args.length == 0) return reply('use 1 para ativar o jogo do quizanime\npara desativar use quizanime 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./lib/quizanime-${from}.json`)) {
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/quizanime-${from}.json`))
imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
} else {
fs.writeFileSync(`./lib/quizanime-${from}.json`, `${JSON.stringify(quizanime[animequiz])}`)

imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./lib/quizanime-${from}.json`)) return reply('N√£o tem como desativar o jogo p√¥s ele n√£o foi ativado')
fs.unlinkSync(`./lib/quizanime-${from}.json`)
reply("Desativado com sucesso")
}
await limitAdd(sender)
break

case 'quizanimais':
if(!isGroup) return reply('Comando apenas para grupos')
const animaisquiz = Math.floor(Math.random() * quizanimais.length)
if(!isGroupAdmins) return reply('Comando apenas para admins')
if(args.length == 0) return reply('use 1 para ativar o jogo \npara desativar use quizanimais 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./lib/quizanim-${from}.json`)) {
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/quizanim-${from}.json`))
imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
} else {
fs.writeFileSync(`./lib/quizanim-${from}.json`, `${JSON.stringify(quizanimais[animaisquiz])}`)
imagemtexto =`                             „Äå‚ùìQuiz‚ùì„Äç`
wew = await getBuffer(`${dataAnagrama2.foto}`)   
await ayumi.sendMessage(from, wew, image, {quoted: selo, caption: imagemtexto, thumbnail: wew})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./lib/quizanim-${from}.json`)) return reply('N√£o tem como desativar o jogo p√¥s ele n√£o foi ativado')
fs.unlinkSync(`./lib/quizanim-${from}.json`)
reply("Desativado com sucesso")
}
await limitAdd(sender)
break

case 'anagrama':
if(!isGroup) return reply('comando apenas para grupos')
const anaaleatorio = Math.floor(Math.random() * palavrasANA.length)
if(!isGroupAdmins) return reply('comando apenas para admins')
if(args.length == 0) return reply('use 1 para ativar o jogo do anagrama\npara desativar use anagrama 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./lib/anagrama-${from}.json`)) {
let dataAnagrama2 = JSON.parse(fs.readFileSync(`./lib/anagrama-${from}.json`))
reply(`o jogo j√° foi iniciado neste grupo:
palavra: ${dataAnagrama2.embaralhada}
dica: ${dataAnagrama2.dica}
`)} else {
fs.writeFileSync(`./lib/anagrama-${from}.json`, `${JSON.stringify(palavrasANA[anaaleatorio])}`)
ayumi.sendMessage(from, `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚âΩ„Äå üëæ ANAGRAMA üëæ „Äç
‚îÇ‚ûΩ DESCUBRA A PALAVRA
‚îÇ‚ûΩ ANAGRAMA: ${palavrasANA[anaaleatorio].embaralhada}
‚îÇ‚ûΩ DICA: ${palavrasANA[anaaleatorio].dica}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`,MessageType.text)
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./lib/anagrama-${from}.json`)) return reply('n√£o tem como desativar o jogo do anagrama p√¥s ele n√£o foi ativado')
fs.unlinkSync(`./lib/anagrama-${from}.json`)
reply("desativado com sucesso")
}
await limitAdd(sender)
break

case 'revelaranime':
case 'revelaanime':  
if (!isGroupAdmins) return reply('somente adms')
let dataAnagrama = JSON.parse(fs.readFileSync(`./lib/quizanime-${from}.json`))
reply (`${dataAnagrama.original}`)
break

case 'revelaranimal':
case 'revelaanimal':  
if (!isGroupAdmins) return reply('somente adms')
let dataAnagramaa = JSON.parse(fs.readFileSync(`./lib/quizanim-${from}.json`))
reply (`${dataAnagramaa.original}`)
break

//‚ù¨ üèì ‚ù≠FIM-BRINCADEIRAS-JOGOS)========\\



//=(CASE-SIMIH-INTELIG√äNCIA-ARTIFICIAL)=\\

case 'simi':
if(isSimi) return reply('Desativado')
sduy = args.join(" ")
data = await fetchJson(`https://api.simsimi.net/v2/?text=${sduy}&lc=pt`, {method: 'get'})
simi = `${data.success}`  
reply(simi)
break

case 'simih':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isSimi) return reply('O modo Simi est√° ativo')
samih.push(from)
fs.writeFileSync('./lib/usuarios/simi.json', JSON.stringify(samih))
reply('Ativado com sucesso o modo simi neste grupo üòóÔ∏è')
} else if (Number(args[0]) === 0) {
if(!isSimi) return reply('J√° est√° Desativado.')
samih.splice(from, 1)
fs.writeFileSync('./lib/usuarios/simi.json', JSON.stringify(samih))
reply('Desativado modo simi com sucesso neste grupo üò°Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerdao vc em KKKKK')
}
break

//========================================\\


//==(AUDIOS/DE-MUSICA/ZOUEIRA/ETC..)===\\

case 'bot':
const soundft = fs.readFileSync('audios/qviado.mp3')
await ayumi.sendMessage(from, soundft, MessageType.audio, {quoted: info, mimetype: 'audio/mp4', ptt:true})
break

case 'infobot':
const cmdoo = fs.readFileSync('audios/infobot.mp3')
await ayumi.sendMessage(from, cmdoo, MessageType.audio, {quoted: info, mimetype: 'audio/mp4', ptt:true})
break 

//=======================================\\


//=====(ALTERADOR-DE-AUDIO/VIDEO)=======\\

case 'videocontrario':
case 'reversevid':
if (!isQuotedVideo) return reply('Marque um v√≠deo')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -vf reverse -af areverse ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer453, video, { mimetype: 'video/mp4', quoted: info })
fs.unlinkSync(ran)
})
break 

case 'videolento':
case 'slowvid':  
if (!isQuotedVideo) return reply('Marque um v√≠deo')
mortandela(from) 
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]" -map "[v]" -map "[a]" ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer453, video, { mimetype: 'video/mp4', quoted: info })
fs.unlinkSync(ran)
})
break

case 'videorapido':
case 'fastvid':  
if (!isQuotedVideo) return reply('Marque um v√≠deo')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]" -map "[v]" -map "[a]" ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer453, video, { mimetype: 'video/mp4', quoted: info })
fs.unlinkSync(ran)
})		
break

case 'grave2':
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
muk = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
gem = await ayumi.downloadAndSaveMediaMessage(muk)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'grave':
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
low = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
slo = await ayumi.downloadAndSaveMediaMessage(low)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${slo} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(slo)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'adolesc':
case 'vozmenino':  
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break  

case 'tomp3':
ayumi.updatePresence(from, Presence.composing) 
if (!isQuotedVideo) return reply('Marque o video pfv')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) return reply('‚ùå Falha ao converter v√≠deo para mp3 ‚ùå')
buffer = fs.readFileSync(ran)
ayumi.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', quoted: info})
fs.unlinkSync(ran)
})
break

case 'bass3':
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
ass = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
bas = await ayumi.downloadAndSaveMediaMessage(ass)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${bas} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(bas)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'bass': 
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
ass = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
bas = await ayumi.downloadAndSaveMediaMessage(ass)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${bas} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(bas)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'bass2': 
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${media} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'estourar': 
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
ass = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
bas = await ayumi.downloadAndSaveMediaMessage(ass)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${bas} -af equalizer=f=90:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(bas)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'fast':
case 'audiorapido':  
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
encmedia = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
media = await ayumi.downloadAndSaveMediaMessage(encmedia)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return reply('Erro')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'esquilo':
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
pai = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
tup = await ayumi.downloadAndSaveMediaMessage(pai)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${tup} -filter:a "atempo=0.7,asetrate=65100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(tup)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

case 'audiolento': 
case 'slow':
if (!isQuotedAudio) return reply('Marque um √°udio')
mortandela(from)
low = JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo
slo = await ayumi.downloadAndSaveMediaMessage(low)
ran = getRandom('.mp3')
exec(`ffmpeg -i ${slo} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(slo)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
ayumi.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: info})
fs.unlinkSync(ran)
})
break

//=========(FIM-ALTERAR-AUDIO)===========\\

//==========(EFEITOS-MARCAR)==========\\

case 'triggered':
const imgbbkey1 = imgbbb[Math.floor(Math.random() * imgbbb.length)]  
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)       
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
dsr = await imgbb(`${imgbbkey1}`, owgi)
imgtrg = `${dsr.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/triggered?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'rip':
const imgbbkey2 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)    
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
qhy = await imgbb(`${imgbbkey2}`, owgi)
imgtrg = `${qhy.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/rip?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break 

case 'trash':
case 'lixo': 
const imgbbkey3 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                     
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
der = await imgbb(`${imgbbkey3}`, owgi)
imgtrg = `${der.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/trash?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'preso':
const imgbbkey4 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)      
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
lder = await imgbb(`${imgbbkey4}`, owgi)
imgtrg = `${lder.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/jail?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'legenda': 
const imgbbkey5 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
gh = body.slice(9)           
var top = gh.split('/')[0]
var bottom = gh.split('/')[1]
if(!gh.includes("/")) return reply(`Cade a / mano?\nExemplo: ${prefix + command} Sad/Demais`)
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage || isQuotedSticker) && args.length > 0) {
ger = isQuotedImage || isQuotedSticker ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo : info 
owgi = await  ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey5}`, owgi)
teks = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api.memegen.link/images/custom/${top}/${bottom}.png?background=${teks}`
sendStickerFromUrl(from, `${anu1}`)
} else {
reply('Marque uma foto com o comando!')
}
await limitAdd(sender)
break

case 'gtav':
const imgbbkey6 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey6}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/gtav?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'zombie':
const imgbbkey7 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey7}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://jonaz-api-v2.herokuapp.com/zombie?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.resultado)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'firef':
const imgbbkey8 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey8}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/fireAnimation?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'borra':
case 'figuborrada':
addFilter(from)
const imgbbkey30 = imgbbb[Math.floor(Math.random() * imgbbb.length)]
if (isLimit(sender)) return webPage(linguagem.cash_adquirir(pushname, p), {quoted: info})
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey30}`, owgi)
imgtrg = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/pixelate?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
await requestCash(sender)
break

case 'vidroqb':
const imgbbkey9 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey9}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/brokemirror?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, sticker, {
quoted: info})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'arteft':
const imgbbkey10 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey10}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/artePhoto?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case '2arma':
const imgbbkey11 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey11}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`http://brizas-api.herokuapp.com/photooxy/v2/crossgun?apikey=brizaloka&img=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.resultado)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'armast':
const imgbbkey12 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)     
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey12}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`http://brizas-api.herokuapp.com/photooxy/v2/gunscircle?apikey=brizaloka&text=Bandido(a)&text2=da √°rea&img=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.resultado)
ayumi.sendMessage(from, nobg, image, {quoted: info})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'effect':
const imgbbkey13 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)     
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey13}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://leyscoders-api.herokuapp.com/api/imgmaker/firework?url=${imgtrg}&apikey=dappakntlll`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, video, {quoted: info, mimetype: 'video/mp4'})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'paisagem':
const imgbbkey14 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey14}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/mixGalaxy?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'cubof':
const imgbbkey15 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey15}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/cuboFoto1?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'wallimg':
const imgbbkey16 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey16}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`http://brizas-api.herokuapp.com/photooxy/v2/phonewallpaper?apikey=brizaloka&img=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.resultado)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'qbcabeca':
case 'qbcabe√ßa':
const imgbbkey17 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)                 
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey17}`, owgi)
imgtrg = `${anu.display_url}`
anu1 = await fetchJson(`https://api-gdr2.herokuapp.com/api/photooxy/puzzle?url=${imgtrg}`)
if (anu1.error) return reply("N√£o consegui detectar nenhum rosto")
nobg = await getBuffer(anu1.result.url)
ayumi.sendMessage(from, nobg, image, {
quoted: info
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'hitler':
const imgbbkey18 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)       
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey18}`, owgi)
imgtrg = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/hitler?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'deletef':
const imgbbkey19 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)       
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey19}`, owgi)
imgtrg = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/deletarCanvas?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'petmak':
const imgbbkey20 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)          
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey20}`, owgi)
imgtrg = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/petpet?url=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break 

case 'heroiimg':
const imgbbkey21 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)          
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
anu = await imgbb(`${imgbbkey21}`, owgi)
imgtrg = `${anu.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://dapuhy-api.herokuapp.com/api/canvas/crush?img=${imgtrg}&apikey=${dapuhykey}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break 

case 'arma':
case 'figuarma':
const imgbbkey22 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
mortandela(from)       
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
lfy = await imgbb(`${imgbbkey22}`, owgi)
imgtrg = `${lfy.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-exteam.herokuapp.com/api/gun?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'wanted':
const imgbbkey23 = imgbbb[Math.floor(Math.random() * imgbbb.length)]   
var imgbb = require('imgbb-uploader')
if ((isMedia && !info.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : info
reply('Estou fazendo, espere')  
owgi = await ayumi.downloadAndSaveMediaMessage(ger)
qkl = await imgbb(`${imgbbkey23}`, owgi)
imgtrg = `${qkl.display_url}`
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu1 = `https://api-gdr2.herokuapp.com/api/wanted?img=${imgtrg}`
exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
fs.unlinkSync(ranp)
if (err) return reply(`DEU ERROR üòû`)
nobg = fs.readFileSync(rano)
ayumi.sendMessage(from, nobg, sticker, {quoted: info})
fs.unlinkSync(rano)
})
} else {
reply('Voc√™ precisa marcar ou enviar uma imagem para isso')
}
break

case 'calunia':
k = `${body.slice(10)}`
txt1 = k.split("/")[0];
txt2 = k.split("/")[1];
txt3 = k.split("/")[2];
if(!k.includes("/")) return reply(`Cade a /\nExemplo: ${prefix + command} @marca-a-pessoa/Fala algo como fosse ele/Rea√ß√£o : nossaa..`)
 ayumi.sendMessage(from, `${txt3}`,text,{quoted:{    key: {fromMe: false,participant: `${txt1}@s.whatsapp.net`,},message: { "extendedTextMessage": {"text": `${txt2}`,"title": `Hmm`}}}})
 break

//‚ù¨ üèì ‚ù≠FIM-EFEITOS-MARCAR‚ù¨ üèì ‚ù≠\\

default:

if (budy.length >= limitefl) { 
if(!isAntiFlood) return
if(isOwner) return
if(isGroupAdmins) return
var Kic = `${sender.split("@")[0]}@s.whatsapp.net`  
setTimeout( () => {
if(!isOwner && !issupre && !info.key.fromMe && !isGroupAdmins) return reply('Muitas caracter√≠sticas enviadas, eu afirmo que pode ser trava, por precau√ß√µes, eu irei remover.')
console.log(color('deram Spam','red'))
}, 100)
setTimeout( () => {
ayumi.groupRemove(from, [Kic]).catch((e) => {reply(`*ERROR:* ${e}`)}) 
}, 1000)
setTimeout( () => {
}, 0)
}	


//==============(ANTILINK)===============\\

switch(ants){
} 

 //=========[--ANTI PALAVR√ÉO --]==========\\
if (isGroup && isPalavr√£o) { //CREDITOS TIAGO
 if (palavra.includes(messagesC)) {
 if (!isGroupAdmins) {
 try { 
 ayumi.sendMessage(from, `SEM PALAVR√ÉO!! üò†!!`, text , {quoted : info})       
setTimeout( () => {
ayumi.groupRemove(from, [sender])
}, 2000)
reply("2")
setTimeout( () => {
ayumi.updatePresence(from, Presence.composing)
reply("1")
}, 1000)
setTimeout( () => {
ayumi.updatePresence(from, Presence.composing)
ayumi.sendMessage(from, `*„Äå üó£Ô∏èANTI PALAVR√ÉOüó£Ô∏è „Äç*\nVoc√™ ser√° banido do gp, Na proxima tenha √©tica ao falar!!`, text , {quoted : info})           							
}, 0)
} catch { ayumi.sendMessage(from, `InFelizmente, n√£o sou um administrador, entt n√£o posso te banir!!`, text , {quoted : info}) }
} else {
return reply(`VOC√ä PODE ${pushname} üòá`)
}
}
}
//=======================================\\


if(budy.includes("https://") || (budy.includes(".net") || (budy.includes(".com" ) || (budy.includes("//s.kwai.app/") || (budy.includes("//vm.tiktok") || (budy.includes("www.") || (budy.includes("chat.whatsapp") || (budy.includes(".xml") || (budy.includes("youtube.com") || (budy.includes("//t.me/") || (budy.includes(".css")))))))))))) {
if (!isGroup) return
if (!isAntiLink) return
if (isGroupAdmins) return reply(`*Vc √© admin do gp,fica tranquilo que n√£o irei te banir.*`)
ayumi.updatePresence(from, Presence.composing)
var Kic = `${sender.split("@")[0]}@s.whatsapp.net`
setTimeout( () => {
}, 1100)
setTimeout( () => {
ayumi.groupRemove(from, [Kic]).catch((e) => {reply(`*ERROR:* ${e}`)}) 
}, 1000)
}

//========================================\\

if (document.includes(type)){
if (!Antidoc) return
if (!botNumber) return
if (isGroupAdmins) return reply(`hummmm documento`)     
reply(`N√£o permitimos envio de documentos no grupo, por quest√µes de seguran√ßa de travas e etc..., ent√£o por conta disso, terei que ti remover, qualquer d√∫vida,entre em contato com algum adm.`)
ayumi.groupSettingChange(from, GroupSettingChange.messageSend, true)		
setTimeout(() =>{
ayumi.groupRemove(from, [sender])
}, 1000)
setTimeout( () => {
ayumi.groupSettingChange(from, GroupSettingChange.messageSend, false)
}, 2000)
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
ayumi.sendMessage(from, clear , MessageType.text, {quoted: selo, contextInfo : { forwardingScore: 500, isForwarded:true}})
}

if (location.includes(type)){
if (!Antiloc) return
if (isGroupAdmins) return reply(`hummmm localiza√ß√£o `)   
reply(`localiza√ß√£o detectada, somos severos nessa quest√£o, ent√£o terei que remover voc√™, qualquer d√∫vida, entre em contato com algum adm.`)
ayumi.groupSettingChange(from, GroupSettingChange.messageSend, true)		
setTimeout(() =>{
ayumi.groupRemove(from, [sender])
}, 1000)
setTimeout( () => {
ayumi.groupSettingChange(from, GroupSettingChange.messageSend, false)
}, 2000)
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
ayumi.sendMessage(from, clear , MessageType.text, {quoted: selo, contextInfo : { forwardingScore: 500, isForwarded:true}})
}



//==========(SIMIH-FUNCAO)================\\

if (isGroup && isSimi && !info.key.fromMe && budy != undefined) {
console.log(budy)
muehe = await simih(budy)
console.log(muehe)
reply(muehe)

//========================================\\										         
			if (!isCmd) {
					} else {
						try {
         var ppimg = await ayumi.getProfilePicture(`${sender.split('@')[0]}@c.us`)
            } catch {
               var ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
            }
					buff = await getBuffer(ppimg)
               buttons = [{buttonId: `${prefix}menu`,buttonText:{displayText: 'Menu' },type:1}]

               imageMsg = (await ayumi.prepareMessageMedia(buff, "imageMessage", { thumbnail: img2,})).imageMessage
               buttonsMessage = {
               contentText:` Desculpe`,
               footerText: ` O comando ${command} ainda n√£o existe`, imageMessage: imageMsg,
               buttons: buttons,
               headerType: 4
}
prep = await ayumi.prepareMessageFromContent(from,{buttonsMessage},{quoted: selo})
               ayumi.relayWAMessage(prep)};
               }

//========================================\\

}
} catch (e) {
			            e = String(e)
			if (e.includes('this.isZero')){
return
}
			console.log('Error : %s', color(e, 'red'))
		}
	})
}
starts()
//FIM